@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxHtmlEditorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxHtmlEditor() : base("DxHtmlEditor") { }
	protected override DevExpress.Ui.DxHtmlEditorOptions CreateOptions() {
		return new DevExpress.Ui.DxHtmlEditorOptions {
			focusStateEnabled = focusStateEnabled,
			name = name,
			placeholder = placeholder,
			toolbar = toolbar,
			valueType = valueType,
			variables = variables,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			value = value,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onFocusInEnabled = onFocusInEnabled,
			onFocusOutEnabled = onFocusOutEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxHtmlEditorOptions options) {
		return DevExpress.Ui.DxHtmlEditorInterop.Init(dxTarget, options);
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetPlaceholderOption(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetPlaceholderOption(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	object toolbar;
	[Parameter]
	object Toolbar {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetToolbarOption(dxTarget).Result : toolbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetToolbarOption(dxTarget, value);
			} else {
				this.toolbar = value;
			}
		}
	}
	string valueType;
	[Parameter]
	string ValueType {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetValueTypeOption(dxTarget).Result : valueType;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetValueTypeOption(dxTarget, value);
			} else {
				this.valueType = value;
			}
		}
	}
	object variables;
	[Parameter]
	object Variables {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetVariablesOption(dxTarget).Result : variables;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetVariablesOption(dxTarget, value);
			} else {
				this.variables = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxHtmlEditorInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxHtmlEditorInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxHtmlEditorInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxHtmlEditorInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxHtmlEditorInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onFocusInEnabled;
	[Parameter]
	bool? OnFocusInEnabled {
		get => onFocusInEnabled;
		set => this.onFocusInEnabled = value;
	}
	bool? onFocusOutEnabled;
	[Parameter]
	bool? OnFocusOutEnabled {
		get => onFocusOutEnabled;
		set => this.onFocusOutEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxHtmlEditorInterop.FocusIn += DxHtmlEditor_FocusIn;
		DevExpress.Ui.DxHtmlEditorInterop.FocusOut += DxHtmlEditor_FocusOut;
		DevExpress.Ui.DxHtmlEditorInterop.ValueChanged += DxHtmlEditor_ValueChanged;
		DevExpress.Ui.DxHtmlEditorInterop.ContentReady += DxHtmlEditor_ContentReady;
		DevExpress.Ui.DxHtmlEditorInterop.Disposing += DxHtmlEditor_Disposing;
		DevExpress.Ui.DxHtmlEditorInterop.OptionChanged += DxHtmlEditor_OptionChanged;
		DevExpress.Ui.DxHtmlEditorInterop.Initialized += DxHtmlEditor_Initialized;
	}
	[Parameter]
	Action FocusIn { get; set; }
	void DxHtmlEditor_FocusIn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusIn?.Invoke();
		}
	}
	[Parameter]
	Action FocusOut { get; set; }
	void DxHtmlEditor_FocusOut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusOut?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxHtmlEditor_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxHtmlEditor_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxHtmlEditor_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxHtmlEditor_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxHtmlEditor_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void ClearHistory() {
		DevExpress.Ui.DxHtmlEditorInterop.ClearHistory(dxTarget);
	}
	public void Delete(float index, float length) {
		DevExpress.Ui.DxHtmlEditorInterop.Delete(dxTarget, index, length);
	}
	public void Format(string formatName, object formatValue) {
		DevExpress.Ui.DxHtmlEditorInterop.Format(dxTarget, formatName, formatValue);
	}
	public void FormatLine(float index, float length, string formatName, object formatValue) {
		DevExpress.Ui.DxHtmlEditorInterop.FormatLine(dxTarget, index, length, formatName, formatValue);
	}
	public void FormatLine(float index, float length, object formats) {
		DevExpress.Ui.DxHtmlEditorInterop.FormatLine(dxTarget, index, length, formats);
	}
	public void FormatText(float index, float length, string formatName, object formatValue) {
		DevExpress.Ui.DxHtmlEditorInterop.FormatText(dxTarget, index, length, formatName, formatValue);
	}
	public void FormatText(float index, float length, object formats) {
		DevExpress.Ui.DxHtmlEditorInterop.FormatText(dxTarget, index, length, formats);
	}
	public object GetFormat(float index, float length) {
		return DevExpress.Ui.DxHtmlEditorInterop.GetFormat(dxTarget, index, length).Result;
	}
	public float GetLength() {
		return DevExpress.Ui.DxHtmlEditorInterop.GetLength(dxTarget).Result;
	}
	public object GetModule(string modulePath) {
		return DevExpress.Ui.DxHtmlEditorInterop.GetModule(dxTarget, modulePath).Result;
	}
	public object GetQuillInstance() {
		return DevExpress.Ui.DxHtmlEditorInterop.GetQuillInstance(dxTarget).Result;
	}
	public object GetSelection() {
		return DevExpress.Ui.DxHtmlEditorInterop.GetSelection(dxTarget).Result;
	}
	public void InsertEmbed(float index, string type, object config) {
		DevExpress.Ui.DxHtmlEditorInterop.InsertEmbed(dxTarget, index, type, config);
	}
	public void InsertText(float index, string text, object formats) {
		DevExpress.Ui.DxHtmlEditorInterop.InsertText(dxTarget, index, text, formats);
	}
	public void Redo() {
		DevExpress.Ui.DxHtmlEditorInterop.Redo(dxTarget);
	}
	public void RegisterModules(object modules) {
		DevExpress.Ui.DxHtmlEditorInterop.RegisterModules(dxTarget, modules);
	}
	public void RemoveFormat(float index, float length) {
		DevExpress.Ui.DxHtmlEditorInterop.RemoveFormat(dxTarget, index, length);
	}
	public void SetSelection(float index, float length) {
		DevExpress.Ui.DxHtmlEditorInterop.SetSelection(dxTarget, index, length);
	}
	public void Undo() {
		DevExpress.Ui.DxHtmlEditorInterop.Undo(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxHtmlEditorInterop.FocusIn -= DxHtmlEditor_FocusIn;
		DevExpress.Ui.DxHtmlEditorInterop.FocusOut -= DxHtmlEditor_FocusOut;
		DevExpress.Ui.DxHtmlEditorInterop.ValueChanged -= DxHtmlEditor_ValueChanged;
		DevExpress.Ui.DxHtmlEditorInterop.ContentReady -= DxHtmlEditor_ContentReady;
		DevExpress.Ui.DxHtmlEditorInterop.Disposing -= DxHtmlEditor_Disposing;
		DevExpress.Ui.DxHtmlEditorInterop.OptionChanged -= DxHtmlEditor_OptionChanged;
		DevExpress.Ui.DxHtmlEditorInterop.Initialized -= DxHtmlEditor_Initialized;
	}
}
