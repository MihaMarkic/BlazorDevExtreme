@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxSchedulerOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxScheduler() : base("DxScheduler") { }
	protected override DevExpress.Ui.DxSchedulerOptions CreateOptions() {
		return new DevExpress.Ui.DxSchedulerOptions {
			allDayExpr = allDayExpr,
			appointmentTemplate = appointmentTemplate,
			appointmentTooltipTemplate = appointmentTooltipTemplate,
			cellDuration = cellDuration,
			crossScrollingEnabled = crossScrollingEnabled,
			currentDate = currentDate,
			currentView = currentView,
			dataCellTemplate = dataCellTemplate,
			dataSource = dataSource,
			dateCellTemplate = dateCellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			descriptionExpr = descriptionExpr,
			dropDownAppointmentTemplate = dropDownAppointmentTemplate,
			editing = editing,
			endDateExpr = endDateExpr,
			endDateTimeZoneExpr = endDateTimeZoneExpr,
			endDayHour = endDayHour,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			groupByDate = groupByDate,
			groups = groups,
			indicatorUpdateInterval = indicatorUpdateInterval,
			max = max,
			maxAppointmentsPerCell = maxAppointmentsPerCell,
			min = min,
			noDataText = noDataText,
			recurrenceEditMode = recurrenceEditMode,
			recurrenceExceptionExpr = recurrenceExceptionExpr,
			recurrenceRuleExpr = recurrenceRuleExpr,
			remoteFiltering = remoteFiltering,
			resourceCellTemplate = resourceCellTemplate,
			resources = resources,
			selectedCellData = selectedCellData,
			shadeUntilCurrentTime = shadeUntilCurrentTime,
			showAllDayPanel = showAllDayPanel,
			showCurrentTimeIndicator = showCurrentTimeIndicator,
			startDateExpr = startDateExpr,
			startDateTimeZoneExpr = startDateTimeZoneExpr,
			startDayHour = startDayHour,
			textExpr = textExpr,
			timeCellTemplate = timeCellTemplate,
			timeZone = timeZone,
			useDropDownViewSwitcher = useDropDownViewSwitcher,
			views = views,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onAppointmentAddedEnabled = onAppointmentAddedEnabled,
			onAppointmentAddingEnabled = onAppointmentAddingEnabled,
			onAppointmentClickEnabled = onAppointmentClickEnabled,
			onAppointmentContextMenuEnabled = onAppointmentContextMenuEnabled,
			onAppointmentDblClickEnabled = onAppointmentDblClickEnabled,
			onAppointmentDeletedEnabled = onAppointmentDeletedEnabled,
			onAppointmentDeletingEnabled = onAppointmentDeletingEnabled,
			onAppointmentFormCreatedEnabled = onAppointmentFormCreatedEnabled,
			onAppointmentRenderedEnabled = onAppointmentRenderedEnabled,
			onAppointmentUpdatedEnabled = onAppointmentUpdatedEnabled,
			onAppointmentUpdatingEnabled = onAppointmentUpdatingEnabled,
			onCellClickEnabled = onCellClickEnabled,
			onCellContextMenuEnabled = onCellContextMenuEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxSchedulerOptions options) {
		return DevExpress.Ui.DxSchedulerInterop.Init(dxTarget, options);
	}
	string allDayExpr;
	[Parameter]
	string AllDayExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetAllDayExprOption(dxTarget).Result : allDayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAllDayExprOption(dxTarget, value);
			} else {
				this.allDayExpr = value;
			}
		}
	}
	object appointmentTemplate;
	[Parameter]
	object AppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTemplateOption(dxTarget).Result : appointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTemplateOption(dxTarget, value);
			} else {
				this.appointmentTemplate = value;
			}
		}
	}
	object appointmentTooltipTemplate;
	[Parameter]
	object AppointmentTooltipTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTooltipTemplateOption(dxTarget).Result : appointmentTooltipTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTooltipTemplateOption(dxTarget, value);
			} else {
				this.appointmentTooltipTemplate = value;
			}
		}
	}
	float? cellDuration;
	[Parameter]
	float? CellDuration {
		get => isInitialized ? (float?)DevExpress.Ui.DxSchedulerInterop.GetCellDurationOption(dxTarget).Result : cellDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCellDurationOption(dxTarget, value);
			} else {
				this.cellDuration = value;
			}
		}
	}
	bool? crossScrollingEnabled;
	[Parameter]
	bool? CrossScrollingEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetCrossScrollingEnabledOption(dxTarget).Result : crossScrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCrossScrollingEnabledOption(dxTarget, value);
			} else {
				this.crossScrollingEnabled = value;
			}
		}
	}
	object currentDate;
	[Parameter]
	object CurrentDate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCurrentDateOption(dxTarget).Result : currentDate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentDateOption(dxTarget, value);
			} else {
				this.currentDate = value;
			}
		}
	}
	string currentView;
	[Parameter]
	string CurrentView {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetCurrentViewOption(dxTarget).Result : currentView;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentViewOption(dxTarget, value);
			} else {
				this.currentView = value;
			}
		}
	}
	object dataCellTemplate;
	[Parameter]
	object DataCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataCellTemplateOption(dxTarget).Result : dataCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataCellTemplateOption(dxTarget, value);
			} else {
				this.dataCellTemplate = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object dateCellTemplate;
	[Parameter]
	object DateCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDateCellTemplateOption(dxTarget).Result : dateCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateCellTemplateOption(dxTarget, value);
			} else {
				this.dateCellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetDateSerializationFormatOption(dxTarget).Result : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateSerializationFormatOption(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	string descriptionExpr;
	[Parameter]
	string DescriptionExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetDescriptionExprOption(dxTarget).Result : descriptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDescriptionExprOption(dxTarget, value);
			} else {
				this.descriptionExpr = value;
			}
		}
	}
	object dropDownAppointmentTemplate;
	[Parameter]
	object DropDownAppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDropDownAppointmentTemplateOption(dxTarget).Result : dropDownAppointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDropDownAppointmentTemplateOption(dxTarget, value);
			} else {
				this.dropDownAppointmentTemplate = value;
			}
		}
	}
	object editing;
	[Parameter]
	object Editing {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEditingOption(dxTarget).Result : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEditingOption(dxTarget, value);
			} else {
				this.editing = value;
			}
		}
	}
	string endDateExpr;
	[Parameter]
	string EndDateExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetEndDateExprOption(dxTarget).Result : endDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateExprOption(dxTarget, value);
			} else {
				this.endDateExpr = value;
			}
		}
	}
	string endDateTimeZoneExpr;
	[Parameter]
	string EndDateTimeZoneExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetEndDateTimeZoneExprOption(dxTarget).Result : endDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateTimeZoneExprOption(dxTarget, value);
			} else {
				this.endDateTimeZoneExpr = value;
			}
		}
	}
	float? endDayHour;
	[Parameter]
	float? EndDayHour {
		get => isInitialized ? (float?)DevExpress.Ui.DxSchedulerInterop.GetEndDayHourOption(dxTarget).Result : endDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDayHourOption(dxTarget, value);
			} else {
				this.endDayHour = value;
			}
		}
	}
	object firstDayOfWeek;
	[Parameter]
	object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetFirstDayOfWeekOption(dxTarget).Result : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFirstDayOfWeekOption(dxTarget, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? groupByDate;
	[Parameter]
	bool? GroupByDate {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetGroupByDateOption(dxTarget).Result : groupByDate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetGroupByDateOption(dxTarget, value);
			} else {
				this.groupByDate = value;
			}
		}
	}
	object groups;
	[Parameter]
	object Groups {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetGroupsOption(dxTarget).Result : groups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetGroupsOption(dxTarget, value);
			} else {
				this.groups = value;
			}
		}
	}
	float? indicatorUpdateInterval;
	[Parameter]
	float? IndicatorUpdateInterval {
		get => isInitialized ? (float?)DevExpress.Ui.DxSchedulerInterop.GetIndicatorUpdateIntervalOption(dxTarget).Result : indicatorUpdateInterval;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetIndicatorUpdateIntervalOption(dxTarget, value);
			} else {
				this.indicatorUpdateInterval = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMaxOption(dxTarget).Result : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMaxOption(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	object maxAppointmentsPerCell;
	[Parameter]
	object MaxAppointmentsPerCell {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMaxAppointmentsPerCellOption(dxTarget).Result : maxAppointmentsPerCell;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMaxAppointmentsPerCellOption(dxTarget, value);
			} else {
				this.maxAppointmentsPerCell = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMinOption(dxTarget).Result : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMinOption(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	string recurrenceEditMode;
	[Parameter]
	string RecurrenceEditMode {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetRecurrenceEditModeOption(dxTarget).Result : recurrenceEditMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceEditModeOption(dxTarget, value);
			} else {
				this.recurrenceEditMode = value;
			}
		}
	}
	string recurrenceExceptionExpr;
	[Parameter]
	string RecurrenceExceptionExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetRecurrenceExceptionExprOption(dxTarget).Result : recurrenceExceptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceExceptionExprOption(dxTarget, value);
			} else {
				this.recurrenceExceptionExpr = value;
			}
		}
	}
	string recurrenceRuleExpr;
	[Parameter]
	string RecurrenceRuleExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetRecurrenceRuleExprOption(dxTarget).Result : recurrenceRuleExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceRuleExprOption(dxTarget, value);
			} else {
				this.recurrenceRuleExpr = value;
			}
		}
	}
	bool? remoteFiltering;
	[Parameter]
	bool? RemoteFiltering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetRemoteFilteringOption(dxTarget).Result : remoteFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRemoteFilteringOption(dxTarget, value);
			} else {
				this.remoteFiltering = value;
			}
		}
	}
	object resourceCellTemplate;
	[Parameter]
	object ResourceCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResourceCellTemplateOption(dxTarget).Result : resourceCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResourceCellTemplateOption(dxTarget, value);
			} else {
				this.resourceCellTemplate = value;
			}
		}
	}
	object resources;
	[Parameter]
	object Resources {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResourcesOption(dxTarget).Result : resources;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResourcesOption(dxTarget, value);
			} else {
				this.resources = value;
			}
		}
	}
	object selectedCellData;
	[Parameter]
	object SelectedCellData {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetSelectedCellDataOption(dxTarget).Result : selectedCellData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetSelectedCellDataOption(dxTarget, value);
			} else {
				this.selectedCellData = value;
			}
		}
	}
	bool? shadeUntilCurrentTime;
	[Parameter]
	bool? ShadeUntilCurrentTime {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetShadeUntilCurrentTimeOption(dxTarget).Result : shadeUntilCurrentTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShadeUntilCurrentTimeOption(dxTarget, value);
			} else {
				this.shadeUntilCurrentTime = value;
			}
		}
	}
	bool? showAllDayPanel;
	[Parameter]
	bool? ShowAllDayPanel {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetShowAllDayPanelOption(dxTarget).Result : showAllDayPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowAllDayPanelOption(dxTarget, value);
			} else {
				this.showAllDayPanel = value;
			}
		}
	}
	bool? showCurrentTimeIndicator;
	[Parameter]
	bool? ShowCurrentTimeIndicator {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetShowCurrentTimeIndicatorOption(dxTarget).Result : showCurrentTimeIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowCurrentTimeIndicatorOption(dxTarget, value);
			} else {
				this.showCurrentTimeIndicator = value;
			}
		}
	}
	string startDateExpr;
	[Parameter]
	string StartDateExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetStartDateExprOption(dxTarget).Result : startDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateExprOption(dxTarget, value);
			} else {
				this.startDateExpr = value;
			}
		}
	}
	string startDateTimeZoneExpr;
	[Parameter]
	string StartDateTimeZoneExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetStartDateTimeZoneExprOption(dxTarget).Result : startDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateTimeZoneExprOption(dxTarget, value);
			} else {
				this.startDateTimeZoneExpr = value;
			}
		}
	}
	float? startDayHour;
	[Parameter]
	float? StartDayHour {
		get => isInitialized ? (float?)DevExpress.Ui.DxSchedulerInterop.GetStartDayHourOption(dxTarget).Result : startDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDayHourOption(dxTarget, value);
			} else {
				this.startDayHour = value;
			}
		}
	}
	string textExpr;
	[Parameter]
	string TextExpr {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetTextExprOption(dxTarget).Result : textExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTextExprOption(dxTarget, value);
			} else {
				this.textExpr = value;
			}
		}
	}
	object timeCellTemplate;
	[Parameter]
	object TimeCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTimeCellTemplateOption(dxTarget).Result : timeCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeCellTemplateOption(dxTarget, value);
			} else {
				this.timeCellTemplate = value;
			}
		}
	}
	string timeZone;
	[Parameter]
	string TimeZone {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetTimeZoneOption(dxTarget).Result : timeZone;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeZoneOption(dxTarget, value);
			} else {
				this.timeZone = value;
			}
		}
	}
	bool? useDropDownViewSwitcher;
	[Parameter]
	bool? UseDropDownViewSwitcher {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetUseDropDownViewSwitcherOption(dxTarget).Result : useDropDownViewSwitcher;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetUseDropDownViewSwitcherOption(dxTarget, value);
			} else {
				this.useDropDownViewSwitcher = value;
			}
		}
	}
	object views;
	[Parameter]
	object Views {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetViewsOption(dxTarget).Result : views;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetViewsOption(dxTarget, value);
			} else {
				this.views = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxSchedulerInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxSchedulerInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSchedulerInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onAppointmentAddedEnabled;
	[Parameter]
	bool? OnAppointmentAddedEnabled {
		get => onAppointmentAddedEnabled;
		set => this.onAppointmentAddedEnabled = value;
	}
	bool? onAppointmentAddingEnabled;
	[Parameter]
	bool? OnAppointmentAddingEnabled {
		get => onAppointmentAddingEnabled;
		set => this.onAppointmentAddingEnabled = value;
	}
	bool? onAppointmentClickEnabled;
	[Parameter]
	bool? OnAppointmentClickEnabled {
		get => onAppointmentClickEnabled;
		set => this.onAppointmentClickEnabled = value;
	}
	bool? onAppointmentContextMenuEnabled;
	[Parameter]
	bool? OnAppointmentContextMenuEnabled {
		get => onAppointmentContextMenuEnabled;
		set => this.onAppointmentContextMenuEnabled = value;
	}
	bool? onAppointmentDblClickEnabled;
	[Parameter]
	bool? OnAppointmentDblClickEnabled {
		get => onAppointmentDblClickEnabled;
		set => this.onAppointmentDblClickEnabled = value;
	}
	bool? onAppointmentDeletedEnabled;
	[Parameter]
	bool? OnAppointmentDeletedEnabled {
		get => onAppointmentDeletedEnabled;
		set => this.onAppointmentDeletedEnabled = value;
	}
	bool? onAppointmentDeletingEnabled;
	[Parameter]
	bool? OnAppointmentDeletingEnabled {
		get => onAppointmentDeletingEnabled;
		set => this.onAppointmentDeletingEnabled = value;
	}
	bool? onAppointmentFormCreatedEnabled;
	[Parameter]
	bool? OnAppointmentFormCreatedEnabled {
		get => onAppointmentFormCreatedEnabled;
		set => this.onAppointmentFormCreatedEnabled = value;
	}
	bool? onAppointmentRenderedEnabled;
	[Parameter]
	bool? OnAppointmentRenderedEnabled {
		get => onAppointmentRenderedEnabled;
		set => this.onAppointmentRenderedEnabled = value;
	}
	bool? onAppointmentUpdatedEnabled;
	[Parameter]
	bool? OnAppointmentUpdatedEnabled {
		get => onAppointmentUpdatedEnabled;
		set => this.onAppointmentUpdatedEnabled = value;
	}
	bool? onAppointmentUpdatingEnabled;
	[Parameter]
	bool? OnAppointmentUpdatingEnabled {
		get => onAppointmentUpdatingEnabled;
		set => this.onAppointmentUpdatingEnabled = value;
	}
	bool? onCellClickEnabled;
	[Parameter]
	bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellContextMenuEnabled;
	[Parameter]
	bool? OnCellContextMenuEnabled {
		get => onCellContextMenuEnabled;
		set => this.onCellContextMenuEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded += DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding += DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick += DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu += DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick += DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted += DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting += DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated += DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered += DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated += DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating += DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick += DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu += DxScheduler_CellContextMenu;
		DevExpress.Ui.DxSchedulerInterop.ContentReady += DxScheduler_ContentReady;
		DevExpress.Ui.DxSchedulerInterop.Disposing += DxScheduler_Disposing;
		DevExpress.Ui.DxSchedulerInterop.OptionChanged += DxScheduler_OptionChanged;
		DevExpress.Ui.DxSchedulerInterop.Initialized += DxScheduler_Initialized;
	}
	[Parameter]
	Action AppointmentAdded { get; set; }
	void DxScheduler_AppointmentAdded(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdded?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentAdding { get; set; }
	void DxScheduler_AppointmentAdding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdding?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentClick { get; set; }
	void DxScheduler_AppointmentClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentClick?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentContextMenu { get; set; }
	void DxScheduler_AppointmentContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDblClick { get; set; }
	void DxScheduler_AppointmentDblClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDblClick?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDeleted { get; set; }
	void DxScheduler_AppointmentDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleted?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDeleting { get; set; }
	void DxScheduler_AppointmentDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleting?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentFormCreated { get; set; }
	void DxScheduler_AppointmentFormCreated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentFormCreated?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentRendered { get; set; }
	void DxScheduler_AppointmentRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentRendered?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentUpdated { get; set; }
	void DxScheduler_AppointmentUpdated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdated?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentUpdating { get; set; }
	void DxScheduler_AppointmentUpdating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdating?.Invoke();
		}
	}
	[Parameter]
	Action CellClick { get; set; }
	void DxScheduler_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	[Parameter]
	Action CellContextMenu { get; set; }
	void DxScheduler_CellContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxScheduler_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxScheduler_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxScheduler_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxScheduler_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void AddAppointment(object appointment) {
		DevExpress.Ui.DxSchedulerInterop.AddAppointment(dxTarget, appointment);
	}
	public void DeleteAppointment(object appointment) {
		DevExpress.Ui.DxSchedulerInterop.DeleteAppointment(dxTarget, appointment);
	}
	public object GetDataSourceEx() {
		return DevExpress.Ui.DxSchedulerInterop.GetDataSourceEx(dxTarget).Result;
	}
	public object GetEndViewDate() {
		return DevExpress.Ui.DxSchedulerInterop.GetEndViewDate(dxTarget).Result;
	}
	public object GetStartViewDate() {
		return DevExpress.Ui.DxSchedulerInterop.GetStartViewDate(dxTarget).Result;
	}
	public void HideAppointmentPopup(bool saveChanges) {
		DevExpress.Ui.DxSchedulerInterop.HideAppointmentPopup(dxTarget, saveChanges);
	}
	public void HideAppointmentTooltip() {
		DevExpress.Ui.DxSchedulerInterop.HideAppointmentTooltip(dxTarget);
	}
	public void RegisterKeyHandler() {
		DevExpress.Ui.DxSchedulerInterop.RegisterKeyHandler(dxTarget);
	}
	public void ScrollToTime(float hours, float minutes, object date) {
		DevExpress.Ui.DxSchedulerInterop.ScrollToTime(dxTarget, hours, minutes, date);
	}
	public void ShowAppointmentPopup(object appointmentData, bool createNewAppointment, object currentAppointmentData) {
		DevExpress.Ui.DxSchedulerInterop.ShowAppointmentPopup(dxTarget, appointmentData, createNewAppointment, currentAppointmentData);
	}
	public void ShowAppointmentTooltip(object appointmentData, object target, object currentAppointmentData) {
		DevExpress.Ui.DxSchedulerInterop.ShowAppointmentTooltip(dxTarget, appointmentData, target, currentAppointmentData);
	}
	public void UpdateAppointment(object target, object appointment) {
		DevExpress.Ui.DxSchedulerInterop.UpdateAppointment(dxTarget, target, appointment);
	}
	public void Dispose() {
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded -= DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding -= DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick -= DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu -= DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick -= DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted -= DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting -= DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated -= DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered -= DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated -= DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating -= DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick -= DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu -= DxScheduler_CellContextMenu;
		DevExpress.Ui.DxSchedulerInterop.ContentReady -= DxScheduler_ContentReady;
		DevExpress.Ui.DxSchedulerInterop.Disposing -= DxScheduler_Disposing;
		DevExpress.Ui.DxSchedulerInterop.OptionChanged -= DxScheduler_OptionChanged;
		DevExpress.Ui.DxSchedulerInterop.Initialized -= DxScheduler_Initialized;
	}
}
