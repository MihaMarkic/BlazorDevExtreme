
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxContextMenuOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxContextMenu() : base("DxContextMenu") { }
	protected override DevExpress.Ui.DxContextMenuOptions CreateOptions() {
		return new DevExpress.Ui.DxContextMenuOptions {
			closeOnOutsideClick = closeOnOutsideClick,
			items = items,
			position = position,
			showEvent = showEvent,
			submenuDirection = submenuDirection,
			target = target,
			visible = visible,
			activeStateEnabled = activeStateEnabled,
			animation = animation,
			cssClass = cssClass,
			selectByClick = selectByClick,
			selectionMode = selectionMode,
			showSubmenuMode = showSubmenuMode,
			disabledExpr = disabledExpr,
			displayExpr = displayExpr,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			itemsExpr = itemsExpr,
			keyExpr = keyExpr,
			selectedExpr = selectedExpr,
			dataSource = dataSource,
			itemHoldTimeout = itemHoldTimeout,
			itemTemplate = itemTemplate,
			noDataText = noDataText,
			selectedIndex = selectedIndex,
			selectedItem = selectedItem,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onHiddenEnabled = onHiddenEnabled,
			onHidingEnabled = onHidingEnabled,
			onPositioningEnabled = onPositioningEnabled,
			onShowingEnabled = onShowingEnabled,
			onShownEnabled = onShownEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemRenderedEnabled = onItemRenderedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxContextMenuOptions options) {
		return DevExpress.Ui.DxContextMenuInterop.Init(dxTarget, options);
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetCloseOnOutsideClick(dxTarget).Result : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetCloseOnOutsideClick(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetItems(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetPosition(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	object showEvent;
	[Parameter]
	object ShowEvent {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetShowEvent(dxTarget).Result : showEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetShowEvent(dxTarget, value);
			} else {
				this.showEvent = value;
			}
		}
	}
	string submenuDirection;
	[Parameter]
	string SubmenuDirection {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetSubmenuDirection(dxTarget).Result : submenuDirection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSubmenuDirection(dxTarget, value);
			} else {
				this.submenuDirection = value;
			}
		}
	}
	object target;
	[Parameter]
	object Target {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetTarget(dxTarget).Result : target;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetTarget(dxTarget, value);
			} else {
				this.target = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string cssClass;
	[Parameter]
	string CssClass {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetCssClass(dxTarget).Result : cssClass;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetCssClass(dxTarget, value);
			} else {
				this.cssClass = value;
			}
		}
	}
	bool? selectByClick;
	[Parameter]
	bool? SelectByClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetSelectByClick(dxTarget).Result : selectByClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectByClick(dxTarget, value);
			} else {
				this.selectByClick = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetSelectionMode(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	object showSubmenuMode;
	[Parameter]
	object ShowSubmenuMode {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetShowSubmenuMode(dxTarget).Result : showSubmenuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetShowSubmenuMode(dxTarget, value);
			} else {
				this.showSubmenuMode = value;
			}
		}
	}
	object disabledExpr;
	[Parameter]
	object DisabledExpr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetDisabledExpr(dxTarget).Result : disabledExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetDisabledExpr(dxTarget, value);
			} else {
				this.disabledExpr = value;
			}
		}
	}
	object displayExpr;
	[Parameter]
	object DisplayExpr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetDisplayExpr(dxTarget).Result : displayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetDisplayExpr(dxTarget, value);
			} else {
				this.displayExpr = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object itemsExpr;
	[Parameter]
	object ItemsExpr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetItemsExpr(dxTarget).Result : itemsExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetItemsExpr(dxTarget, value);
			} else {
				this.itemsExpr = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetKeyExpr(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetKeyExpr(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object selectedExpr;
	[Parameter]
	object SelectedExpr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetSelectedExpr(dxTarget).Result : selectedExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectedExpr(dxTarget, value);
			} else {
				this.selectedExpr = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	float? itemHoldTimeout;
	[Parameter]
	float? ItemHoldTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxContextMenuInterop.GetItemHoldTimeout(dxTarget).Result : itemHoldTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetItemHoldTimeout(dxTarget, value);
			} else {
				this.itemHoldTimeout = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetItemTemplate(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetNoDataText(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetNoDataText(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxContextMenuInterop.GetSelectedIndex(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetSelectedItem(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectedItem(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetSelectedItemKeys(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectedItemKeys(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetSelectedItems(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSelectedItems(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxContextMenuInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxContextMenuInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxContextMenuInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onHiddenEnabled;
	[Parameter]
	bool? OnHiddenEnabled {
		get => onHiddenEnabled;
		set => this.onHiddenEnabled = value;
	}
	bool? onHidingEnabled;
	[Parameter]
	bool? OnHidingEnabled {
		get => onHidingEnabled;
		set => this.onHidingEnabled = value;
	}
	bool? onPositioningEnabled;
	[Parameter]
	bool? OnPositioningEnabled {
		get => onPositioningEnabled;
		set => this.onPositioningEnabled = value;
	}
	bool? onShowingEnabled;
	[Parameter]
	bool? OnShowingEnabled {
		get => onShowingEnabled;
		set => this.onShowingEnabled = value;
	}
	bool? onShownEnabled;
	[Parameter]
	bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemRenderedEnabled;
	[Parameter]
	bool? OnItemRenderedEnabled {
		get => onItemRenderedEnabled;
		set => this.onItemRenderedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxContextMenuInterop.Hidden += DxContextMenu_Hidden;
		DevExpress.Ui.DxContextMenuInterop.Hiding += DxContextMenu_Hiding;
		DevExpress.Ui.DxContextMenuInterop.Positioning += DxContextMenu_Positioning;
		DevExpress.Ui.DxContextMenuInterop.Showing += DxContextMenu_Showing;
		DevExpress.Ui.DxContextMenuInterop.Shown += DxContextMenu_Shown;
		DevExpress.Ui.DxContextMenuInterop.ItemClick += DxContextMenu_ItemClick;
		DevExpress.Ui.DxContextMenuInterop.ItemContextMenu += DxContextMenu_ItemContextMenu;
		DevExpress.Ui.DxContextMenuInterop.ItemHold += DxContextMenu_ItemHold;
		DevExpress.Ui.DxContextMenuInterop.ItemRendered += DxContextMenu_ItemRendered;
		DevExpress.Ui.DxContextMenuInterop.SelectionChanged += DxContextMenu_SelectionChanged;
		DevExpress.Ui.DxContextMenuInterop.ContentReady += DxContextMenu_ContentReady;
		DevExpress.Ui.DxContextMenuInterop.Disposing += DxContextMenu_Disposing;
		DevExpress.Ui.DxContextMenuInterop.OptionChanged += DxContextMenu_OptionChanged;
		DevExpress.Ui.DxContextMenuInterop.Initialized += DxContextMenu_Initialized;
	}
	[Parameter]
	Action Hidden { get; set; }
	void DxContextMenu_Hidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hidden?.Invoke();
		}
	}
	[Parameter]
	Action Hiding { get; set; }
	void DxContextMenu_Hiding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hiding?.Invoke();
		}
	}
	[Parameter]
	Action Positioning { get; set; }
	void DxContextMenu_Positioning(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Positioning?.Invoke();
		}
	}
	[Parameter]
	Action Showing { get; set; }
	void DxContextMenu_Showing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Showing?.Invoke();
		}
	}
	[Parameter]
	Action Shown { get; set; }
	void DxContextMenu_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxContextMenu_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxContextMenu_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxContextMenu_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemRendered { get; set; }
	void DxContextMenu_ItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxContextMenu_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxContextMenu_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxContextMenu_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxContextMenu_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxContextMenu_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object Hide() {
		return DevExpress.Ui.DxContextMenuInterop.Hide(dxTarget).Result;
	}
	public object Show() {
		return DevExpress.Ui.DxContextMenuInterop.Show(dxTarget).Result;
	}
	public object Toggle(bool showing) {
		return DevExpress.Ui.DxContextMenuInterop.Toggle(dxTarget, showing).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxContextMenuInterop.Hidden -= DxContextMenu_Hidden;
		DevExpress.Ui.DxContextMenuInterop.Hiding -= DxContextMenu_Hiding;
		DevExpress.Ui.DxContextMenuInterop.Positioning -= DxContextMenu_Positioning;
		DevExpress.Ui.DxContextMenuInterop.Showing -= DxContextMenu_Showing;
		DevExpress.Ui.DxContextMenuInterop.Shown -= DxContextMenu_Shown;
		DevExpress.Ui.DxContextMenuInterop.ItemClick -= DxContextMenu_ItemClick;
		DevExpress.Ui.DxContextMenuInterop.ItemContextMenu -= DxContextMenu_ItemContextMenu;
		DevExpress.Ui.DxContextMenuInterop.ItemHold -= DxContextMenu_ItemHold;
		DevExpress.Ui.DxContextMenuInterop.ItemRendered -= DxContextMenu_ItemRendered;
		DevExpress.Ui.DxContextMenuInterop.SelectionChanged -= DxContextMenu_SelectionChanged;
		DevExpress.Ui.DxContextMenuInterop.ContentReady -= DxContextMenu_ContentReady;
		DevExpress.Ui.DxContextMenuInterop.Disposing -= DxContextMenu_Disposing;
		DevExpress.Ui.DxContextMenuInterop.OptionChanged -= DxContextMenu_OptionChanged;
		DevExpress.Ui.DxContextMenuInterop.Initialized -= DxContextMenu_Initialized;
	}
}
