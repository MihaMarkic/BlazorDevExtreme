@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxRangeSelectorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxRangeSelector() : base("DxRangeSelector") { }
	protected override DevExpress.Viz.DxRangeSelectorOptions CreateOptions() {
		return new DevExpress.Viz.DxRangeSelectorOptions {
			background = background,
			behavior = behavior,
			chart = chart,
			containerBackgroundColor = containerBackgroundColor,
			dataSource = dataSource,
			dataSourceField = dataSourceField,
			indent = indent,
			scale = scale,
			selectedRangeColor = selectedRangeColor,
			selectedRangeUpdateMode = selectedRangeUpdateMode,
			shutter = shutter,
			sliderHandle = sliderHandle,
			sliderMarker = sliderMarker,
			value = value,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			tooltip = tooltip,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onValueChangedEnabled = onValueChangedEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxRangeSelectorOptions options) {
		return DevExpress.Viz.DxRangeSelectorInterop.Init(dxTarget, options);
	}
	object background;
	[Parameter]
	object Background {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetBackgroundOption(dxTarget).Result : background;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetBackgroundOption(dxTarget, value);
			} else {
				this.background = value;
			}
		}
	}
	object behavior;
	[Parameter]
	object Behavior {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetBehaviorOption(dxTarget).Result : behavior;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetBehaviorOption(dxTarget, value);
			} else {
				this.behavior = value;
			}
		}
	}
	object chart;
	[Parameter]
	object Chart {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetChartOption(dxTarget).Result : chart;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetChartOption(dxTarget, value);
			} else {
				this.chart = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? (string)DevExpress.Viz.DxRangeSelectorInterop.GetContainerBackgroundColorOption(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetContainerBackgroundColorOption(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string dataSourceField;
	[Parameter]
	string DataSourceField {
		get => isInitialized ? (string)DevExpress.Viz.DxRangeSelectorInterop.GetDataSourceFieldOption(dxTarget).Result : dataSourceField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetDataSourceFieldOption(dxTarget, value);
			} else {
				this.dataSourceField = value;
			}
		}
	}
	object indent;
	[Parameter]
	object Indent {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetIndentOption(dxTarget).Result : indent;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetIndentOption(dxTarget, value);
			} else {
				this.indent = value;
			}
		}
	}
	object scale;
	[Parameter]
	object Scale {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetScaleOption(dxTarget).Result : scale;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetScaleOption(dxTarget, value);
			} else {
				this.scale = value;
			}
		}
	}
	string selectedRangeColor;
	[Parameter]
	string SelectedRangeColor {
		get => isInitialized ? (string)DevExpress.Viz.DxRangeSelectorInterop.GetSelectedRangeColorOption(dxTarget).Result : selectedRangeColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSelectedRangeColorOption(dxTarget, value);
			} else {
				this.selectedRangeColor = value;
			}
		}
	}
	string selectedRangeUpdateMode;
	[Parameter]
	string SelectedRangeUpdateMode {
		get => isInitialized ? (string)DevExpress.Viz.DxRangeSelectorInterop.GetSelectedRangeUpdateModeOption(dxTarget).Result : selectedRangeUpdateMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSelectedRangeUpdateModeOption(dxTarget, value);
			} else {
				this.selectedRangeUpdateMode = value;
			}
		}
	}
	object shutter;
	[Parameter]
	object Shutter {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetShutterOption(dxTarget).Result : shutter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetShutterOption(dxTarget, value);
			} else {
				this.shutter = value;
			}
		}
	}
	object sliderHandle;
	[Parameter]
	object SliderHandle {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSliderHandleOption(dxTarget).Result : sliderHandle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSliderHandleOption(dxTarget, value);
			} else {
				this.sliderHandle = value;
			}
		}
	}
	object sliderMarker;
	[Parameter]
	object SliderMarker {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSliderMarkerOption(dxTarget).Result : sliderMarker;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSliderMarkerOption(dxTarget, value);
			} else {
				this.sliderMarker = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxRangeSelectorInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxRangeSelectorInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxRangeSelectorInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxRangeSelectorInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxRangeSelectorInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxRangeSelectorInterop.ValueChanged += DxRangeSelector_ValueChanged;
		DevExpress.Viz.DxRangeSelectorInterop.Drawn += DxRangeSelector_Drawn;
		DevExpress.Viz.DxRangeSelectorInterop.Exported += DxRangeSelector_Exported;
		DevExpress.Viz.DxRangeSelectorInterop.Exporting += DxRangeSelector_Exporting;
		DevExpress.Viz.DxRangeSelectorInterop.FileSaving += DxRangeSelector_FileSaving;
		DevExpress.Viz.DxRangeSelectorInterop.IncidentOccurred += DxRangeSelector_IncidentOccurred;
		DevExpress.Viz.DxRangeSelectorInterop.Disposing += DxRangeSelector_Disposing;
		DevExpress.Viz.DxRangeSelectorInterop.OptionChanged += DxRangeSelector_OptionChanged;
		DevExpress.Viz.DxRangeSelectorInterop.Initialized += DxRangeSelector_Initialized;
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxRangeSelector_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxRangeSelector_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxRangeSelector_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxRangeSelector_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxRangeSelector_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxRangeSelector_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxRangeSelector_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxRangeSelector_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxRangeSelector_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxRangeSelectorInterop.GetDataSourceEx(dxTarget).Result;
	}
	public object GetValueEx() {
		return DevExpress.Viz.DxRangeSelectorInterop.GetValueEx(dxTarget).Result;
	}
	public void Render() {
		DevExpress.Viz.DxRangeSelectorInterop.Render(dxTarget);
	}
	public void Render(bool skipChartAnimation) {
		DevExpress.Viz.DxRangeSelectorInterop.Render(dxTarget, skipChartAnimation);
	}
	public void SetValueEx(object value) {
		DevExpress.Viz.DxRangeSelectorInterop.SetValueEx(dxTarget, value);
	}
	public void Dispose() {
		DevExpress.Viz.DxRangeSelectorInterop.ValueChanged -= DxRangeSelector_ValueChanged;
		DevExpress.Viz.DxRangeSelectorInterop.Drawn -= DxRangeSelector_Drawn;
		DevExpress.Viz.DxRangeSelectorInterop.Exported -= DxRangeSelector_Exported;
		DevExpress.Viz.DxRangeSelectorInterop.Exporting -= DxRangeSelector_Exporting;
		DevExpress.Viz.DxRangeSelectorInterop.FileSaving -= DxRangeSelector_FileSaving;
		DevExpress.Viz.DxRangeSelectorInterop.IncidentOccurred -= DxRangeSelector_IncidentOccurred;
		DevExpress.Viz.DxRangeSelectorInterop.Disposing -= DxRangeSelector_Disposing;
		DevExpress.Viz.DxRangeSelectorInterop.OptionChanged -= DxRangeSelector_OptionChanged;
		DevExpress.Viz.DxRangeSelectorInterop.Initialized -= DxRangeSelector_Initialized;
	}
}
