
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Gauges.BaseGaugeOptions>

<div id="@Id" @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public BaseGauge() : base("BaseGauge") { }
	protected override DevExpress.Viz.Gauges.BaseGaugeOptions CreateOptions() {
		return new DevExpress.Viz.Gauges.BaseGaugeOptions {
			animation = animation,
			containerBackgroundColor = containerBackgroundColor,
			rangeContainer = rangeContainer,
			scale = scale,
			subtitle = subtitle,
			subvalues = subvalues,
			title = title,
			tooltip = tooltip,
			value = value,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Gauges.BaseGaugeOptions options) {
		return DevExpress.Viz.BaseGaugeInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? (string)DevExpress.Viz.BaseGaugeInterop.GetContainerBackgroundColor(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object rangeContainer;
	[Parameter]
	object RangeContainer {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetRangeContainer(dxTarget).Result : rangeContainer;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetRangeContainer(dxTarget, value);
			} else {
				this.rangeContainer = value;
			}
		}
	}
	object scale;
	[Parameter]
	object Scale {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetScale(dxTarget).Result : scale;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetScale(dxTarget, value);
			} else {
				this.scale = value;
			}
		}
	}
	object subtitle;
	[Parameter]
	object Subtitle {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetSubtitle(dxTarget).Result : subtitle;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetSubtitle(dxTarget, value);
			} else {
				this.subtitle = value;
			}
		}
	}
	object subvalues;
	[Parameter]
	object Subvalues {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetSubvalues(dxTarget).Result : subvalues;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetSubvalues(dxTarget, value);
			} else {
				this.subvalues = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	float? value;
	[Parameter]
	float? Value {
		get => isInitialized ? (float?)DevExpress.Viz.BaseGaugeInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetLoadingIndicator(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetLoadingIndicator(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetMargin(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetMargin(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseGaugeInterop.GetPathModified(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetPathModified(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseGaugeInterop.GetRedrawOnResize(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetRedrawOnResize(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseGaugeInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetSize(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetSize(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.BaseGaugeInterop.GetTheme(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetTheme(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.BaseGaugeInterop.TooltipHidden += BaseGauge_TooltipHidden;
		DevExpress.Viz.BaseGaugeInterop.TooltipShown += BaseGauge_TooltipShown;
		DevExpress.Viz.BaseGaugeInterop.Drawn += BaseGauge_Drawn;
		DevExpress.Viz.BaseGaugeInterop.Exported += BaseGauge_Exported;
		DevExpress.Viz.BaseGaugeInterop.Exporting += BaseGauge_Exporting;
		DevExpress.Viz.BaseGaugeInterop.FileSaving += BaseGauge_FileSaving;
		DevExpress.Viz.BaseGaugeInterop.IncidentOccurred += BaseGauge_IncidentOccurred;
		DevExpress.Viz.BaseGaugeInterop.Disposing += BaseGauge_Disposing;
		DevExpress.Viz.BaseGaugeInterop.OptionChanged += BaseGauge_OptionChanged;
		DevExpress.Viz.BaseGaugeInterop.Initialized += BaseGauge_Initialized;
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void BaseGauge_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void BaseGauge_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void BaseGauge_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void BaseGauge_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void BaseGauge_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void BaseGauge_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void BaseGauge_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void BaseGauge_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void BaseGauge_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void BaseGauge_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object SubvaluesEx() {
		return DevExpress.Viz.BaseGaugeInterop.SubvaluesEx(dxTarget).Result;
	}
	public void SubvaluesEx(object subvalues) {
		DevExpress.Viz.BaseGaugeInterop.SubvaluesEx(dxTarget, subvalues);
	}
	public float ValueEx() {
		return DevExpress.Viz.BaseGaugeInterop.ValueEx(dxTarget).Result;
	}
	public void ValueEx(float value) {
		DevExpress.Viz.BaseGaugeInterop.ValueEx(dxTarget, value);
	}
	public void Dispose() {
		DevExpress.Viz.BaseGaugeInterop.TooltipHidden -= BaseGauge_TooltipHidden;
		DevExpress.Viz.BaseGaugeInterop.TooltipShown -= BaseGauge_TooltipShown;
		DevExpress.Viz.BaseGaugeInterop.Drawn -= BaseGauge_Drawn;
		DevExpress.Viz.BaseGaugeInterop.Exported -= BaseGauge_Exported;
		DevExpress.Viz.BaseGaugeInterop.Exporting -= BaseGauge_Exporting;
		DevExpress.Viz.BaseGaugeInterop.FileSaving -= BaseGauge_FileSaving;
		DevExpress.Viz.BaseGaugeInterop.IncidentOccurred -= BaseGauge_IncidentOccurred;
		DevExpress.Viz.BaseGaugeInterop.Disposing -= BaseGauge_Disposing;
		DevExpress.Viz.BaseGaugeInterop.OptionChanged -= BaseGauge_OptionChanged;
		DevExpress.Viz.BaseGaugeInterop.Initialized -= BaseGauge_Initialized;
	}
}
