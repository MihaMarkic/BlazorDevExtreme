@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxRangeSliderOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxRangeSlider() : base("DxRangeSlider") { }
	protected override DevExpress.Ui.DxRangeSliderOptions CreateOptions() {
		return new DevExpress.Ui.DxRangeSliderOptions {
			end = end,
			endName = endName,
			start = start,
			startName = startName,
			value = value,
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			keyStep = keyStep,
			label = label,
			name = name,
			showRange = showRange,
			step = step,
			tooltip = tooltip,
			max = max,
			min = min,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxRangeSliderOptions options) {
		return DevExpress.Ui.DxRangeSliderInterop.Init(dxTarget, options);
	}
	float? end;
	[Parameter]
	float? End {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetEndOption(dxTarget).Result : end;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetEndOption(dxTarget, value);
			} else {
				this.end = value;
			}
		}
	}
	string endName;
	[Parameter]
	string EndName {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetEndNameOption(dxTarget).Result : endName;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetEndNameOption(dxTarget, value);
			} else {
				this.endName = value;
			}
		}
	}
	float? start;
	[Parameter]
	float? Start {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetStartOption(dxTarget).Result : start;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetStartOption(dxTarget, value);
			} else {
				this.start = value;
			}
		}
	}
	string startName;
	[Parameter]
	string StartName {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetStartNameOption(dxTarget).Result : startName;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetStartNameOption(dxTarget, value);
			} else {
				this.startName = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? keyStep;
	[Parameter]
	float? KeyStep {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetKeyStepOption(dxTarget).Result : keyStep;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetKeyStepOption(dxTarget, value);
			} else {
				this.keyStep = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetLabelOption(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetLabelOption(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showRange;
	[Parameter]
	bool? ShowRange {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetShowRangeOption(dxTarget).Result : showRange;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetShowRangeOption(dxTarget, value);
			} else {
				this.showRange = value;
			}
		}
	}
	float? step;
	[Parameter]
	float? Step {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetStepOption(dxTarget).Result : step;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetStepOption(dxTarget, value);
			} else {
				this.step = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	float? max;
	[Parameter]
	float? Max {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetMaxOption(dxTarget).Result : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetMaxOption(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	float? min;
	[Parameter]
	float? Min {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetMinOption(dxTarget).Result : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetMinOption(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxRangeSliderInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxRangeSliderInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxRangeSliderInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxRangeSliderInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxRangeSliderInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxRangeSliderInterop.ValueChanged += DxRangeSlider_ValueChanged;
		DevExpress.Ui.DxRangeSliderInterop.ContentReady += DxRangeSlider_ContentReady;
		DevExpress.Ui.DxRangeSliderInterop.Disposing += DxRangeSlider_Disposing;
		DevExpress.Ui.DxRangeSliderInterop.OptionChanged += DxRangeSlider_OptionChanged;
		DevExpress.Ui.DxRangeSliderInterop.Initialized += DxRangeSlider_Initialized;
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxRangeSlider_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxRangeSlider_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxRangeSlider_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxRangeSlider_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxRangeSlider_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Reset() {
		DevExpress.Ui.DxRangeSliderInterop.Reset(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxRangeSliderInterop.ValueChanged -= DxRangeSlider_ValueChanged;
		DevExpress.Ui.DxRangeSliderInterop.ContentReady -= DxRangeSlider_ContentReady;
		DevExpress.Ui.DxRangeSliderInterop.Disposing -= DxRangeSlider_Disposing;
		DevExpress.Ui.DxRangeSliderInterop.OptionChanged -= DxRangeSlider_OptionChanged;
		DevExpress.Ui.DxRangeSliderInterop.Initialized -= DxRangeSlider_Initialized;
	}
}
