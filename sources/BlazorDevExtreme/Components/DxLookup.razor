
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxLookupOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public DxLookup() : base("DxLookup") { }
    protected override DevExpress.Ui.DxLookupOptions CreateOptions() {
        return new DevExpress.Ui.DxLookupOptions {
            animation = animation,
            applyButtonText = applyButtonText,
            applyValueMode = applyValueMode,
            cancelButtonText = cancelButtonText,
            cleanSearchOnOpening = cleanSearchOnOpening,
            clearButtonText = clearButtonText,
            closeOnOutsideClick = closeOnOutsideClick,
            fieldTemplate = fieldTemplate,
            focusStateEnabled = focusStateEnabled,
            fullScreen = fullScreen,
            grouped = grouped,
            groupTemplate = groupTemplate,
            nextButtonText = nextButtonText,
            pageLoadingText = pageLoadingText,
            pageLoadMode = pageLoadMode,
            placeholder = placeholder,
            popupHeight = popupHeight,
            popupWidth = popupWidth,
            position = position,
            pulledDownText = pulledDownText,
            pullingDownText = pullingDownText,
            pullRefreshEnabled = pullRefreshEnabled,
            refreshingText = refreshingText,
            searchEnabled = searchEnabled,
            searchPlaceholder = searchPlaceholder,
            shading = shading,
            showCancelButton = showCancelButton,
            showClearButton = showClearButton,
            showPopupTitle = showPopupTitle,
            title = title,
            titleTemplate = titleTemplate,
            useNativeScrolling = useNativeScrolling,
            usePopover = usePopover,
            displayValue = displayValue,
            minSearchLength = minSearchLength,
            noDataText = noDataText,
            searchExpr = searchExpr,
            searchMode = searchMode,
            searchTimeout = searchTimeout,
            selectedItem = selectedItem,
            showDataBeforeSearch = showDataBeforeSearch,
            value = value,
            valueChangeEvent = valueChangeEvent,
            acceptCustomValue = acceptCustomValue,
            activeStateEnabled = activeStateEnabled,
            deferRendering = deferRendering,
            dropDownButtonTemplate = dropDownButtonTemplate,
            opened = isOpened,
            maxLength = maxLength,
            mode = mode,
            hoverStateEnabled = hoverStateEnabled,
            inputAttr = inputAttr,
            mask = mask,
            maskChar = maskChar,
            maskInvalidMessage = maskInvalidMessage,
            maskRules = maskRules,
            name = name,
            showMaskMode = showMaskMode,
            spellcheck = spellcheck,
            text = text,
            useMaskedValue = useMaskedValue,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            dataSource = dataSource,
            displayExpr = displayExpr,
            items = items,
            itemTemplate = itemTemplate,
            valueExpr = valueExpr,
            onPageLoadingEnabled = onPageLoadingEnabled,
            onPullRefreshEnabled = onPullRefreshEnabled,
            onScrollEnabled = onScrollEnabled,
            onTitleRenderedEnabled = onTitleRenderedEnabled,
            onValueChangedEnabled = onValueChangedEnabled,
            onItemClickEnabled = onItemClickEnabled,
            onSelectionChangedEnabled = onSelectionChangedEnabled,
            onClosedEnabled = onClosedEnabled,
            onOpenedEnabled = onOpenedEnabled,
            onChangeEnabled = onChangeEnabled,
            onCopyEnabled = onCopyEnabled,
            onCutEnabled = onCutEnabled,
            onEnterKeyEnabled = onEnterKeyEnabled,
            onFocusInEnabled = onFocusInEnabled,
            onFocusOutEnabled = onFocusOutEnabled,
            onInputEnabled = onInputEnabled,
            onKeyDownEnabled = onKeyDownEnabled,
            onKeyPressEnabled = onKeyPressEnabled,
            onKeyUpEnabled = onKeyUpEnabled,
            onPasteEnabled = onPasteEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override ValueTask<object> Init(DevExpress.Ui.DxLookupOptions options) {
        return DevExpress.Ui.DxLookupInterop.Init(dxTarget, options);
    }
    object animation;
    [Parameter] public
    object Animation {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetAnimation(dxTarget).Result : animation;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetAnimation(dxTarget, value);
            } else {
                this.animation = value;
            }
        }
    }
    string applyButtonText;
    [Parameter] public
    string ApplyButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetApplyButtonText(dxTarget).Result : applyButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetApplyButtonText(dxTarget, value);
            } else {
                this.applyButtonText = value;
            }
        }
    }
    string applyValueMode;
    [Parameter] public
    string ApplyValueMode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetApplyValueMode(dxTarget, value);
            } else {
                this.applyValueMode = value;
            }
        }
    }
    string cancelButtonText;
    [Parameter] public
    string CancelButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetCancelButtonText(dxTarget).Result : cancelButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetCancelButtonText(dxTarget, value);
            } else {
                this.cancelButtonText = value;
            }
        }
    }
    bool? cleanSearchOnOpening;
    [Parameter] public
    bool? CleanSearchOnOpening {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetCleanSearchOnOpening(dxTarget).Result : cleanSearchOnOpening;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetCleanSearchOnOpening(dxTarget, value);
            } else {
                this.cleanSearchOnOpening = value;
            }
        }
    }
    string clearButtonText;
    [Parameter] public
    string ClearButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetClearButtonText(dxTarget).Result : clearButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetClearButtonText(dxTarget, value);
            } else {
                this.clearButtonText = value;
            }
        }
    }
    object closeOnOutsideClick;
    [Parameter] public
    object CloseOnOutsideClick {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetCloseOnOutsideClick(dxTarget).Result : closeOnOutsideClick;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetCloseOnOutsideClick(dxTarget, value);
            } else {
                this.closeOnOutsideClick = value;
            }
        }
    }
    object fieldTemplate;
    [Parameter] public
    object FieldTemplate {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetFieldTemplate(dxTarget).Result : fieldTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetFieldTemplate(dxTarget, value);
            } else {
                this.fieldTemplate = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter] public
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? fullScreen;
    [Parameter] public
    bool? FullScreen {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetFullScreen(dxTarget).Result : fullScreen;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetFullScreen(dxTarget, value);
            } else {
                this.fullScreen = value;
            }
        }
    }
    bool? grouped;
    [Parameter] public
    bool? Grouped {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetGrouped(dxTarget).Result : grouped;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetGrouped(dxTarget, value);
            } else {
                this.grouped = value;
            }
        }
    }
    object groupTemplate;
    [Parameter] public
    object GroupTemplate {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetGroupTemplate(dxTarget).Result : groupTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetGroupTemplate(dxTarget, value);
            } else {
                this.groupTemplate = value;
            }
        }
    }
    string nextButtonText;
    [Parameter] public
    string NextButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetNextButtonText(dxTarget).Result : nextButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetNextButtonText(dxTarget, value);
            } else {
                this.nextButtonText = value;
            }
        }
    }
    string pageLoadingText;
    [Parameter] public
    string PageLoadingText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPageLoadingText(dxTarget).Result : pageLoadingText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPageLoadingText(dxTarget, value);
            } else {
                this.pageLoadingText = value;
            }
        }
    }
    string pageLoadMode;
    [Parameter] public
    string PageLoadMode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPageLoadMode(dxTarget).Result : pageLoadMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPageLoadMode(dxTarget, value);
            } else {
                this.pageLoadMode = value;
            }
        }
    }
    string placeholder;
    [Parameter] public
    string Placeholder {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPlaceholder(dxTarget).Result : placeholder;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPlaceholder(dxTarget, value);
            } else {
                this.placeholder = value;
            }
        }
    }
    object popupHeight;
    [Parameter] public
    object PopupHeight {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupHeight(dxTarget).Result : popupHeight;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPopupHeight(dxTarget, value);
            } else {
                this.popupHeight = value;
            }
        }
    }
    object popupWidth;
    [Parameter] public
    object PopupWidth {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupWidth(dxTarget).Result : popupWidth;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPopupWidth(dxTarget, value);
            } else {
                this.popupWidth = value;
            }
        }
    }
    object position;
    [Parameter] public
    object Position {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPosition(dxTarget).Result : position;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPosition(dxTarget, value);
            } else {
                this.position = value;
            }
        }
    }
    string pulledDownText;
    [Parameter] public
    string PulledDownText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPulledDownText(dxTarget).Result : pulledDownText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPulledDownText(dxTarget, value);
            } else {
                this.pulledDownText = value;
            }
        }
    }
    string pullingDownText;
    [Parameter] public
    string PullingDownText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPullingDownText(dxTarget).Result : pullingDownText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPullingDownText(dxTarget, value);
            } else {
                this.pullingDownText = value;
            }
        }
    }
    bool? pullRefreshEnabled;
    [Parameter] public
    bool? PullRefreshEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetPullRefreshEnabled(dxTarget).Result : pullRefreshEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetPullRefreshEnabled(dxTarget, value);
            } else {
                this.pullRefreshEnabled = value;
            }
        }
    }
    string refreshingText;
    [Parameter] public
    string RefreshingText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetRefreshingText(dxTarget).Result : refreshingText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetRefreshingText(dxTarget, value);
            } else {
                this.refreshingText = value;
            }
        }
    }
    bool? searchEnabled;
    [Parameter] public
    bool? SearchEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetSearchEnabled(dxTarget).Result : searchEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSearchEnabled(dxTarget, value);
            } else {
                this.searchEnabled = value;
            }
        }
    }
    string searchPlaceholder;
    [Parameter] public
    string SearchPlaceholder {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetSearchPlaceholder(dxTarget).Result : searchPlaceholder;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSearchPlaceholder(dxTarget, value);
            } else {
                this.searchPlaceholder = value;
            }
        }
    }
    bool? shading;
    [Parameter] public
    bool? Shading {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShading(dxTarget).Result : shading;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShading(dxTarget, value);
            } else {
                this.shading = value;
            }
        }
    }
    bool? showCancelButton;
    [Parameter] public
    bool? ShowCancelButton {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowCancelButton(dxTarget).Result : showCancelButton;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShowCancelButton(dxTarget, value);
            } else {
                this.showCancelButton = value;
            }
        }
    }
    bool? showClearButton;
    [Parameter] public
    bool? ShowClearButton {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowClearButton(dxTarget).Result : showClearButton;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShowClearButton(dxTarget, value);
            } else {
                this.showClearButton = value;
            }
        }
    }
    bool? showPopupTitle;
    [Parameter] public
    bool? ShowPopupTitle {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowPopupTitle(dxTarget).Result : showPopupTitle;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShowPopupTitle(dxTarget, value);
            } else {
                this.showPopupTitle = value;
            }
        }
    }
    string title;
    [Parameter] public
    string Title {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetTitle(dxTarget).Result : title;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetTitle(dxTarget, value);
            } else {
                this.title = value;
            }
        }
    }
    object titleTemplate;
    [Parameter] public
    object TitleTemplate {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetTitleTemplate(dxTarget).Result : titleTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetTitleTemplate(dxTarget, value);
            } else {
                this.titleTemplate = value;
            }
        }
    }
    bool? useNativeScrolling;
    [Parameter] public
    bool? UseNativeScrolling {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUseNativeScrolling(dxTarget).Result : useNativeScrolling;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetUseNativeScrolling(dxTarget, value);
            } else {
                this.useNativeScrolling = value;
            }
        }
    }
    bool? usePopover;
    [Parameter] public
    bool? UsePopover {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUsePopover(dxTarget).Result : usePopover;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetUsePopover(dxTarget, value);
            } else {
                this.usePopover = value;
            }
        }
    }
    string displayValue;
    [Parameter] public
    string DisplayValue {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetDisplayValue(dxTarget).Result : displayValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDisplayValue(dxTarget, value);
            } else {
                this.displayValue = value;
            }
        }
    }
    float? minSearchLength;
    [Parameter] public
    float? MinSearchLength {
        get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetMinSearchLength(dxTarget).Result : minSearchLength;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMinSearchLength(dxTarget, value);
            } else {
                this.minSearchLength = value;
            }
        }
    }
    string noDataText;
    [Parameter] public
    string NoDataText {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetNoDataText(dxTarget).Result : noDataText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetNoDataText(dxTarget, value);
            } else {
                this.noDataText = value;
            }
        }
    }
    object searchExpr;
    [Parameter] public
    object SearchExpr {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSearchExpr(dxTarget).Result : searchExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSearchExpr(dxTarget, value);
            } else {
                this.searchExpr = value;
            }
        }
    }
    string searchMode;
    [Parameter] public
    string SearchMode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetSearchMode(dxTarget).Result : searchMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSearchMode(dxTarget, value);
            } else {
                this.searchMode = value;
            }
        }
    }
    float? searchTimeout;
    [Parameter] public
    float? SearchTimeout {
        get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetSearchTimeout(dxTarget).Result : searchTimeout;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSearchTimeout(dxTarget, value);
            } else {
                this.searchTimeout = value;
            }
        }
    }
    object selectedItem;
    [Parameter] public
    object SelectedItem {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSelectedItem(dxTarget).Result : selectedItem;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSelectedItem(dxTarget, value);
            } else {
                this.selectedItem = value;
            }
        }
    }
    bool? showDataBeforeSearch;
    [Parameter] public
    bool? ShowDataBeforeSearch {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowDataBeforeSearch(dxTarget).Result : showDataBeforeSearch;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShowDataBeforeSearch(dxTarget, value);
            } else {
                this.showDataBeforeSearch = value;
            }
        }
    }
    object value;
    [Parameter] public
    object Value {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    string valueChangeEvent;
    [Parameter] public
    string ValueChangeEvent {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetValueChangeEvent(dxTarget).Result : valueChangeEvent;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetValueChangeEvent(dxTarget, value);
            } else {
                this.valueChangeEvent = value;
            }
        }
    }
    bool? acceptCustomValue;
    [Parameter] public
    bool? AcceptCustomValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetAcceptCustomValue(dxTarget).Result : acceptCustomValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetAcceptCustomValue(dxTarget, value);
            } else {
                this.acceptCustomValue = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter] public
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? deferRendering;
    [Parameter] public
    bool? DeferRendering {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetDeferRendering(dxTarget).Result : deferRendering;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDeferRendering(dxTarget, value);
            } else {
                this.deferRendering = value;
            }
        }
    }
    object dropDownButtonTemplate;
    [Parameter] public
    object DropDownButtonTemplate {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDropDownButtonTemplate(dxTarget).Result : dropDownButtonTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDropDownButtonTemplate(dxTarget, value);
            } else {
                this.dropDownButtonTemplate = value;
            }
        }
    }
    bool? isOpened;
    [Parameter] public
    bool? IsOpened {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetOpened(dxTarget).Result : isOpened;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetOpened(dxTarget, value);
            } else {
                this.isOpened = value;
            }
        }
    }
    object maxLength;
    [Parameter] public
    object MaxLength {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetMaxLength(dxTarget).Result : maxLength;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMaxLength(dxTarget, value);
            } else {
                this.maxLength = value;
            }
        }
    }
    string mode;
    [Parameter] public
    string Mode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMode(dxTarget).Result : mode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMode(dxTarget, value);
            } else {
                this.mode = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter] public
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    object inputAttr;
    [Parameter] public
    object InputAttr {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetInputAttr(dxTarget).Result : inputAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetInputAttr(dxTarget, value);
            } else {
                this.inputAttr = value;
            }
        }
    }
    string mask;
    [Parameter] public
    string Mask {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMask(dxTarget).Result : mask;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMask(dxTarget, value);
            } else {
                this.mask = value;
            }
        }
    }
    string maskChar;
    [Parameter] public
    string MaskChar {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMaskChar(dxTarget).Result : maskChar;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMaskChar(dxTarget, value);
            } else {
                this.maskChar = value;
            }
        }
    }
    string maskInvalidMessage;
    [Parameter] public
    string MaskInvalidMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMaskInvalidMessage(dxTarget).Result : maskInvalidMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMaskInvalidMessage(dxTarget, value);
            } else {
                this.maskInvalidMessage = value;
            }
        }
    }
    object maskRules;
    [Parameter] public
    object MaskRules {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetMaskRules(dxTarget).Result : maskRules;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetMaskRules(dxTarget, value);
            } else {
                this.maskRules = value;
            }
        }
    }
    string name;
    [Parameter] public
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    string showMaskMode;
    [Parameter] public
    string ShowMaskMode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetShowMaskMode(dxTarget).Result : showMaskMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetShowMaskMode(dxTarget, value);
            } else {
                this.showMaskMode = value;
            }
        }
    }
    bool? spellcheck;
    [Parameter] public
    bool? Spellcheck {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetSpellcheck(dxTarget).Result : spellcheck;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetSpellcheck(dxTarget, value);
            } else {
                this.spellcheck = value;
            }
        }
    }
    string text;
    [Parameter] public
    string Text {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetText(dxTarget).Result : text;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetText(dxTarget, value);
            } else {
                this.text = value;
            }
        }
    }
    bool? useMaskedValue;
    [Parameter] public
    bool? UseMaskedValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUseMaskedValue(dxTarget).Result : useMaskedValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetUseMaskedValue(dxTarget, value);
            } else {
                this.useMaskedValue = value;
            }
        }
    }
    bool? isValid;
    [Parameter] public
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter] public
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter] public
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter] public
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter] public
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? disabled;
    [Parameter] public
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter] public
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter] public
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter] public
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter] public
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter] public
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter] public
    object Height {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter] public
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter] public
    object Width {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    object dataSource;
    [Parameter] public
    object DataSource {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDataSource(dxTarget).Result : dataSource;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDataSource(dxTarget, value);
            } else {
                this.dataSource = value;
            }
        }
    }
    object displayExpr;
    [Parameter] public
    object DisplayExpr {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDisplayExpr(dxTarget).Result : displayExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetDisplayExpr(dxTarget, value);
            } else {
                this.displayExpr = value;
            }
        }
    }
    object items;
    [Parameter] public
    object Items {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetItems(dxTarget).Result : items;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetItems(dxTarget, value);
            } else {
                this.items = value;
            }
        }
    }
    object itemTemplate;
    [Parameter] public
    object ItemTemplate {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetItemTemplate(dxTarget, value);
            } else {
                this.itemTemplate = value;
            }
        }
    }
    object valueExpr;
    [Parameter] public
    object ValueExpr {
        get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValueExpr(dxTarget).Result : valueExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxLookupInterop.SetValueExpr(dxTarget, value);
            } else {
                this.valueExpr = value;
            }
        }
    }
    bool? onPageLoadingEnabled;
    [Parameter] public
    bool? OnPageLoadingEnabled {
        get => onPageLoadingEnabled;
        set => this.onPageLoadingEnabled = value;
    }
    bool? onPullRefreshEnabled;
    [Parameter] public
    bool? OnPullRefreshEnabled {
        get => onPullRefreshEnabled;
        set => this.onPullRefreshEnabled = value;
    }
    bool? onScrollEnabled;
    [Parameter] public
    bool? OnScrollEnabled {
        get => onScrollEnabled;
        set => this.onScrollEnabled = value;
    }
    bool? onTitleRenderedEnabled;
    [Parameter] public
    bool? OnTitleRenderedEnabled {
        get => onTitleRenderedEnabled;
        set => this.onTitleRenderedEnabled = value;
    }
    bool? onValueChangedEnabled;
    [Parameter] public
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onItemClickEnabled;
    [Parameter] public
    bool? OnItemClickEnabled {
        get => onItemClickEnabled;
        set => this.onItemClickEnabled = value;
    }
    bool? onSelectionChangedEnabled;
    [Parameter] public
    bool? OnSelectionChangedEnabled {
        get => onSelectionChangedEnabled;
        set => this.onSelectionChangedEnabled = value;
    }
    bool? onClosedEnabled;
    [Parameter] public
    bool? OnClosedEnabled {
        get => onClosedEnabled;
        set => this.onClosedEnabled = value;
    }
    bool? onOpenedEnabled;
    [Parameter] public
    bool? OnOpenedEnabled {
        get => onOpenedEnabled;
        set => this.onOpenedEnabled = value;
    }
    bool? onChangeEnabled;
    [Parameter] public
    bool? OnChangeEnabled {
        get => onChangeEnabled;
        set => this.onChangeEnabled = value;
    }
    bool? onCopyEnabled;
    [Parameter] public
    bool? OnCopyEnabled {
        get => onCopyEnabled;
        set => this.onCopyEnabled = value;
    }
    bool? onCutEnabled;
    [Parameter] public
    bool? OnCutEnabled {
        get => onCutEnabled;
        set => this.onCutEnabled = value;
    }
    bool? onEnterKeyEnabled;
    [Parameter] public
    bool? OnEnterKeyEnabled {
        get => onEnterKeyEnabled;
        set => this.onEnterKeyEnabled = value;
    }
    bool? onFocusInEnabled;
    [Parameter] public
    bool? OnFocusInEnabled {
        get => onFocusInEnabled;
        set => this.onFocusInEnabled = value;
    }
    bool? onFocusOutEnabled;
    [Parameter] public
    bool? OnFocusOutEnabled {
        get => onFocusOutEnabled;
        set => this.onFocusOutEnabled = value;
    }
    bool? onInputEnabled;
    [Parameter] public
    bool? OnInputEnabled {
        get => onInputEnabled;
        set => this.onInputEnabled = value;
    }
    bool? onKeyDownEnabled;
    [Parameter] public
    bool? OnKeyDownEnabled {
        get => onKeyDownEnabled;
        set => this.onKeyDownEnabled = value;
    }
    bool? onKeyPressEnabled;
    [Parameter] public
    bool? OnKeyPressEnabled {
        get => onKeyPressEnabled;
        set => this.onKeyPressEnabled = value;
    }
    bool? onKeyUpEnabled;
    [Parameter] public
    bool? OnKeyUpEnabled {
        get => onKeyUpEnabled;
        set => this.onKeyUpEnabled = value;
    }
    bool? onPasteEnabled;
    [Parameter] public
    bool? OnPasteEnabled {
        get => onPasteEnabled;
        set => this.onPasteEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter] public
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter] public
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter] public
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter] public
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DevExpress.Ui.DxLookupInterop.PageLoading += DxLookup_PageLoading;
        DevExpress.Ui.DxLookupInterop.PullRefresh += DxLookup_PullRefresh;
        DevExpress.Ui.DxLookupInterop.Scroll += DxLookup_Scroll;
        DevExpress.Ui.DxLookupInterop.TitleRendered += DxLookup_TitleRendered;
        //DevExpress.Ui.DxLookupInterop.ValueChanged += DxLookup_ValueChanged;
        DevExpress.Ui.DxLookupInterop.ItemClick += DxLookup_ItemClick;
        DevExpress.Ui.DxLookupInterop.SelectionChanged += DxLookup_SelectionChanged;
        DevExpress.Ui.DxLookupInterop.Closed += DxLookup_Closed;
        DevExpress.Ui.DxLookupInterop.Opened += DxLookup_Opened;
        DevExpress.Ui.DxLookupInterop.Change += DxLookup_Change;
        DevExpress.Ui.DxLookupInterop.Copy += DxLookup_Copy;
        DevExpress.Ui.DxLookupInterop.Cut += DxLookup_Cut;
        DevExpress.Ui.DxLookupInterop.EnterKey += DxLookup_EnterKey;
        DevExpress.Ui.DxLookupInterop.FocusIn += DxLookup_FocusIn;
        DevExpress.Ui.DxLookupInterop.FocusOut += DxLookup_FocusOut;
        DevExpress.Ui.DxLookupInterop.Input += DxLookup_Input;
        DevExpress.Ui.DxLookupInterop.KeyDown += DxLookup_KeyDown;
        DevExpress.Ui.DxLookupInterop.KeyPress += DxLookup_KeyPress;
        DevExpress.Ui.DxLookupInterop.KeyUp += DxLookup_KeyUp;
        DevExpress.Ui.DxLookupInterop.Paste += DxLookup_Paste;
        DevExpress.Ui.DxLookupInterop.ContentReady += DxLookup_ContentReady;
        DevExpress.Ui.DxLookupInterop.Disposing += DxLookup_Disposing;
        DevExpress.Ui.DxLookupInterop.OptionChanged += DxLookup_OptionChanged;
        DevExpress.Ui.DxLookupInterop.Initialized += DxLookup_Initialized;
    }
    [Parameter] public
    Action PageLoading { get; set; }
    void DxLookup_PageLoading(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            PageLoading?.Invoke();
        }
    }
    [Parameter] public
    Action Pullrefresh { get; set; }
    void DxLookup_PullRefresh(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Pullrefresh?.Invoke();
        }
    }
    [Parameter] public
    Action Scroll { get; set; }
    void DxLookup_Scroll(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Scroll?.Invoke();
        }
    }
    [Parameter] public
    Action TitleRendered { get; set; }
    void DxLookup_TitleRendered(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            TitleRendered?.Invoke();
        }
    }
    [Parameter] public
    Action ValueChanged { get; set; }
    void DxLookup_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter] public
    Action ItemClick { get; set; }
    void DxLookup_ItemClick(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ItemClick?.Invoke();
        }
    }
    [Parameter] public
    Action SelectionChanged { get; set; }
    void DxLookup_SelectionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            SelectionChanged?.Invoke();
        }
    }
    [Parameter] public
    Action Closed { get; set; }
    void DxLookup_Closed(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Closed?.Invoke();
        }
    }
    [Parameter] public
    Action Opened { get; set; }
    void DxLookup_Opened(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Opened?.Invoke();
        }
    }
    [Parameter] public
    Action Change { get; set; }
    void DxLookup_Change(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Change?.Invoke();
        }
    }
    [Parameter] public
    Action Copy { get; set; }
    void DxLookup_Copy(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Copy?.Invoke();
        }
    }
    [Parameter] public
    Action Cut { get; set; }
    void DxLookup_Cut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Cut?.Invoke();
        }
    }
    [Parameter] public
    Action EnterKey { get; set; }
    void DxLookup_EnterKey(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            EnterKey?.Invoke();
        }
    }
    [Parameter] public
    Action FocusIn { get; set; }
    void DxLookup_FocusIn(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusIn?.Invoke();
        }
    }
    [Parameter] public
    Action FocusOut { get; set; }
    void DxLookup_FocusOut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusOut?.Invoke();
        }
    }
    [Parameter] public
    Action Input { get; set; }
    void DxLookup_Input(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Input?.Invoke();
        }
    }
    [Parameter] public
    Action KeyDown { get; set; }
    void DxLookup_KeyDown(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyDown?.Invoke();
        }
    }
    [Parameter] public
    Action KeyPress { get; set; }
    void DxLookup_KeyPress(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyPress?.Invoke();
        }
    }
    [Parameter] public
    Action KeyUp { get; set; }
    void DxLookup_KeyUp(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyUp?.Invoke();
        }
    }
    [Parameter] public
    Action Paste { get; set; }
    void DxLookup_Paste(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Paste?.Invoke();
        }
    }
    [Parameter] public
    Action ContentReady { get; set; }
    void DxLookup_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter] public
    Action Disposing { get; set; }
    void DxLookup_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter] public
    Action OptionChanged { get; set; }
    void DxLookup_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter] public
    Action Initialized { get; set; }
    void DxLookup_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void Dispose() {
        DevExpress.Ui.DxLookupInterop.PageLoading -= DxLookup_PageLoading;
        DevExpress.Ui.DxLookupInterop.PullRefresh -= DxLookup_PullRefresh;
        DevExpress.Ui.DxLookupInterop.Scroll -= DxLookup_Scroll;
        DevExpress.Ui.DxLookupInterop.TitleRendered -= DxLookup_TitleRendered;
        //DevExpress.Ui.DxLookupInterop.ValueChanged -= DxLookup_ValueChanged;
        DevExpress.Ui.DxLookupInterop.ItemClick -= DxLookup_ItemClick;
        DevExpress.Ui.DxLookupInterop.SelectionChanged -= DxLookup_SelectionChanged;
        DevExpress.Ui.DxLookupInterop.Closed -= DxLookup_Closed;
        DevExpress.Ui.DxLookupInterop.Opened -= DxLookup_Opened;
        DevExpress.Ui.DxLookupInterop.Change -= DxLookup_Change;
        DevExpress.Ui.DxLookupInterop.Copy -= DxLookup_Copy;
        DevExpress.Ui.DxLookupInterop.Cut -= DxLookup_Cut;
        DevExpress.Ui.DxLookupInterop.EnterKey -= DxLookup_EnterKey;
        DevExpress.Ui.DxLookupInterop.FocusIn -= DxLookup_FocusIn;
        DevExpress.Ui.DxLookupInterop.FocusOut -= DxLookup_FocusOut;
        DevExpress.Ui.DxLookupInterop.Input -= DxLookup_Input;
        DevExpress.Ui.DxLookupInterop.KeyDown -= DxLookup_KeyDown;
        DevExpress.Ui.DxLookupInterop.KeyPress -= DxLookup_KeyPress;
        DevExpress.Ui.DxLookupInterop.KeyUp -= DxLookup_KeyUp;
        DevExpress.Ui.DxLookupInterop.Paste -= DxLookup_Paste;
        DevExpress.Ui.DxLookupInterop.ContentReady -= DxLookup_ContentReady;
        DevExpress.Ui.DxLookupInterop.Disposing -= DxLookup_Disposing;
        DevExpress.Ui.DxLookupInterop.OptionChanged -= DxLookup_OptionChanged;
        DevExpress.Ui.DxLookupInterop.Initialized -= DxLookup_Initialized;
    }
}
