@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxButtonGroupOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxButtonGroup() : base("DxButtonGroup") { }
	protected override DevExpress.Ui.DxButtonGroupOptions CreateOptions() {
		return new DevExpress.Ui.DxButtonGroupOptions {
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			items = items,
			itemTemplate = itemTemplate,
			keyExpr = keyExpr,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			selectionMode = selectionMode,
			stylingMode = stylingMode,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxButtonGroupOptions options) {
		return DevExpress.Ui.DxButtonGroupInterop.Init(dxTarget, options);
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetItemTemplateOption(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetItemTemplateOption(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetKeyExprOption(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetKeyExprOption(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetSelectedItemKeysOption(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetSelectedItemKeysOption(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetSelectedItemsOption(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetSelectedItemsOption(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonGroupInterop.GetSelectionModeOption(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetSelectionModeOption(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	string stylingMode;
	[Parameter]
	string StylingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonGroupInterop.GetStylingModeOption(dxTarget).Result : stylingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetStylingModeOption(dxTarget, value);
			} else {
				this.stylingMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonGroupInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonGroupInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxButtonGroupInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonGroupInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxButtonGroupInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonGroupInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxButtonGroupInterop.SelectionChanged += DxButtonGroup_SelectionChanged;
		DevExpress.Ui.DxButtonGroupInterop.ContentReady += DxButtonGroup_ContentReady;
		DevExpress.Ui.DxButtonGroupInterop.Disposing += DxButtonGroup_Disposing;
		DevExpress.Ui.DxButtonGroupInterop.OptionChanged += DxButtonGroup_OptionChanged;
		DevExpress.Ui.DxButtonGroupInterop.Initialized += DxButtonGroup_Initialized;
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxButtonGroup_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxButtonGroup_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxButtonGroup_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxButtonGroup_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxButtonGroup_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxButtonGroupInterop.SelectionChanged -= DxButtonGroup_SelectionChanged;
		DevExpress.Ui.DxButtonGroupInterop.ContentReady -= DxButtonGroup_ContentReady;
		DevExpress.Ui.DxButtonGroupInterop.Disposing -= DxButtonGroup_Disposing;
		DevExpress.Ui.DxButtonGroupInterop.OptionChanged -= DxButtonGroup_OptionChanged;
		DevExpress.Ui.DxButtonGroupInterop.Initialized -= DxButtonGroup_Initialized;
	}
}
