
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxScrollViewOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxScrollView() : base("DxScrollView") { }
	protected override DevExpress.Ui.DxScrollViewOptions CreateOptions() {
		return new DevExpress.Ui.DxScrollViewOptions {
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			reachBottomText = reachBottomText,
			refreshingText = refreshingText,
			bounceEnabled = bounceEnabled,
			direction = direction,
			disabled = disabled,
			scrollByContent = scrollByContent,
			scrollByThumb = scrollByThumb,
			showScrollbar = showScrollbar,
			useNative = useNative,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onPullDownEnabled = onPullDownEnabled,
			onReachBottomEnabled = onReachBottomEnabled,
			onScrollEnabled = onScrollEnabled,
			onUpdatedEnabled = onUpdatedEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Ui.DxScrollViewOptions options) {
		return DevExpress.Ui.DxScrollViewInterop.Init(dxTarget, options);
	}
	string pulledDownText;
	[Parameter]
	string PulledDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetPulledDownText(dxTarget).Result : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetPulledDownText(dxTarget, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	[Parameter]
	string PullingDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetPullingDownText(dxTarget).Result : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetPullingDownText(dxTarget, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	string reachBottomText;
	[Parameter]
	string ReachBottomText {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetReachBottomText(dxTarget).Result : reachBottomText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetReachBottomText(dxTarget, value);
			} else {
				this.reachBottomText = value;
			}
		}
	}
	string refreshingText;
	[Parameter]
	string RefreshingText {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetRefreshingText(dxTarget).Result : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetRefreshingText(dxTarget, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? bounceEnabled;
	[Parameter]
	bool? BounceEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetBounceEnabled(dxTarget).Result : bounceEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetBounceEnabled(dxTarget, value);
			} else {
				this.bounceEnabled = value;
			}
		}
	}
	string direction;
	[Parameter]
	string Direction {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetDirection(dxTarget).Result : direction;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetDirection(dxTarget, value);
			} else {
				this.direction = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? scrollByContent;
	[Parameter]
	bool? ScrollByContent {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetScrollByContent(dxTarget).Result : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetScrollByContent(dxTarget, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollByThumb;
	[Parameter]
	bool? ScrollByThumb {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetScrollByThumb(dxTarget).Result : scrollByThumb;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetScrollByThumb(dxTarget, value);
			} else {
				this.scrollByThumb = value;
			}
		}
	}
	string showScrollbar;
	[Parameter]
	string ShowScrollbar {
		get => isInitialized ? (string)DevExpress.Ui.DxScrollViewInterop.GetShowScrollbar(dxTarget).Result : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetShowScrollbar(dxTarget, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	bool? useNative;
	[Parameter]
	bool? UseNative {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetUseNative(dxTarget).Result : useNative;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetUseNative(dxTarget, value);
			} else {
				this.useNative = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxScrollViewInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onPullDownEnabled;
	[Parameter]
	bool? OnPullDownEnabled {
		get => onPullDownEnabled;
		set => this.onPullDownEnabled = value;
	}
	bool? onReachBottomEnabled;
	[Parameter]
	bool? OnReachBottomEnabled {
		get => onReachBottomEnabled;
		set => this.onReachBottomEnabled = value;
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onUpdatedEnabled;
	[Parameter]
	bool? OnUpdatedEnabled {
		get => onUpdatedEnabled;
		set => this.onUpdatedEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Ui.DxScrollViewInterop.PullDown += DxScrollView_PullDown;
		DevExpress.Ui.DxScrollViewInterop.ReachBottom += DxScrollView_ReachBottom;
		DevExpress.Ui.DxScrollViewInterop.Scroll += DxScrollView_Scroll;
		DevExpress.Ui.DxScrollViewInterop.Updated += DxScrollView_Updated;
		DevExpress.Ui.DxScrollViewInterop.Disposing += DxScrollView_Disposing;
		DevExpress.Ui.DxScrollViewInterop.OptionChanged += DxScrollView_OptionChanged;
		DevExpress.Ui.DxScrollViewInterop.Initialized += DxScrollView_Initialized;
	}
	[Parameter]
	Action PullDown { get; set; }
	void DxScrollView_PullDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullDown?.Invoke();
		}
	}
	[Parameter]
	Action ReachBottom { get; set; }
	void DxScrollView_ReachBottom(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ReachBottom?.Invoke();
		}
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxScrollView_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action Updated { get; set; }
	void DxScrollView_Updated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Updated?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxScrollView_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxScrollView_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxScrollView_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void refresh() {
		DevExpress.Ui.DxScrollViewInterop.Refresh(dxTarget);
	}
	public object Release(bool preventScrollBottom) {
		return DevExpress.Ui.DxScrollViewInterop.Release(dxTarget, preventScrollBottom).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxScrollViewInterop.PullDown -= DxScrollView_PullDown;
		DevExpress.Ui.DxScrollViewInterop.ReachBottom -= DxScrollView_ReachBottom;
		DevExpress.Ui.DxScrollViewInterop.Scroll -= DxScrollView_Scroll;
		DevExpress.Ui.DxScrollViewInterop.Updated -= DxScrollView_Updated;
		DevExpress.Ui.DxScrollViewInterop.Disposing -= DxScrollView_Disposing;
		DevExpress.Ui.DxScrollViewInterop.OptionChanged -= DxScrollView_OptionChanged;
		DevExpress.Ui.DxScrollViewInterop.Initialized -= DxScrollView_Initialized;
	}
}
