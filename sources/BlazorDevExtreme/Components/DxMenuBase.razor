
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxMenuBaseOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxMenuBase() : base("DxMenuBase") { }
	protected override DevExpress.Ui.DxMenuBaseOptions CreateOptions() {
		return new DevExpress.Ui.DxMenuBaseOptions {
			activeStateEnabled = activeStateEnabled,
			animation = animation,
			cssClass = cssClass,
			items = items,
			selectByClick = selectByClick,
			selectionMode = selectionMode,
			showSubmenuMode = showSubmenuMode,
			disabledExpr = disabledExpr,
			displayExpr = displayExpr,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			itemsExpr = itemsExpr,
			keyExpr = keyExpr,
			selectedExpr = selectedExpr,
			dataSource = dataSource,
			itemHoldTimeout = itemHoldTimeout,
			itemTemplate = itemTemplate,
			noDataText = noDataText,
			selectedIndex = selectedIndex,
			selectedItem = selectedItem,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemRenderedEnabled = onItemRenderedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Ui.DxMenuBaseOptions options) {
		return DevExpress.Ui.DxMenuBaseInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string cssClass;
	[Parameter]
	string CssClass {
		get => isInitialized ? (string)DevExpress.Ui.DxMenuBaseInterop.GetCssClass(dxTarget).Result : cssClass;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetCssClass(dxTarget, value);
			} else {
				this.cssClass = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetItems(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	bool? selectByClick;
	[Parameter]
	bool? SelectByClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetSelectByClick(dxTarget).Result : selectByClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectByClick(dxTarget, value);
			} else {
				this.selectByClick = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Ui.DxMenuBaseInterop.GetSelectionMode(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	object showSubmenuMode;
	[Parameter]
	object ShowSubmenuMode {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetShowSubmenuMode(dxTarget).Result : showSubmenuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetShowSubmenuMode(dxTarget, value);
			} else {
				this.showSubmenuMode = value;
			}
		}
	}
	object disabledExpr;
	[Parameter]
	object DisabledExpr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetDisabledExpr(dxTarget).Result : disabledExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetDisabledExpr(dxTarget, value);
			} else {
				this.disabledExpr = value;
			}
		}
	}
	object displayExpr;
	[Parameter]
	object DisplayExpr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetDisplayExpr(dxTarget).Result : displayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetDisplayExpr(dxTarget, value);
			} else {
				this.displayExpr = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object itemsExpr;
	[Parameter]
	object ItemsExpr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetItemsExpr(dxTarget).Result : itemsExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetItemsExpr(dxTarget, value);
			} else {
				this.itemsExpr = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetKeyExpr(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetKeyExpr(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object selectedExpr;
	[Parameter]
	object SelectedExpr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectedExpr(dxTarget).Result : selectedExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectedExpr(dxTarget, value);
			} else {
				this.selectedExpr = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	float? itemHoldTimeout;
	[Parameter]
	float? ItemHoldTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxMenuBaseInterop.GetItemHoldTimeout(dxTarget).Result : itemHoldTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetItemHoldTimeout(dxTarget, value);
			} else {
				this.itemHoldTimeout = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetItemTemplate(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxMenuBaseInterop.GetNoDataText(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetNoDataText(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxMenuBaseInterop.GetSelectedIndex(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectedItem(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectedItem(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectedItemKeys(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectedItemKeys(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectedItems(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectedItems(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxMenuBaseInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxMenuBaseInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxMenuBaseInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxMenuBaseInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemRenderedEnabled;
	[Parameter]
	bool? OnItemRenderedEnabled {
		get => onItemRenderedEnabled;
		set => this.onItemRenderedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Ui.DxMenuBaseInterop.ItemClick += DxMenuBase_ItemClick;
		DevExpress.Ui.DxMenuBaseInterop.ItemContextMenu += DxMenuBase_ItemContextMenu;
		DevExpress.Ui.DxMenuBaseInterop.ItemHold += DxMenuBase_ItemHold;
		DevExpress.Ui.DxMenuBaseInterop.ItemRendered += DxMenuBase_ItemRendered;
		DevExpress.Ui.DxMenuBaseInterop.SelectionChanged += DxMenuBase_SelectionChanged;
		DevExpress.Ui.DxMenuBaseInterop.ContentReady += DxMenuBase_ContentReady;
		DevExpress.Ui.DxMenuBaseInterop.Disposing += DxMenuBase_Disposing;
		DevExpress.Ui.DxMenuBaseInterop.OptionChanged += DxMenuBase_OptionChanged;
		DevExpress.Ui.DxMenuBaseInterop.Initialized += DxMenuBase_Initialized;
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxMenuBase_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxMenuBase_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxMenuBase_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemRendered { get; set; }
	void DxMenuBase_ItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxMenuBase_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxMenuBase_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxMenuBase_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxMenuBase_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxMenuBase_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void SelectItem(object itemElement) {
		DevExpress.Ui.DxMenuBaseInterop.SelectItem(dxTarget, itemElement);
	}
	public void UnselectItem(object itemElement) {
		DevExpress.Ui.DxMenuBaseInterop.UnselectItem(dxTarget, itemElement);
	}
	public void Dispose() {
		DevExpress.Ui.DxMenuBaseInterop.ItemClick -= DxMenuBase_ItemClick;
		DevExpress.Ui.DxMenuBaseInterop.ItemContextMenu -= DxMenuBase_ItemContextMenu;
		DevExpress.Ui.DxMenuBaseInterop.ItemHold -= DxMenuBase_ItemHold;
		DevExpress.Ui.DxMenuBaseInterop.ItemRendered -= DxMenuBase_ItemRendered;
		DevExpress.Ui.DxMenuBaseInterop.SelectionChanged -= DxMenuBase_SelectionChanged;
		DevExpress.Ui.DxMenuBaseInterop.ContentReady -= DxMenuBase_ContentReady;
		DevExpress.Ui.DxMenuBaseInterop.Disposing -= DxMenuBase_Disposing;
		DevExpress.Ui.DxMenuBaseInterop.OptionChanged -= DxMenuBase_OptionChanged;
		DevExpress.Ui.DxMenuBaseInterop.Initialized -= DxMenuBase_Initialized;
	}
}
