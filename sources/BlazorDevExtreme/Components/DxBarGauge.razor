@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Gauges.DxBarGaugeOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxBarGauge() : base("DxBarGauge") { }
	protected override DevExpress.Viz.Gauges.DxBarGaugeOptions CreateOptions() {
		return new DevExpress.Viz.Gauges.DxBarGaugeOptions {
			animation = animation,
			backgroundColor = backgroundColor,
			barSpacing = barSpacing,
			baseValue = baseValue,
			endValue = endValue,
			geometry = geometry,
			label = label,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			relativeInnerRadius = relativeInnerRadius,
			startValue = startValue,
			subtitle = subtitle,
			title = title,
			tooltip = tooltip,
			values = values,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Viz.Gauges.DxBarGaugeOptions options) {
		return DevExpress.Viz.DxBarGaugeInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter] public
	object Animation {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string backgroundColor;
	[Parameter] public
	string BackgroundColor {
		get => isInitialized ? (string)DevExpress.Viz.DxBarGaugeInterop.GetBackgroundColor(dxTarget).Result : backgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBackgroundColor(dxTarget, value);
			} else {
				this.backgroundColor = value;
			}
		}
	}
	float? barSpacing;
	[Parameter] public
	float? BarSpacing {
		get => isInitialized ? (float?)DevExpress.Viz.DxBarGaugeInterop.GetBarSpacing(dxTarget).Result : barSpacing;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBarSpacing(dxTarget, value);
			} else {
				this.barSpacing = value;
			}
		}
	}
	float? baseValue;
	[Parameter] public
	float? BaseValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxBarGaugeInterop.GetBaseValue(dxTarget).Result : baseValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBaseValue(dxTarget, value);
			} else {
				this.baseValue = value;
			}
		}
	}
	float? endValue;
	[Parameter] public
	float? EndValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxBarGaugeInterop.GetEndValue(dxTarget).Result : endValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetEndValue(dxTarget, value);
			} else {
				this.endValue = value;
			}
		}
	}
	object geometry;
	[Parameter] public
	object Geometry {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetGeometry(dxTarget).Result : geometry;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetGeometry(dxTarget, value);
			} else {
				this.geometry = value;
			}
		}
	}
	object label;
	[Parameter] public
	object Label {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetLabel(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetLabel(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	object palette;
	[Parameter] public
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetPalette(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPalette(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter] public
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxBarGaugeInterop.GetPaletteExtensionMode(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPaletteExtensionMode(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	float? relativeInnerRadius;
	[Parameter] public
	float? RelativeInnerRadius {
		get => isInitialized ? (float?)DevExpress.Viz.DxBarGaugeInterop.GetRelativeInnerRadius(dxTarget).Result : relativeInnerRadius;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetRelativeInnerRadius(dxTarget, value);
			} else {
				this.relativeInnerRadius = value;
			}
		}
	}
	float? startValue;
	[Parameter] public
	float? StartValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxBarGaugeInterop.GetStartValue(dxTarget).Result : startValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetStartValue(dxTarget, value);
			} else {
				this.startValue = value;
			}
		}
	}
	object subtitle;
	[Parameter] public
	object Subtitle {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetSubtitle(dxTarget).Result : subtitle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetSubtitle(dxTarget, value);
			} else {
				this.subtitle = value;
			}
		}
	}
	object title;
	[Parameter] public
	object Title {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	[Parameter] public
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object values;
	[Parameter] public
	object Values {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetValues(dxTarget).Result : values;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetValues(dxTarget, value);
			} else {
				this.values = value;
			}
		}
	}
	object export;
	[Parameter] public
	object Export {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter] public
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetLoadingIndicator(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetLoadingIndicator(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter] public
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetMargin(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetMargin(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter] public
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBarGaugeInterop.GetPathModified(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPathModified(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter] public
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBarGaugeInterop.GetRedrawOnResize(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetRedrawOnResize(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter] public
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBarGaugeInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter] public
	object Size {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetSize(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetSize(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter] public
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxBarGaugeInterop.GetTheme(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTheme(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object bindingOptions;
	[Parameter] public
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter] public
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter] public
	object Height {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter] public
	object Width {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter] public
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter] public
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter] public
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter] public
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter] public
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter] public
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter] public
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter] public
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter] public
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter] public
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden += DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown += DxBarGauge_TooltipShown;
		DevExpress.Viz.DxBarGaugeInterop.Drawn += DxBarGauge_Drawn;
		DevExpress.Viz.DxBarGaugeInterop.Exported += DxBarGauge_Exported;
		DevExpress.Viz.DxBarGaugeInterop.Exporting += DxBarGauge_Exporting;
		DevExpress.Viz.DxBarGaugeInterop.FileSaving += DxBarGauge_FileSaving;
		DevExpress.Viz.DxBarGaugeInterop.IncidentOccurred += DxBarGauge_IncidentOccurred;
		DevExpress.Viz.DxBarGaugeInterop.Disposing += DxBarGauge_Disposing;
		DevExpress.Viz.DxBarGaugeInterop.OptionChanged += DxBarGauge_OptionChanged;
		DevExpress.Viz.DxBarGaugeInterop.Initialized += DxBarGauge_Initialized;
	}
	[Parameter] public
	Action TooltipHidden { get; set; }
	void DxBarGauge_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter] public
	Action TooltipShown { get; set; }
	void DxBarGauge_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter] public
	Action Drawn { get; set; }
	void DxBarGauge_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter] public
	Action Exported { get; set; }
	void DxBarGauge_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter] public
	Action Exporting { get; set; }
	void DxBarGauge_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter] public
	Action FileSaving { get; set; }
	void DxBarGauge_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter] public
	Action IncidentOccurred { get; set; }
	void DxBarGauge_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter] public
	Action Disposing { get; set; }
	void DxBarGauge_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter] public
	Action OptionChanged { get; set; }
	void DxBarGauge_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action Initialized { get; set; }
	void DxBarGauge_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object ValuesEx() {
		return DevExpress.Viz.DxBarGaugeInterop.ValuesEx(dxTarget).Result;
	}
	public void ValuesEx(object values) {
		DevExpress.Viz.DxBarGaugeInterop.ValuesEx(dxTarget, values);
	}
	public void Dispose() {
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden -= DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown -= DxBarGauge_TooltipShown;
		DevExpress.Viz.DxBarGaugeInterop.Drawn -= DxBarGauge_Drawn;
		DevExpress.Viz.DxBarGaugeInterop.Exported -= DxBarGauge_Exported;
		DevExpress.Viz.DxBarGaugeInterop.Exporting -= DxBarGauge_Exporting;
		DevExpress.Viz.DxBarGaugeInterop.FileSaving -= DxBarGauge_FileSaving;
		DevExpress.Viz.DxBarGaugeInterop.IncidentOccurred -= DxBarGauge_IncidentOccurred;
		DevExpress.Viz.DxBarGaugeInterop.Disposing -= DxBarGauge_Disposing;
		DevExpress.Viz.DxBarGaugeInterop.OptionChanged -= DxBarGauge_OptionChanged;
		DevExpress.Viz.DxBarGaugeInterop.Initialized -= DxBarGauge_Initialized;
	}
}
