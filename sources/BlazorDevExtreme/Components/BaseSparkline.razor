
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Sparklines.BaseSparklineOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public BaseSparkline() : base("BaseSparkline") { }
	protected override DevExpress.Viz.Sparklines.BaseSparklineOptions CreateOptions() {
		return new DevExpress.Viz.Sparklines.BaseSparklineOptions {
			tooltip = tooltip,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Viz.Sparklines.BaseSparklineOptions options) {
		return DevExpress.Viz.BaseSparklineInterop.Init(dxTarget, options);
	}
	object tooltip;
	[Parameter] public
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object export;
	[Parameter] public
	object Export {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter] public
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetLoadingIndicator(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetLoadingIndicator(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter] public
	object Margin {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetMargin(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetMargin(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter] public
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseSparklineInterop.GetPathModified(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetPathModified(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter] public
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseSparklineInterop.GetRedrawOnResize(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetRedrawOnResize(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter] public
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.BaseSparklineInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter] public
	object Size {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetSize(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetSize(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter] public
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.BaseSparklineInterop.GetTheme(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetTheme(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter] public
	object Title {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter] public
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter] public
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter] public
	object Height {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter] public
	object Width {
		get => isInitialized ? DevExpress.Viz.BaseSparklineInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseSparklineInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter] public
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter] public
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter] public
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter] public
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter] public
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter] public
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter] public
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter] public
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter] public
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter] public
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Viz.BaseSparklineInterop.TooltipHidden += BaseSparkline_TooltipHidden;
		DevExpress.Viz.BaseSparklineInterop.TooltipShown += BaseSparkline_TooltipShown;
		DevExpress.Viz.BaseSparklineInterop.Drawn += BaseSparkline_Drawn;
		DevExpress.Viz.BaseSparklineInterop.Exported += BaseSparkline_Exported;
		DevExpress.Viz.BaseSparklineInterop.Exporting += BaseSparkline_Exporting;
		DevExpress.Viz.BaseSparklineInterop.FileSaving += BaseSparkline_FileSaving;
		DevExpress.Viz.BaseSparklineInterop.IncidentOccurred += BaseSparkline_IncidentOccurred;
		DevExpress.Viz.BaseSparklineInterop.Disposing += BaseSparkline_Disposing;
		DevExpress.Viz.BaseSparklineInterop.OptionChanged += BaseSparkline_OptionChanged;
		DevExpress.Viz.BaseSparklineInterop.Initialized += BaseSparkline_Initialized;
	}
	[Parameter] public
	Action TooltipHidden { get; set; }
	void BaseSparkline_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter] public
	Action TooltipShown { get; set; }
	void BaseSparkline_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter] public
	Action Drawn { get; set; }
	void BaseSparkline_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter] public
	Action Exported { get; set; }
	void BaseSparkline_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter] public
	Action Exporting { get; set; }
	void BaseSparkline_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter] public
	Action FileSaving { get; set; }
	void BaseSparkline_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter] public
	Action IncidentOccurred { get; set; }
	void BaseSparkline_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter] public
	Action Disposing { get; set; }
	void BaseSparkline_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter] public
	Action OptionChanged { get; set; }
	void BaseSparkline_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action Initialized { get; set; }
	void BaseSparkline_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.BaseSparklineInterop.TooltipHidden -= BaseSparkline_TooltipHidden;
		DevExpress.Viz.BaseSparklineInterop.TooltipShown -= BaseSparkline_TooltipShown;
		DevExpress.Viz.BaseSparklineInterop.Drawn -= BaseSparkline_Drawn;
		DevExpress.Viz.BaseSparklineInterop.Exported -= BaseSparkline_Exported;
		DevExpress.Viz.BaseSparklineInterop.Exporting -= BaseSparkline_Exporting;
		DevExpress.Viz.BaseSparklineInterop.FileSaving -= BaseSparkline_FileSaving;
		DevExpress.Viz.BaseSparklineInterop.IncidentOccurred -= BaseSparkline_IncidentOccurred;
		DevExpress.Viz.BaseSparklineInterop.Disposing -= BaseSparkline_Disposing;
		DevExpress.Viz.BaseSparklineInterop.OptionChanged -= BaseSparkline_OptionChanged;
		DevExpress.Viz.BaseSparklineInterop.Initialized -= BaseSparkline_Initialized;
	}
}
