@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxPieChartOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxPieChart() : base("DxPieChart") { }
	protected override DevExpress.Viz.DxPieChartOptions CreateOptions() {
		return new DevExpress.Viz.DxPieChartOptions {
			adaptiveLayout = adaptiveLayout,
			commonSeriesSettings = commonSeriesSettings,
			diameter = diameter,
			innerRadius = innerRadius,
			legend = legend,
			minDiameter = minDiameter,
			palette = palette,
			resolveLabelOverlapping = resolveLabelOverlapping,
			segmentsDirection = segmentsDirection,
			series = series,
			seriesTemplate = seriesTemplate,
			sizeGroup = sizeGroup,
			startAngle = startAngle,
			type = type,
			animation = animation,
			customizeLabel = customizeLabel,
			customizePoint = customizePoint,
			dataSource = dataSource,
			paletteExtensionMode = paletteExtensionMode,
			pointSelectionMode = pointSelectionMode,
			tooltip = tooltip,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onLegendClickEnabled = onLegendClickEnabled,
			onDoneEnabled = onDoneEnabled,
			onPointClickEnabled = onPointClickEnabled,
			onPointHoverChangedEnabled = onPointHoverChangedEnabled,
			onPointSelectionChangedEnabled = onPointSelectionChangedEnabled,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxPieChartOptions options) {
		return DevExpress.Viz.DxPieChartInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetAdaptiveLayoutOption(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetAdaptiveLayoutOption(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object commonSeriesSettings;
	[Parameter]
	object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetCommonSeriesSettingsOption(dxTarget).Result : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetCommonSeriesSettingsOption(dxTarget, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	float? diameter;
	[Parameter]
	float? Diameter {
		get => isInitialized ? (float?)DevExpress.Viz.DxPieChartInterop.GetDiameterOption(dxTarget).Result : diameter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetDiameterOption(dxTarget, value);
			} else {
				this.diameter = value;
			}
		}
	}
	float? innerRadius;
	[Parameter]
	float? InnerRadius {
		get => isInitialized ? (float?)DevExpress.Viz.DxPieChartInterop.GetInnerRadiusOption(dxTarget).Result : innerRadius;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetInnerRadiusOption(dxTarget, value);
			} else {
				this.innerRadius = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetLegendOption(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetLegendOption(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? minDiameter;
	[Parameter]
	float? MinDiameter {
		get => isInitialized ? (float?)DevExpress.Viz.DxPieChartInterop.GetMinDiameterOption(dxTarget).Result : minDiameter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetMinDiameterOption(dxTarget, value);
			} else {
				this.minDiameter = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetPaletteOption(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetPaletteOption(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string resolveLabelOverlapping;
	[Parameter]
	string ResolveLabelOverlapping {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetResolveLabelOverlappingOption(dxTarget).Result : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetResolveLabelOverlappingOption(dxTarget, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	string segmentsDirection;
	[Parameter]
	string SegmentsDirection {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetSegmentsDirectionOption(dxTarget).Result : segmentsDirection;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSegmentsDirectionOption(dxTarget, value);
			} else {
				this.segmentsDirection = value;
			}
		}
	}
	object series;
	[Parameter]
	object Series {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSeriesOption(dxTarget).Result : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSeriesOption(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	object seriesTemplate;
	[Parameter]
	object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSeriesTemplateOption(dxTarget).Result : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSeriesTemplateOption(dxTarget, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	string sizeGroup;
	[Parameter]
	string SizeGroup {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetSizeGroupOption(dxTarget).Result : sizeGroup;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSizeGroupOption(dxTarget, value);
			} else {
				this.sizeGroup = value;
			}
		}
	}
	float? startAngle;
	[Parameter]
	float? StartAngle {
		get => isInitialized ? (float?)DevExpress.Viz.DxPieChartInterop.GetStartAngleOption(dxTarget).Result : startAngle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetStartAngleOption(dxTarget, value);
			} else {
				this.startAngle = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetTypeOption(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetTypeOption(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetAnimationOption(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetAnimationOption(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object customizeLabel;
	[Parameter]
	object CustomizeLabel {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetCustomizeLabelOption(dxTarget).Result : customizeLabel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetCustomizeLabelOption(dxTarget, value);
			} else {
				this.customizeLabel = value;
			}
		}
	}
	object customizePoint;
	[Parameter]
	object CustomizePoint {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetCustomizePointOption(dxTarget).Result : customizePoint;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetCustomizePointOption(dxTarget, value);
			} else {
				this.customizePoint = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetPaletteExtensionModeOption(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetPaletteExtensionModeOption(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string pointSelectionMode;
	[Parameter]
	string PointSelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetPointSelectionModeOption(dxTarget).Result : pointSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetPointSelectionModeOption(dxTarget, value);
			} else {
				this.pointSelectionMode = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPieChartInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPieChartInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPieChartInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPieChartInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxPieChartInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onDoneEnabled;
	[Parameter]
	bool? OnDoneEnabled {
		get => onDoneEnabled;
		set => this.onDoneEnabled = value;
	}
	bool? onPointClickEnabled;
	[Parameter]
	bool? OnPointClickEnabled {
		get => onPointClickEnabled;
		set => this.onPointClickEnabled = value;
	}
	bool? onPointHoverChangedEnabled;
	[Parameter]
	bool? OnPointHoverChangedEnabled {
		get => onPointHoverChangedEnabled;
		set => this.onPointHoverChangedEnabled = value;
	}
	bool? onPointSelectionChangedEnabled;
	[Parameter]
	bool? OnPointSelectionChangedEnabled {
		get => onPointSelectionChangedEnabled;
		set => this.onPointSelectionChangedEnabled = value;
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxPieChartInterop.LegendClick += DxPieChart_LegendClick;
		DevExpress.Viz.DxPieChartInterop.Done += DxPieChart_Done;
		DevExpress.Viz.DxPieChartInterop.PointClick += DxPieChart_PointClick;
		DevExpress.Viz.DxPieChartInterop.PointHoverChanged += DxPieChart_PointHoverChanged;
		DevExpress.Viz.DxPieChartInterop.PointSelectionChanged += DxPieChart_PointSelectionChanged;
		DevExpress.Viz.DxPieChartInterop.TooltipHidden += DxPieChart_TooltipHidden;
		DevExpress.Viz.DxPieChartInterop.TooltipShown += DxPieChart_TooltipShown;
		DevExpress.Viz.DxPieChartInterop.Drawn += DxPieChart_Drawn;
		DevExpress.Viz.DxPieChartInterop.Exported += DxPieChart_Exported;
		DevExpress.Viz.DxPieChartInterop.Exporting += DxPieChart_Exporting;
		DevExpress.Viz.DxPieChartInterop.FileSaving += DxPieChart_FileSaving;
		DevExpress.Viz.DxPieChartInterop.IncidentOccurred += DxPieChart_IncidentOccurred;
		DevExpress.Viz.DxPieChartInterop.Disposing += DxPieChart_Disposing;
		DevExpress.Viz.DxPieChartInterop.OptionChanged += DxPieChart_OptionChanged;
		DevExpress.Viz.DxPieChartInterop.Initialized += DxPieChart_Initialized;
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxPieChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action Done { get; set; }
	void DxPieChart_Done(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Done?.Invoke();
		}
	}
	[Parameter]
	Action PointClick { get; set; }
	void DxPieChart_PointClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointClick?.Invoke();
		}
	}
	[Parameter]
	Action PointHoverChanged { get; set; }
	void DxPieChart_PointHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action PointSelectionChanged { get; set; }
	void DxPieChart_PointSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointSelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void DxPieChart_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void DxPieChart_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxPieChart_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxPieChart_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxPieChart_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxPieChart_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxPieChart_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxPieChart_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxPieChart_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxPieChart_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.DxPieChartInterop.LegendClick -= DxPieChart_LegendClick;
		DevExpress.Viz.DxPieChartInterop.Done -= DxPieChart_Done;
		DevExpress.Viz.DxPieChartInterop.PointClick -= DxPieChart_PointClick;
		DevExpress.Viz.DxPieChartInterop.PointHoverChanged -= DxPieChart_PointHoverChanged;
		DevExpress.Viz.DxPieChartInterop.PointSelectionChanged -= DxPieChart_PointSelectionChanged;
		DevExpress.Viz.DxPieChartInterop.TooltipHidden -= DxPieChart_TooltipHidden;
		DevExpress.Viz.DxPieChartInterop.TooltipShown -= DxPieChart_TooltipShown;
		DevExpress.Viz.DxPieChartInterop.Drawn -= DxPieChart_Drawn;
		DevExpress.Viz.DxPieChartInterop.Exported -= DxPieChart_Exported;
		DevExpress.Viz.DxPieChartInterop.Exporting -= DxPieChart_Exporting;
		DevExpress.Viz.DxPieChartInterop.FileSaving -= DxPieChart_FileSaving;
		DevExpress.Viz.DxPieChartInterop.IncidentOccurred -= DxPieChart_IncidentOccurred;
		DevExpress.Viz.DxPieChartInterop.Disposing -= DxPieChart_Disposing;
		DevExpress.Viz.DxPieChartInterop.OptionChanged -= DxPieChart_OptionChanged;
		DevExpress.Viz.DxPieChartInterop.Initialized -= DxPieChart_Initialized;
	}
}
