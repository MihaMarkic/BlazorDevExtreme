
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxSlideOutViewOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSlideOutView() : base("DxSlideOutView") { }
	protected override DevExpress.Ui.DxSlideOutViewOptions CreateOptions() {
		return new DevExpress.Ui.DxSlideOutViewOptions {
			contentTemplate = contentTemplate,
			menuPosition = menuPosition,
			menuTemplate = menuTemplate,
			menuVisible = menuVisible,
			swipeEnabled = swipeEnabled,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxSlideOutViewOptions options) {
		return DevExpress.Ui.DxSlideOutViewInterop.Init(dxTarget, options);
	}
	object contentTemplate;
	[Parameter]
	object ContentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetContentTemplate(dxTarget).Result : contentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetContentTemplate(dxTarget, value);
			} else {
				this.contentTemplate = value;
			}
		}
	}
	string menuPosition;
	[Parameter]
	string MenuPosition {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutViewInterop.GetMenuPosition(dxTarget).Result : menuPosition;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetMenuPosition(dxTarget, value);
			} else {
				this.menuPosition = value;
			}
		}
	}
	object menuTemplate;
	[Parameter]
	object MenuTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetMenuTemplate(dxTarget).Result : menuTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetMenuTemplate(dxTarget, value);
			} else {
				this.menuTemplate = value;
			}
		}
	}
	bool? menuVisible;
	[Parameter]
	bool? MenuVisible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetMenuVisible(dxTarget).Result : menuVisible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetMenuVisible(dxTarget, value);
			} else {
				this.menuVisible = value;
			}
		}
	}
	bool? swipeEnabled;
	[Parameter]
	bool? SwipeEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetSwipeEnabled(dxTarget).Result : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetSwipeEnabled(dxTarget, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutViewInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutViewInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxSlideOutViewInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutViewInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxSlideOutViewInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutViewInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSlideOutViewInterop.ContentReady += DxSlideOutView_ContentReady;
		DevExpress.Ui.DxSlideOutViewInterop.Disposing += DxSlideOutView_Disposing;
		DevExpress.Ui.DxSlideOutViewInterop.OptionChanged += DxSlideOutView_OptionChanged;
		DevExpress.Ui.DxSlideOutViewInterop.Initialized += DxSlideOutView_Initialized;
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxSlideOutView_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxSlideOutView_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxSlideOutView_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxSlideOutView_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object Content() {
		return DevExpress.Ui.DxSlideOutViewInterop.Content(dxTarget).Result;
	}
	public object HideMenu() {
		return DevExpress.Ui.DxSlideOutViewInterop.HideMenu(dxTarget).Result;
	}
	public object MenuContent() {
		return DevExpress.Ui.DxSlideOutViewInterop.MenuContent(dxTarget).Result;
	}
	public object ShowMenu() {
		return DevExpress.Ui.DxSlideOutViewInterop.ShowMenu(dxTarget).Result;
	}
	public object ToggleMenuVisibility() {
		return DevExpress.Ui.DxSlideOutViewInterop.ToggleMenuVisibility(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxSlideOutViewInterop.ContentReady -= DxSlideOutView_ContentReady;
		DevExpress.Ui.DxSlideOutViewInterop.Disposing -= DxSlideOutView_Disposing;
		DevExpress.Ui.DxSlideOutViewInterop.OptionChanged -= DxSlideOutView_OptionChanged;
		DevExpress.Ui.DxSlideOutViewInterop.Initialized -= DxSlideOutView_Initialized;
	}
}
