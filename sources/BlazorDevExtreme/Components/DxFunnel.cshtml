@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxFunnelOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxFunnel() : base("DxFunnel") { }
	protected override DevExpress.Viz.DxFunnelOptions CreateOptions() {
		return new DevExpress.Viz.DxFunnelOptions {
			adaptiveLayout = adaptiveLayout,
			algorithm = algorithm,
			argumentField = argumentField,
			colorField = colorField,
			dataSource = dataSource,
			hoverEnabled = hoverEnabled,
			inverted = inverted,
			item = item,
			label = label,
			legend = legend,
			neckHeight = neckHeight,
			neckWidth = neckWidth,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			selectionMode = selectionMode,
			sortData = sortData,
			tooltip = tooltip,
			valueField = valueField,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onHoverChangedEnabled = onHoverChangedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxFunnelOptions options) {
		return DevExpress.Viz.DxFunnelInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetAdaptiveLayoutOption(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetAdaptiveLayoutOption(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	string algorithm;
	[Parameter]
	string Algorithm {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetAlgorithmOption(dxTarget).Result : algorithm;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetAlgorithmOption(dxTarget, value);
			} else {
				this.algorithm = value;
			}
		}
	}
	string argumentField;
	[Parameter]
	string ArgumentField {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetArgumentFieldOption(dxTarget).Result : argumentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetArgumentFieldOption(dxTarget, value);
			} else {
				this.argumentField = value;
			}
		}
	}
	string colorField;
	[Parameter]
	string ColorField {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetColorFieldOption(dxTarget).Result : colorField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetColorFieldOption(dxTarget, value);
			} else {
				this.colorField = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	bool? hoverEnabled;
	[Parameter]
	bool? HoverEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetHoverEnabledOption(dxTarget).Result : hoverEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetHoverEnabledOption(dxTarget, value);
			} else {
				this.hoverEnabled = value;
			}
		}
	}
	bool? inverted;
	[Parameter]
	bool? Inverted {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetInvertedOption(dxTarget).Result : inverted;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetInvertedOption(dxTarget, value);
			} else {
				this.inverted = value;
			}
		}
	}
	object item;
	[Parameter]
	object Item {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetItemOption(dxTarget).Result : item;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetItemOption(dxTarget, value);
			} else {
				this.item = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetLabelOption(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetLabelOption(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetLegendOption(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetLegendOption(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? neckHeight;
	[Parameter]
	float? NeckHeight {
		get => isInitialized ? (float?)DevExpress.Viz.DxFunnelInterop.GetNeckHeightOption(dxTarget).Result : neckHeight;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetNeckHeightOption(dxTarget, value);
			} else {
				this.neckHeight = value;
			}
		}
	}
	float? neckWidth;
	[Parameter]
	float? NeckWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxFunnelInterop.GetNeckWidthOption(dxTarget).Result : neckWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetNeckWidthOption(dxTarget, value);
			} else {
				this.neckWidth = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetPaletteOption(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetPaletteOption(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetPaletteExtensionModeOption(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetPaletteExtensionModeOption(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetSelectionModeOption(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetSelectionModeOption(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	bool? sortData;
	[Parameter]
	bool? SortData {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetSortDataOption(dxTarget).Result : sortData;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetSortDataOption(dxTarget, value);
			} else {
				this.sortData = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetValueFieldOption(dxTarget).Result : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetValueFieldOption(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxFunnelInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxFunnelInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onHoverChangedEnabled;
	[Parameter]
	bool? OnHoverChangedEnabled {
		get => onHoverChangedEnabled;
		set => this.onHoverChangedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxFunnelInterop.HoverChanged += DxFunnel_HoverChanged;
		DevExpress.Viz.DxFunnelInterop.ItemClick += DxFunnel_ItemClick;
		DevExpress.Viz.DxFunnelInterop.LegendClick += DxFunnel_LegendClick;
		DevExpress.Viz.DxFunnelInterop.SelectionChanged += DxFunnel_SelectionChanged;
		DevExpress.Viz.DxFunnelInterop.Drawn += DxFunnel_Drawn;
		DevExpress.Viz.DxFunnelInterop.Exported += DxFunnel_Exported;
		DevExpress.Viz.DxFunnelInterop.Exporting += DxFunnel_Exporting;
		DevExpress.Viz.DxFunnelInterop.FileSaving += DxFunnel_FileSaving;
		DevExpress.Viz.DxFunnelInterop.IncidentOccurred += DxFunnel_IncidentOccurred;
		DevExpress.Viz.DxFunnelInterop.Disposing += DxFunnel_Disposing;
		DevExpress.Viz.DxFunnelInterop.OptionChanged += DxFunnel_OptionChanged;
		DevExpress.Viz.DxFunnelInterop.Initialized += DxFunnel_Initialized;
	}
	[Parameter]
	Action HoverChanged { get; set; }
	void DxFunnel_HoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			HoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxFunnel_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxFunnel_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxFunnel_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxFunnel_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxFunnel_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxFunnel_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxFunnel_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxFunnel_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxFunnel_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxFunnel_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxFunnel_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void ClearSelection() {
		DevExpress.Viz.DxFunnelInterop.ClearSelection(dxTarget);
	}
	public object GetAllItems() {
		return DevExpress.Viz.DxFunnelInterop.GetAllItems(dxTarget).Result;
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxFunnelInterop.GetDataSourceEx(dxTarget).Result;
	}
	public void HideTooltip() {
		DevExpress.Viz.DxFunnelInterop.HideTooltip(dxTarget);
	}
	public void Dispose() {
		DevExpress.Viz.DxFunnelInterop.HoverChanged -= DxFunnel_HoverChanged;
		DevExpress.Viz.DxFunnelInterop.ItemClick -= DxFunnel_ItemClick;
		DevExpress.Viz.DxFunnelInterop.LegendClick -= DxFunnel_LegendClick;
		DevExpress.Viz.DxFunnelInterop.SelectionChanged -= DxFunnel_SelectionChanged;
		DevExpress.Viz.DxFunnelInterop.Drawn -= DxFunnel_Drawn;
		DevExpress.Viz.DxFunnelInterop.Exported -= DxFunnel_Exported;
		DevExpress.Viz.DxFunnelInterop.Exporting -= DxFunnel_Exporting;
		DevExpress.Viz.DxFunnelInterop.FileSaving -= DxFunnel_FileSaving;
		DevExpress.Viz.DxFunnelInterop.IncidentOccurred -= DxFunnel_IncidentOccurred;
		DevExpress.Viz.DxFunnelInterop.Disposing -= DxFunnel_Disposing;
		DevExpress.Viz.DxFunnelInterop.OptionChanged -= DxFunnel_OptionChanged;
		DevExpress.Viz.DxFunnelInterop.Initialized -= DxFunnel_Initialized;
	}
}
