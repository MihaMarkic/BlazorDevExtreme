@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTextEditorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
    ElementRef dxTarget;
    public DxTextEditor() : base("DxTextEditor") { }
    protected override DevExpress.Ui.DxTextEditorOptions CreateOptions() {
        return new DevExpress.Ui.DxTextEditorOptions {
            focusStateEnabled = focusStateEnabled,
            hoverStateEnabled = hoverStateEnabled,
            inputAttr = inputAttr,
            mask = mask,
            maskChar = maskChar,
            maskInvalidMessage = maskInvalidMessage,
            maskRules = maskRules,
            name = name,
            placeholder = placeholder,
            showClearButton = showClearButton,
            showMaskMode = showMaskMode,
            spellcheck = spellcheck,
            text = text,
            useMaskedValue = useMaskedValue,
            value = value,
            valueChangeEvent = valueChangeEvent,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            activeStateEnabled = activeStateEnabled,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            onChangeEnabled = onChangeEnabled,
            onCopyEnabled = onCopyEnabled,
            onCutEnabled = onCutEnabled,
            onEnterKeyEnabled = onEnterKeyEnabled,
            onFocusInEnabled = onFocusInEnabled,
            onFocusOutEnabled = onFocusOutEnabled,
            onInputEnabled = onInputEnabled,
            onKeyDownEnabled = onKeyDownEnabled,
            onKeyPressEnabled = onKeyPressEnabled,
            onKeyUpEnabled = onKeyUpEnabled,
            onPasteEnabled = onPasteEnabled,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override Task Init(DevExpress.Ui.DxTextEditorOptions options) {
        return DevExpress.Ui.DxTextEditorInterop.Init(dxTarget, options);
    }
    bool? focusStateEnabled;
    [Parameter]
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter]
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    object inputAttr;
    [Parameter]
    object InputAttr {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetInputAttr(dxTarget).Result : inputAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetInputAttr(dxTarget, value);
            } else {
                this.inputAttr = value;
            }
        }
    }
    string mask;
    [Parameter]
    string Mask {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetMask(dxTarget).Result : mask;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetMask(dxTarget, value);
            } else {
                this.mask = value;
            }
        }
    }
    string maskChar;
    [Parameter]
    string MaskChar {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetMaskChar(dxTarget).Result : maskChar;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetMaskChar(dxTarget, value);
            } else {
                this.maskChar = value;
            }
        }
    }
    string maskInvalidMessage;
    [Parameter]
    string MaskInvalidMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetMaskInvalidMessage(dxTarget).Result : maskInvalidMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetMaskInvalidMessage(dxTarget, value);
            } else {
                this.maskInvalidMessage = value;
            }
        }
    }
    object maskRules;
    [Parameter]
    object MaskRules {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetMaskRules(dxTarget).Result : maskRules;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetMaskRules(dxTarget, value);
            } else {
                this.maskRules = value;
            }
        }
    }
    string name;
    [Parameter]
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    string placeholder;
    [Parameter]
    string Placeholder {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetPlaceholder(dxTarget).Result : placeholder;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetPlaceholder(dxTarget, value);
            } else {
                this.placeholder = value;
            }
        }
    }
    bool? showClearButton;
    [Parameter]
    bool? ShowClearButton {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetShowClearButton(dxTarget).Result : showClearButton;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetShowClearButton(dxTarget, value);
            } else {
                this.showClearButton = value;
            }
        }
    }
    string showMaskMode;
    [Parameter]
    string ShowMaskMode {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetShowMaskMode(dxTarget).Result : showMaskMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetShowMaskMode(dxTarget, value);
            } else {
                this.showMaskMode = value;
            }
        }
    }
    bool? spellcheck;
    [Parameter]
    bool? Spellcheck {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetSpellcheck(dxTarget).Result : spellcheck;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetSpellcheck(dxTarget, value);
            } else {
                this.spellcheck = value;
            }
        }
    }
    string text;
    [Parameter]
    string Text {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetText(dxTarget).Result : text;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetText(dxTarget, value);
            } else {
                this.text = value;
            }
        }
    }
    bool? useMaskedValue;
    [Parameter]
    bool? UseMaskedValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetUseMaskedValue(dxTarget).Result : useMaskedValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetUseMaskedValue(dxTarget, value);
            } else {
                this.useMaskedValue = value;
            }
        }
    }
    object value;
    [Parameter]
    object Value {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    string valueChangeEvent;
    [Parameter]
    string ValueChangeEvent {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetValueChangeEvent(dxTarget).Result : valueChangeEvent;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetValueChangeEvent(dxTarget, value);
            } else {
                this.valueChangeEvent = value;
            }
        }
    }
    bool? isValid;
    [Parameter]
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter]
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter]
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter]
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter]
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter]
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? disabled;
    [Parameter]
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter]
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxTextEditorInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter]
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxTextEditorInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter]
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter]
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter]
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter]
    object Height {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter]
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxTextEditorInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter]
    object Width {
        get => isInitialized ? DevExpress.Ui.DxTextEditorInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxTextEditorInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    bool? onChangeEnabled;
    [Parameter]
    bool? OnChangeEnabled {
        get => onChangeEnabled;
        set => this.onChangeEnabled = value;
    }
    bool? onCopyEnabled;
    [Parameter]
    bool? OnCopyEnabled {
        get => onCopyEnabled;
        set => this.onCopyEnabled = value;
    }
    bool? onCutEnabled;
    [Parameter]
    bool? OnCutEnabled {
        get => onCutEnabled;
        set => this.onCutEnabled = value;
    }
    bool? onEnterKeyEnabled;
    [Parameter]
    bool? OnEnterKeyEnabled {
        get => onEnterKeyEnabled;
        set => this.onEnterKeyEnabled = value;
    }
    bool? onFocusInEnabled;
    [Parameter]
    bool? OnFocusInEnabled {
        get => onFocusInEnabled;
        set => this.onFocusInEnabled = value;
    }
    bool? onFocusOutEnabled;
    [Parameter]
    bool? OnFocusOutEnabled {
        get => onFocusOutEnabled;
        set => this.onFocusOutEnabled = value;
    }
    bool? onInputEnabled;
    [Parameter]
    bool? OnInputEnabled {
        get => onInputEnabled;
        set => this.onInputEnabled = value;
    }
    bool? onKeyDownEnabled;
    [Parameter]
    bool? OnKeyDownEnabled {
        get => onKeyDownEnabled;
        set => this.onKeyDownEnabled = value;
    }
    bool? onKeyPressEnabled;
    [Parameter]
    bool? OnKeyPressEnabled {
        get => onKeyPressEnabled;
        set => this.onKeyPressEnabled = value;
    }
    bool? onKeyUpEnabled;
    [Parameter]
    bool? OnKeyUpEnabled {
        get => onKeyUpEnabled;
        set => this.onKeyUpEnabled = value;
    }
    bool? onPasteEnabled;
    [Parameter]
    bool? OnPasteEnabled {
        get => onPasteEnabled;
        set => this.onPasteEnabled = value;
    }
    bool? onValueChangedEnabled;
    [Parameter]
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter]
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter]
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter]
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter]
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitAsync() {
        await base.OnInitAsync();
        DevExpress.Ui.DxTextEditorInterop.Change += DxTextEditor_Change;
        DevExpress.Ui.DxTextEditorInterop.Copy += DxTextEditor_Copy;
        DevExpress.Ui.DxTextEditorInterop.Cut += DxTextEditor_Cut;
        DevExpress.Ui.DxTextEditorInterop.EnterKey += DxTextEditor_EnterKey;
        DevExpress.Ui.DxTextEditorInterop.FocusIn += DxTextEditor_FocusIn;
        DevExpress.Ui.DxTextEditorInterop.FocusOut += DxTextEditor_FocusOut;
        DevExpress.Ui.DxTextEditorInterop.Input += DxTextEditor_Input;
        DevExpress.Ui.DxTextEditorInterop.KeyDown += DxTextEditor_KeyDown;
        DevExpress.Ui.DxTextEditorInterop.KeyPress += DxTextEditor_KeyPress;
        DevExpress.Ui.DxTextEditorInterop.KeyUp += DxTextEditor_KeyUp;
        DevExpress.Ui.DxTextEditorInterop.Paste += DxTextEditor_Paste;
        //DevExpress.Ui.DxTextEditorInterop.ValueChanged += DxTextEditor_ValueChanged;
        DevExpress.Ui.DxTextEditorInterop.ContentReady += DxTextEditor_ContentReady;
        DevExpress.Ui.DxTextEditorInterop.Disposing += DxTextEditor_Disposing;
        DevExpress.Ui.DxTextEditorInterop.OptionChanged += DxTextEditor_OptionChanged;
        DevExpress.Ui.DxTextEditorInterop.Initialized += DxTextEditor_Initialized;
    }
    [Parameter]
    Action Change { get; set; }
    void DxTextEditor_Change(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Change?.Invoke();
        }
    }
    [Parameter]
    Action Copy { get; set; }
    void DxTextEditor_Copy(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Copy?.Invoke();
        }
    }
    [Parameter]
    Action Cut { get; set; }
    void DxTextEditor_Cut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Cut?.Invoke();
        }
    }
    [Parameter]
    Action EnterKey { get; set; }
    void DxTextEditor_EnterKey(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            EnterKey?.Invoke();
        }
    }
    [Parameter]
    Action FocusIn { get; set; }
    void DxTextEditor_FocusIn(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusIn?.Invoke();
        }
    }
    [Parameter]
    Action FocusOut { get; set; }
    void DxTextEditor_FocusOut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusOut?.Invoke();
        }
    }
    [Parameter]
    Action Input { get; set; }
    void DxTextEditor_Input(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Input?.Invoke();
        }
    }
    [Parameter]
    Action KeyDown { get; set; }
    void DxTextEditor_KeyDown(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyDown?.Invoke();
        }
    }
    [Parameter]
    Action KeyPress { get; set; }
    void DxTextEditor_KeyPress(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyPress?.Invoke();
        }
    }
    [Parameter]
    Action KeyUp { get; set; }
    void DxTextEditor_KeyUp(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyUp?.Invoke();
        }
    }
    [Parameter]
    Action Paste { get; set; }
    void DxTextEditor_Paste(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Paste?.Invoke();
        }
    }
    [Parameter]
    Action ValueChanged { get; set; }
    void DxTextEditor_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter]
    Action ContentReady { get; set; }
    void DxTextEditor_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter]
    Action Disposing { get; set; }
    void DxTextEditor_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter]
    Action OptionChanged { get; set; }
    void DxTextEditor_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter]
    Action Initialized { get; set; }
    void DxTextEditor_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void Blur() {
        DevExpress.Ui.DxTextEditorInterop.Blur(dxTarget);
    }
    public void Focus() {
        DevExpress.Ui.DxTextEditorInterop.Focus(dxTarget);
    }
    public void Dispose() {
        DevExpress.Ui.DxTextEditorInterop.Change -= DxTextEditor_Change;
        DevExpress.Ui.DxTextEditorInterop.Copy -= DxTextEditor_Copy;
        DevExpress.Ui.DxTextEditorInterop.Cut -= DxTextEditor_Cut;
        DevExpress.Ui.DxTextEditorInterop.EnterKey -= DxTextEditor_EnterKey;
        DevExpress.Ui.DxTextEditorInterop.FocusIn -= DxTextEditor_FocusIn;
        DevExpress.Ui.DxTextEditorInterop.FocusOut -= DxTextEditor_FocusOut;
        DevExpress.Ui.DxTextEditorInterop.Input -= DxTextEditor_Input;
        DevExpress.Ui.DxTextEditorInterop.KeyDown -= DxTextEditor_KeyDown;
        DevExpress.Ui.DxTextEditorInterop.KeyPress -= DxTextEditor_KeyPress;
        DevExpress.Ui.DxTextEditorInterop.KeyUp -= DxTextEditor_KeyUp;
        DevExpress.Ui.DxTextEditorInterop.Paste -= DxTextEditor_Paste;
        //DevExpress.Ui.DxTextEditorInterop.ValueChanged -= DxTextEditor_ValueChanged;
        DevExpress.Ui.DxTextEditorInterop.ContentReady -= DxTextEditor_ContentReady;
        DevExpress.Ui.DxTextEditorInterop.Disposing -= DxTextEditor_Disposing;
        DevExpress.Ui.DxTextEditorInterop.OptionChanged -= DxTextEditor_OptionChanged;
        DevExpress.Ui.DxTextEditorInterop.Initialized -= DxTextEditor_Initialized;
    }
}
