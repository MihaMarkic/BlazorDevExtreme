@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDeferRenderingOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDeferRendering() : base("DxDeferRendering") { }
	protected override DevExpress.Ui.DxDeferRenderingOptions CreateOptions() {
		return new DevExpress.Ui.DxDeferRenderingOptions {
			animation = animation,
			renderWhen = renderWhen,
			showLoadIndicator = showLoadIndicator,
			staggerItemSelector = staggerItemSelector,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onRenderedEnabled = onRenderedEnabled,
			onShownEnabled = onShownEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxDeferRenderingOptions options) {
		return DevExpress.Ui.DxDeferRenderingInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetAnimationOption(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetAnimationOption(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object renderWhen;
	[Parameter]
	object RenderWhen {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetRenderWhenOption(dxTarget).Result : renderWhen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetRenderWhenOption(dxTarget, value);
			} else {
				this.renderWhen = value;
			}
		}
	}
	bool? showLoadIndicator;
	[Parameter]
	bool? ShowLoadIndicator {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetShowLoadIndicatorOption(dxTarget).Result : showLoadIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetShowLoadIndicatorOption(dxTarget, value);
			} else {
				this.showLoadIndicator = value;
			}
		}
	}
	string staggerItemSelector;
	[Parameter]
	string StaggerItemSelector {
		get => isInitialized ? (string)DevExpress.Ui.DxDeferRenderingInterop.GetStaggerItemSelectorOption(dxTarget).Result : staggerItemSelector;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetStaggerItemSelectorOption(dxTarget, value);
			} else {
				this.staggerItemSelector = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxDeferRenderingInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxDeferRenderingInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDeferRenderingInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDeferRenderingInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onRenderedEnabled;
	[Parameter]
	bool? OnRenderedEnabled {
		get => onRenderedEnabled;
		set => this.onRenderedEnabled = value;
	}
	bool? onShownEnabled;
	[Parameter]
	bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDeferRenderingInterop.Rendered += DxDeferRendering_Rendered;
		DevExpress.Ui.DxDeferRenderingInterop.Shown += DxDeferRendering_Shown;
		DevExpress.Ui.DxDeferRenderingInterop.ContentReady += DxDeferRendering_ContentReady;
		DevExpress.Ui.DxDeferRenderingInterop.Disposing += DxDeferRendering_Disposing;
		DevExpress.Ui.DxDeferRenderingInterop.OptionChanged += DxDeferRendering_OptionChanged;
		DevExpress.Ui.DxDeferRenderingInterop.Initialized += DxDeferRendering_Initialized;
	}
	[Parameter]
	Action Rendered { get; set; }
	void DxDeferRendering_Rendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Rendered?.Invoke();
		}
	}
	[Parameter]
	Action Shown { get; set; }
	void DxDeferRendering_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxDeferRendering_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxDeferRendering_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxDeferRendering_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxDeferRendering_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxDeferRenderingInterop.Rendered -= DxDeferRendering_Rendered;
		DevExpress.Ui.DxDeferRenderingInterop.Shown -= DxDeferRendering_Shown;
		DevExpress.Ui.DxDeferRenderingInterop.ContentReady -= DxDeferRendering_ContentReady;
		DevExpress.Ui.DxDeferRenderingInterop.Disposing -= DxDeferRendering_Disposing;
		DevExpress.Ui.DxDeferRenderingInterop.OptionChanged -= DxDeferRendering_OptionChanged;
		DevExpress.Ui.DxDeferRenderingInterop.Initialized -= DxDeferRendering_Initialized;
	}
}
