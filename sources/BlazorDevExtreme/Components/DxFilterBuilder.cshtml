@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxFilterBuilderOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxFilterBuilder() : base("DxFilterBuilder") { }
	protected override DevExpress.Ui.DxFilterBuilderOptions CreateOptions() {
		return new DevExpress.Ui.DxFilterBuilderOptions {
			allowHierarchicalFields = allowHierarchicalFields,
			customOperations = customOperations,
			fields = fields,
			filterOperationDescriptions = filterOperationDescriptions,
			groupOperationDescriptions = groupOperationDescriptions,
			groupOperations = groupOperations,
			maxGroupLevel = maxGroupLevel,
			value = value,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onEditorPreparedEnabled = onEditorPreparedEnabled,
			onEditorPreparingEnabled = onEditorPreparingEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxFilterBuilderOptions options) {
		return DevExpress.Ui.DxFilterBuilderInterop.Init(dxTarget, options);
	}
	bool? allowHierarchicalFields;
	[Parameter]
	bool? AllowHierarchicalFields {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetAllowHierarchicalFieldsOption(dxTarget).Result : allowHierarchicalFields;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetAllowHierarchicalFieldsOption(dxTarget, value);
			} else {
				this.allowHierarchicalFields = value;
			}
		}
	}
	object customOperations;
	[Parameter]
	object CustomOperations {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetCustomOperationsOption(dxTarget).Result : customOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetCustomOperationsOption(dxTarget, value);
			} else {
				this.customOperations = value;
			}
		}
	}
	object fields;
	[Parameter]
	object Fields {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetFieldsOption(dxTarget).Result : fields;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetFieldsOption(dxTarget, value);
			} else {
				this.fields = value;
			}
		}
	}
	object filterOperationDescriptions;
	[Parameter]
	object FilterOperationDescriptions {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetFilterOperationDescriptionsOption(dxTarget).Result : filterOperationDescriptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetFilterOperationDescriptionsOption(dxTarget, value);
			} else {
				this.filterOperationDescriptions = value;
			}
		}
	}
	object groupOperationDescriptions;
	[Parameter]
	object GroupOperationDescriptions {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetGroupOperationDescriptionsOption(dxTarget).Result : groupOperationDescriptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetGroupOperationDescriptionsOption(dxTarget, value);
			} else {
				this.groupOperationDescriptions = value;
			}
		}
	}
	object groupOperations;
	[Parameter]
	object GroupOperations {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetGroupOperationsOption(dxTarget).Result : groupOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetGroupOperationsOption(dxTarget, value);
			} else {
				this.groupOperations = value;
			}
		}
	}
	float? maxGroupLevel;
	[Parameter]
	float? MaxGroupLevel {
		get => isInitialized ? (float?)DevExpress.Ui.DxFilterBuilderInterop.GetMaxGroupLevelOption(dxTarget).Result : maxGroupLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetMaxGroupLevelOption(dxTarget, value);
			} else {
				this.maxGroupLevel = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxFilterBuilderInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxFilterBuilderInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxFilterBuilderInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFilterBuilderInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onEditorPreparedEnabled;
	[Parameter]
	bool? OnEditorPreparedEnabled {
		get => onEditorPreparedEnabled;
		set => this.onEditorPreparedEnabled = value;
	}
	bool? onEditorPreparingEnabled;
	[Parameter]
	bool? OnEditorPreparingEnabled {
		get => onEditorPreparingEnabled;
		set => this.onEditorPreparingEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFilterBuilderInterop.EditorPrepared += DxFilterBuilder_EditorPrepared;
		DevExpress.Ui.DxFilterBuilderInterop.EditorPreparing += DxFilterBuilder_EditorPreparing;
		DevExpress.Ui.DxFilterBuilderInterop.ValueChanged += DxFilterBuilder_ValueChanged;
		DevExpress.Ui.DxFilterBuilderInterop.ContentReady += DxFilterBuilder_ContentReady;
		DevExpress.Ui.DxFilterBuilderInterop.Disposing += DxFilterBuilder_Disposing;
		DevExpress.Ui.DxFilterBuilderInterop.OptionChanged += DxFilterBuilder_OptionChanged;
		DevExpress.Ui.DxFilterBuilderInterop.Initialized += DxFilterBuilder_Initialized;
	}
	[Parameter]
	Action EditorPrepared { get; set; }
	void DxFilterBuilder_EditorPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPrepared?.Invoke();
		}
	}
	[Parameter]
	Action EditorPreparing { get; set; }
	void DxFilterBuilder_EditorPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPreparing?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxFilterBuilder_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxFilterBuilder_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxFilterBuilder_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxFilterBuilder_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxFilterBuilder_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetFilterExpression() {
		return DevExpress.Ui.DxFilterBuilderInterop.GetFilterExpression(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxFilterBuilderInterop.EditorPrepared -= DxFilterBuilder_EditorPrepared;
		DevExpress.Ui.DxFilterBuilderInterop.EditorPreparing -= DxFilterBuilder_EditorPreparing;
		DevExpress.Ui.DxFilterBuilderInterop.ValueChanged -= DxFilterBuilder_ValueChanged;
		DevExpress.Ui.DxFilterBuilderInterop.ContentReady -= DxFilterBuilder_ContentReady;
		DevExpress.Ui.DxFilterBuilderInterop.Disposing -= DxFilterBuilder_Disposing;
		DevExpress.Ui.DxFilterBuilderInterop.OptionChanged -= DxFilterBuilder_OptionChanged;
		DevExpress.Ui.DxFilterBuilderInterop.Initialized -= DxFilterBuilder_Initialized;
	}
}
