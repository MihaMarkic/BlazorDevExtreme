
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxValidationGroupOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxValidationGroup() : base("DxValidationGroup") { }
	protected override DevExpress.Ui.DxValidationGroupOptions CreateOptions() {
		return new DevExpress.Ui.DxValidationGroupOptions {
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Ui.DxValidationGroupOptions options) {
		return DevExpress.Ui.DxValidationGroupInterop.Init(dxTarget, options);
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxValidationGroupInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidationGroupInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxValidationGroupInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidationGroupInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxValidationGroupInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidationGroupInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxValidationGroupInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidationGroupInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxValidationGroupInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidationGroupInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Ui.DxValidationGroupInterop.Disposing += DxValidationGroup_Disposing;
		DevExpress.Ui.DxValidationGroupInterop.OptionChanged += DxValidationGroup_OptionChanged;
		DevExpress.Ui.DxValidationGroupInterop.Initialized += DxValidationGroup_Initialized;
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxValidationGroup_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxValidationGroup_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxValidationGroup_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Reset() {
		DevExpress.Ui.DxValidationGroupInterop.Reset(dxTarget);
	}
	public object Validate() {
		return DevExpress.Ui.DxValidationGroupInterop.Validate(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxValidationGroupInterop.Disposing -= DxValidationGroup_Disposing;
		DevExpress.Ui.DxValidationGroupInterop.OptionChanged -= DxValidationGroup_OptionChanged;
		DevExpress.Ui.DxValidationGroupInterop.Initialized -= DxValidationGroup_Initialized;
	}
}
