
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Charts.DxPolarChartOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxPolarChart() : base("DxPolarChart") { }
	protected override DevExpress.Viz.Charts.DxPolarChartOptions CreateOptions() {
		return new DevExpress.Viz.Charts.DxPolarChartOptions {
			adaptiveLayout = adaptiveLayout,
			argumentAxis = argumentAxis,
			barGroupPadding = barGroupPadding,
			barGroupWidth = barGroupWidth,
			barWidth = barWidth,
			commonAxisSettings = commonAxisSettings,
			commonSeriesSettings = commonSeriesSettings,
			containerBackgroundColor = containerBackgroundColor,
			dataPrepareSettings = dataPrepareSettings,
			equalBarWidth = equalBarWidth,
			legend = legend,
			negativesAsZeroes = negativesAsZeroes,
			resolveLabelOverlapping = resolveLabelOverlapping,
			series = series,
			seriesSelectionMode = seriesSelectionMode,
			seriesTemplate = seriesTemplate,
			tooltip = tooltip,
			useSpiderWeb = useSpiderWeb,
			valueAxis = valueAxis,
			animation = animation,
			customizeLabel = customizeLabel,
			customizePoint = customizePoint,
			dataSource = dataSource,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			pointSelectionMode = pointSelectionMode,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onArgumentAxisClickEnabled = onArgumentAxisClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSeriesClickEnabled = onSeriesClickEnabled,
			onSeriesHoverChangedEnabled = onSeriesHoverChangedEnabled,
			onSeriesSelectionChangedEnabled = onSeriesSelectionChangedEnabled,
			onDoneEnabled = onDoneEnabled,
			onPointClickEnabled = onPointClickEnabled,
			onPointHoverChangedEnabled = onPointHoverChangedEnabled,
			onPointSelectionChangedEnabled = onPointSelectionChangedEnabled,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Viz.Charts.DxPolarChartOptions options) {
		return DevExpress.Viz.DxPolarChartInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter] public
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetAdaptiveLayout(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetAdaptiveLayout(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object argumentAxis;
	[Parameter] public
	object ArgumentAxis {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetArgumentAxis(dxTarget).Result : argumentAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetArgumentAxis(dxTarget, value);
			} else {
				this.argumentAxis = value;
			}
		}
	}
	float? barGroupPadding;
	[Parameter] public
	float? BarGroupPadding {
		get => isInitialized ? (float?)DevExpress.Viz.DxPolarChartInterop.GetBarGroupPadding(dxTarget).Result : barGroupPadding;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarGroupPadding(dxTarget, value);
			} else {
				this.barGroupPadding = value;
			}
		}
	}
	float? barGroupWidth;
	[Parameter] public
	float? BarGroupWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxPolarChartInterop.GetBarGroupWidth(dxTarget).Result : barGroupWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarGroupWidth(dxTarget, value);
			} else {
				this.barGroupWidth = value;
			}
		}
	}
	float? barWidth;
	[Parameter] public
	float? BarWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxPolarChartInterop.GetBarWidth(dxTarget).Result : barWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarWidth(dxTarget, value);
			} else {
				this.barWidth = value;
			}
		}
	}
	object commonAxisSettings;
	[Parameter] public
	object CommonAxisSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCommonAxisSettings(dxTarget).Result : commonAxisSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCommonAxisSettings(dxTarget, value);
			} else {
				this.commonAxisSettings = value;
			}
		}
	}
	object commonSeriesSettings;
	[Parameter] public
	object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCommonSeriesSettings(dxTarget).Result : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCommonSeriesSettings(dxTarget, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter] public
	string ContainerBackgroundColor {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetContainerBackgroundColor(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object dataPrepareSettings;
	[Parameter] public
	object DataPrepareSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetDataPrepareSettings(dxTarget).Result : dataPrepareSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetDataPrepareSettings(dxTarget, value);
			} else {
				this.dataPrepareSettings = value;
			}
		}
	}
	bool? equalBarWidth;
	[Parameter] public
	bool? EqualBarWidth {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetEqualBarWidth(dxTarget).Result : equalBarWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetEqualBarWidth(dxTarget, value);
			} else {
				this.equalBarWidth = value;
			}
		}
	}
	object legend;
	[Parameter] public
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetLegend(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetLegend(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	bool? negativesAsZeroes;
	[Parameter] public
	bool? NegativesAsZeroes {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetNegativesAsZeroes(dxTarget).Result : negativesAsZeroes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetNegativesAsZeroes(dxTarget, value);
			} else {
				this.negativesAsZeroes = value;
			}
		}
	}
	string resolveLabelOverlapping;
	[Parameter] public
	string ResolveLabelOverlapping {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetResolveLabelOverlapping(dxTarget).Result : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetResolveLabelOverlapping(dxTarget, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	object series;
	[Parameter] public
	object Series {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSeries(dxTarget).Result : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeries(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	string seriesSelectionMode;
	[Parameter] public
	string SeriesSelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetSeriesSelectionMode(dxTarget).Result : seriesSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeriesSelectionMode(dxTarget, value);
			} else {
				this.seriesSelectionMode = value;
			}
		}
	}
	object seriesTemplate;
	[Parameter] public
	object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSeriesTemplate(dxTarget).Result : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeriesTemplate(dxTarget, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	object tooltip;
	[Parameter] public
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? useSpiderWeb;
	[Parameter] public
	bool? UseSpiderWeb {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetUseSpiderWeb(dxTarget).Result : useSpiderWeb;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetUseSpiderWeb(dxTarget, value);
			} else {
				this.useSpiderWeb = value;
			}
		}
	}
	object valueAxis;
	[Parameter] public
	object ValueAxis {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetValueAxis(dxTarget).Result : valueAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetValueAxis(dxTarget, value);
			} else {
				this.valueAxis = value;
			}
		}
	}
	object animation;
	[Parameter] public
	object Animation {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object customizeLabel;
	[Parameter] public
	object CustomizeLabel {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCustomizeLabel(dxTarget).Result : customizeLabel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCustomizeLabel(dxTarget, value);
			} else {
				this.customizeLabel = value;
			}
		}
	}
	object customizePoint;
	[Parameter] public
	object CustomizePoint {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCustomizePoint(dxTarget).Result : customizePoint;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCustomizePoint(dxTarget, value);
			} else {
				this.customizePoint = value;
			}
		}
	}
	object dataSource;
	[Parameter] public
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object palette;
	[Parameter] public
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetPalette(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetPalette(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter] public
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetPaletteExtensionMode(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetPaletteExtensionMode(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string pointSelectionMode;
	[Parameter] public
	string PointSelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetPointSelectionMode(dxTarget).Result : pointSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetPointSelectionMode(dxTarget, value);
			} else {
				this.pointSelectionMode = value;
			}
		}
	}
	object export;
	[Parameter] public
	object Export {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter] public
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetLoadingIndicator(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetLoadingIndicator(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter] public
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetMargin(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetMargin(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter] public
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetPathModified(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetPathModified(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter] public
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetRedrawOnResize(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetRedrawOnResize(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter] public
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxPolarChartInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter] public
	object Size {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSize(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSize(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter] public
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxPolarChartInterop.GetTheme(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetTheme(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter] public
	object Title {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter] public
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter] public
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter] public
	object Height {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter] public
	object Width {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onArgumentAxisClickEnabled;
	[Parameter] public
	bool? OnArgumentAxisClickEnabled {
		get => onArgumentAxisClickEnabled;
		set => this.onArgumentAxisClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter] public
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSeriesClickEnabled;
	[Parameter] public
	bool? OnSeriesClickEnabled {
		get => onSeriesClickEnabled;
		set => this.onSeriesClickEnabled = value;
	}
	bool? onSeriesHoverChangedEnabled;
	[Parameter] public
	bool? OnSeriesHoverChangedEnabled {
		get => onSeriesHoverChangedEnabled;
		set => this.onSeriesHoverChangedEnabled = value;
	}
	bool? onSeriesSelectionChangedEnabled;
	[Parameter] public
	bool? OnSeriesSelectionChangedEnabled {
		get => onSeriesSelectionChangedEnabled;
		set => this.onSeriesSelectionChangedEnabled = value;
	}
	bool? onDoneEnabled;
	[Parameter] public
	bool? OnDoneEnabled {
		get => onDoneEnabled;
		set => this.onDoneEnabled = value;
	}
	bool? onPointClickEnabled;
	[Parameter] public
	bool? OnPointClickEnabled {
		get => onPointClickEnabled;
		set => this.onPointClickEnabled = value;
	}
	bool? onPointHoverChangedEnabled;
	[Parameter] public
	bool? OnPointHoverChangedEnabled {
		get => onPointHoverChangedEnabled;
		set => this.onPointHoverChangedEnabled = value;
	}
	bool? onPointSelectionChangedEnabled;
	[Parameter] public
	bool? OnPointSelectionChangedEnabled {
		get => onPointSelectionChangedEnabled;
		set => this.onPointSelectionChangedEnabled = value;
	}
	bool? onTooltipHiddenEnabled;
	[Parameter] public
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter] public
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter] public
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter] public
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter] public
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter] public
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter] public
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter] public
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter] public
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter] public
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Viz.DxPolarChartInterop.ArgumentAxisClick += DxPolarChart_ArgumentAxisClick;
		DevExpress.Viz.DxPolarChartInterop.LegendClick += DxPolarChart_LegendClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesClick += DxPolarChart_SeriesClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesHoverChanged += DxPolarChart_SeriesHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.SeriesSelectionChanged += DxPolarChart_SeriesSelectionChanged;
		DevExpress.Viz.DxPolarChartInterop.Done += DxPolarChart_Done;
		DevExpress.Viz.DxPolarChartInterop.PointClick += DxPolarChart_PointClick;
		DevExpress.Viz.DxPolarChartInterop.PointHoverChanged += DxPolarChart_PointHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.PointSelectionChanged += DxPolarChart_PointSelectionChanged;
		DevExpress.Viz.DxPolarChartInterop.TooltipHidden += DxPolarChart_TooltipHidden;
		DevExpress.Viz.DxPolarChartInterop.TooltipShown += DxPolarChart_TooltipShown;
		DevExpress.Viz.DxPolarChartInterop.Drawn += DxPolarChart_Drawn;
		DevExpress.Viz.DxPolarChartInterop.Exported += DxPolarChart_Exported;
		DevExpress.Viz.DxPolarChartInterop.Exporting += DxPolarChart_Exporting;
		DevExpress.Viz.DxPolarChartInterop.FileSaving += DxPolarChart_FileSaving;
		DevExpress.Viz.DxPolarChartInterop.IncidentOccurred += DxPolarChart_IncidentOccurred;
		DevExpress.Viz.DxPolarChartInterop.Disposing += DxPolarChart_Disposing;
		DevExpress.Viz.DxPolarChartInterop.OptionChanged += DxPolarChart_OptionChanged;
		DevExpress.Viz.DxPolarChartInterop.Initialized += DxPolarChart_Initialized;
	}
	[Parameter] public
	Action ArgumentAxisClick { get; set; }
	void DxPolarChart_ArgumentAxisClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ArgumentAxisClick?.Invoke();
		}
	}
	[Parameter] public
	Action LegendClick { get; set; }
	void DxPolarChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter] public
	Action SeriesClick { get; set; }
	void DxPolarChart_SeriesClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesClick?.Invoke();
		}
	}
	[Parameter] public
	Action SeriesHoverChanged { get; set; }
	void DxPolarChart_SeriesHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesHoverChanged?.Invoke();
		}
	}
	[Parameter] public
	Action SeriesSelectionChanged { get; set; }
	void DxPolarChart_SeriesSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesSelectionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action Done { get; set; }
	void DxPolarChart_Done(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Done?.Invoke();
		}
	}
	[Parameter] public
	Action PointClick { get; set; }
	void DxPolarChart_PointClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointClick?.Invoke();
		}
	}
	[Parameter] public
	Action PointHoverChanged { get; set; }
	void DxPolarChart_PointHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointHoverChanged?.Invoke();
		}
	}
	[Parameter] public
	Action PointSelectionChanged { get; set; }
	void DxPolarChart_PointSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointSelectionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action TooltipHidden { get; set; }
	void DxPolarChart_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter] public
	Action TooltipShown { get; set; }
	void DxPolarChart_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter] public
	Action Drawn { get; set; }
	void DxPolarChart_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter] public
	Action Exported { get; set; }
	void DxPolarChart_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter] public
	Action Exporting { get; set; }
	void DxPolarChart_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter] public
	Action FileSaving { get; set; }
	void DxPolarChart_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter] public
	Action IncidentOccurred { get; set; }
	void DxPolarChart_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter] public
	Action Disposing { get; set; }
	void DxPolarChart_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter] public
	Action OptionChanged { get; set; }
	void DxPolarChart_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action Initialized { get; set; }
	void DxPolarChart_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.DxPolarChartInterop.ArgumentAxisClick -= DxPolarChart_ArgumentAxisClick;
		DevExpress.Viz.DxPolarChartInterop.LegendClick -= DxPolarChart_LegendClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesClick -= DxPolarChart_SeriesClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesHoverChanged -= DxPolarChart_SeriesHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.SeriesSelectionChanged -= DxPolarChart_SeriesSelectionChanged;
		DevExpress.Viz.DxPolarChartInterop.Done -= DxPolarChart_Done;
		DevExpress.Viz.DxPolarChartInterop.PointClick -= DxPolarChart_PointClick;
		DevExpress.Viz.DxPolarChartInterop.PointHoverChanged -= DxPolarChart_PointHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.PointSelectionChanged -= DxPolarChart_PointSelectionChanged;
		DevExpress.Viz.DxPolarChartInterop.TooltipHidden -= DxPolarChart_TooltipHidden;
		DevExpress.Viz.DxPolarChartInterop.TooltipShown -= DxPolarChart_TooltipShown;
		DevExpress.Viz.DxPolarChartInterop.Drawn -= DxPolarChart_Drawn;
		DevExpress.Viz.DxPolarChartInterop.Exported -= DxPolarChart_Exported;
		DevExpress.Viz.DxPolarChartInterop.Exporting -= DxPolarChart_Exporting;
		DevExpress.Viz.DxPolarChartInterop.FileSaving -= DxPolarChart_FileSaving;
		DevExpress.Viz.DxPolarChartInterop.IncidentOccurred -= DxPolarChart_IncidentOccurred;
		DevExpress.Viz.DxPolarChartInterop.Disposing -= DxPolarChart_Disposing;
		DevExpress.Viz.DxPolarChartInterop.OptionChanged -= DxPolarChart_OptionChanged;
		DevExpress.Viz.DxPolarChartInterop.Initialized -= DxPolarChart_Initialized;
	}
}
