
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxValidatorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxValidator() : base("DxValidator") { }
	protected override DevExpress.Ui.DxValidatorOptions CreateOptions() {
		return new DevExpress.Ui.DxValidatorOptions {
			adapter = adapter,
			name = name,
			validationGroup = validationGroup,
			validationRules = validationRules,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onValidatedEnabled = onValidatedEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxValidatorOptions options) {
		return DevExpress.Ui.DxValidatorInterop.Init(dxTarget, options);
	}
	object adapter;
	[Parameter]
	object Adapter {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetAdapter(dxTarget).Result : adapter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetAdapter(dxTarget, value);
			} else {
				this.adapter = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxValidatorInterop.GetName(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetName(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	string validationGroup;
	[Parameter]
	string ValidationGroup {
		get => isInitialized ? (string)DevExpress.Ui.DxValidatorInterop.GetValidationGroup(dxTarget).Result : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetValidationGroup(dxTarget, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	object validationRules;
	[Parameter]
	object ValidationRules {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetValidationRules(dxTarget).Result : validationRules;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetValidationRules(dxTarget, value);
			} else {
				this.validationRules = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxValidatorInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxValidatorInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxValidatorInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onValidatedEnabled;
	[Parameter]
	bool? OnValidatedEnabled {
		get => onValidatedEnabled;
		set => this.onValidatedEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxValidatorInterop.Validated += DxValidator_Validated;
		DevExpress.Ui.DxValidatorInterop.Disposing += DxValidator_Disposing;
		DevExpress.Ui.DxValidatorInterop.OptionChanged += DxValidator_OptionChanged;
		DevExpress.Ui.DxValidatorInterop.Initialized += DxValidator_Initialized;
	}
	[Parameter]
	Action Validated { get; set; }
	void DxValidator_Validated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Validated?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxValidator_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxValidator_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxValidator_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Focus() {
		DevExpress.Ui.DxValidatorInterop.Focus(dxTarget);
	}
	public void Reset() {
		DevExpress.Ui.DxValidatorInterop.Reset(dxTarget);
	}
	public object Validate() {
		return DevExpress.Ui.DxValidatorInterop.Validate(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxValidatorInterop.Validated -= DxValidator_Validated;
		DevExpress.Ui.DxValidatorInterop.Disposing -= DxValidator_Disposing;
		DevExpress.Ui.DxValidatorInterop.OptionChanged -= DxValidator_OptionChanged;
		DevExpress.Ui.DxValidatorInterop.Initialized -= DxValidator_Initialized;
	}
}
