@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxChartOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxChart() : base("DxChart") { }
	protected override DevExpress.Viz.DxChartOptions CreateOptions() {
		return new DevExpress.Viz.DxChartOptions {
			adjustOnZoom = adjustOnZoom,
			argumentAxis = argumentAxis,
			barGroupPadding = barGroupPadding,
			barGroupWidth = barGroupWidth,
			barWidth = barWidth,
			commonAxisSettings = commonAxisSettings,
			commonPaneSettings = commonPaneSettings,
			commonSeriesSettings = commonSeriesSettings,
			containerBackgroundColor = containerBackgroundColor,
			crosshair = crosshair,
			dataPrepareSettings = dataPrepareSettings,
			defaultPane = defaultPane,
			equalBarWidth = equalBarWidth,
			legend = legend,
			maxBubbleSize = maxBubbleSize,
			minBubbleSize = minBubbleSize,
			negativesAsZeroes = negativesAsZeroes,
			panes = panes,
			resolveLabelOverlapping = resolveLabelOverlapping,
			rotated = rotated,
			scrollBar = scrollBar,
			scrollingMode = scrollingMode,
			series = series,
			seriesSelectionMode = seriesSelectionMode,
			seriesTemplate = seriesTemplate,
			synchronizeMultiAxes = synchronizeMultiAxes,
			tooltip = tooltip,
			useAggregation = useAggregation,
			valueAxis = valueAxis,
			zoomAndPan = zoomAndPan,
			zoomingMode = zoomingMode,
			adaptiveLayout = adaptiveLayout,
			animation = animation,
			customizeLabel = customizeLabel,
			customizePoint = customizePoint,
			dataSource = dataSource,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			pointSelectionMode = pointSelectionMode,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onArgumentAxisClickEnabled = onArgumentAxisClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSeriesClickEnabled = onSeriesClickEnabled,
			onSeriesHoverChangedEnabled = onSeriesHoverChangedEnabled,
			onSeriesSelectionChangedEnabled = onSeriesSelectionChangedEnabled,
			onZoomEndEnabled = onZoomEndEnabled,
			onZoomStartEnabled = onZoomStartEnabled,
			onDoneEnabled = onDoneEnabled,
			onPointClickEnabled = onPointClickEnabled,
			onPointHoverChangedEnabled = onPointHoverChangedEnabled,
			onPointSelectionChangedEnabled = onPointSelectionChangedEnabled,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxChartOptions options) {
		return DevExpress.Viz.DxChartInterop.Init(dxTarget, options);
	}
	bool? adjustOnZoom;
	[Parameter]
	bool? AdjustOnZoom {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetAdjustOnZoomOption(dxTarget).Result : adjustOnZoom;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetAdjustOnZoomOption(dxTarget, value);
			} else {
				this.adjustOnZoom = value;
			}
		}
	}
	object argumentAxis;
	[Parameter]
	object ArgumentAxis {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetArgumentAxisOption(dxTarget).Result : argumentAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetArgumentAxisOption(dxTarget, value);
			} else {
				this.argumentAxis = value;
			}
		}
	}
	float? barGroupPadding;
	[Parameter]
	float? BarGroupPadding {
		get => isInitialized ? (float?)DevExpress.Viz.DxChartInterop.GetBarGroupPaddingOption(dxTarget).Result : barGroupPadding;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarGroupPaddingOption(dxTarget, value);
			} else {
				this.barGroupPadding = value;
			}
		}
	}
	float? barGroupWidth;
	[Parameter]
	float? BarGroupWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxChartInterop.GetBarGroupWidthOption(dxTarget).Result : barGroupWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarGroupWidthOption(dxTarget, value);
			} else {
				this.barGroupWidth = value;
			}
		}
	}
	float? barWidth;
	[Parameter]
	float? BarWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxChartInterop.GetBarWidthOption(dxTarget).Result : barWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarWidthOption(dxTarget, value);
			} else {
				this.barWidth = value;
			}
		}
	}
	object commonAxisSettings;
	[Parameter]
	object CommonAxisSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonAxisSettingsOption(dxTarget).Result : commonAxisSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonAxisSettingsOption(dxTarget, value);
			} else {
				this.commonAxisSettings = value;
			}
		}
	}
	object commonPaneSettings;
	[Parameter]
	object CommonPaneSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonPaneSettingsOption(dxTarget).Result : commonPaneSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonPaneSettingsOption(dxTarget, value);
			} else {
				this.commonPaneSettings = value;
			}
		}
	}
	object commonSeriesSettings;
	[Parameter]
	object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonSeriesSettingsOption(dxTarget).Result : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonSeriesSettingsOption(dxTarget, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetContainerBackgroundColorOption(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetContainerBackgroundColorOption(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object crosshair;
	[Parameter]
	object Crosshair {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCrosshairOption(dxTarget).Result : crosshair;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCrosshairOption(dxTarget, value);
			} else {
				this.crosshair = value;
			}
		}
	}
	object dataPrepareSettings;
	[Parameter]
	object DataPrepareSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetDataPrepareSettingsOption(dxTarget).Result : dataPrepareSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDataPrepareSettingsOption(dxTarget, value);
			} else {
				this.dataPrepareSettings = value;
			}
		}
	}
	string defaultPane;
	[Parameter]
	string DefaultPane {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetDefaultPaneOption(dxTarget).Result : defaultPane;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDefaultPaneOption(dxTarget, value);
			} else {
				this.defaultPane = value;
			}
		}
	}
	bool? equalBarWidth;
	[Parameter]
	bool? EqualBarWidth {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetEqualBarWidthOption(dxTarget).Result : equalBarWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetEqualBarWidthOption(dxTarget, value);
			} else {
				this.equalBarWidth = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetLegendOption(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetLegendOption(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? maxBubbleSize;
	[Parameter]
	float? MaxBubbleSize {
		get => isInitialized ? (float?)DevExpress.Viz.DxChartInterop.GetMaxBubbleSizeOption(dxTarget).Result : maxBubbleSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetMaxBubbleSizeOption(dxTarget, value);
			} else {
				this.maxBubbleSize = value;
			}
		}
	}
	float? minBubbleSize;
	[Parameter]
	float? MinBubbleSize {
		get => isInitialized ? (float?)DevExpress.Viz.DxChartInterop.GetMinBubbleSizeOption(dxTarget).Result : minBubbleSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetMinBubbleSizeOption(dxTarget, value);
			} else {
				this.minBubbleSize = value;
			}
		}
	}
	bool? negativesAsZeroes;
	[Parameter]
	bool? NegativesAsZeroes {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetNegativesAsZeroesOption(dxTarget).Result : negativesAsZeroes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetNegativesAsZeroesOption(dxTarget, value);
			} else {
				this.negativesAsZeroes = value;
			}
		}
	}
	object panes;
	[Parameter]
	object Panes {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetPanesOption(dxTarget).Result : panes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPanesOption(dxTarget, value);
			} else {
				this.panes = value;
			}
		}
	}
	string resolveLabelOverlapping;
	[Parameter]
	string ResolveLabelOverlapping {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetResolveLabelOverlappingOption(dxTarget).Result : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetResolveLabelOverlappingOption(dxTarget, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	bool? rotated;
	[Parameter]
	bool? Rotated {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetRotatedOption(dxTarget).Result : rotated;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetRotatedOption(dxTarget, value);
			} else {
				this.rotated = value;
			}
		}
	}
	object scrollBar;
	[Parameter]
	object ScrollBar {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetScrollBarOption(dxTarget).Result : scrollBar;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetScrollBarOption(dxTarget, value);
			} else {
				this.scrollBar = value;
			}
		}
	}
	string scrollingMode;
	[Parameter]
	string ScrollingMode {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetScrollingModeOption(dxTarget).Result : scrollingMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetScrollingModeOption(dxTarget, value);
			} else {
				this.scrollingMode = value;
			}
		}
	}
	object series;
	[Parameter]
	object Series {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSeriesOption(dxTarget).Result : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeriesOption(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	string seriesSelectionMode;
	[Parameter]
	string SeriesSelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetSeriesSelectionModeOption(dxTarget).Result : seriesSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeriesSelectionModeOption(dxTarget, value);
			} else {
				this.seriesSelectionMode = value;
			}
		}
	}
	object seriesTemplate;
	[Parameter]
	object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSeriesTemplateOption(dxTarget).Result : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeriesTemplateOption(dxTarget, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	bool? synchronizeMultiAxes;
	[Parameter]
	bool? SynchronizeMultiAxes {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetSynchronizeMultiAxesOption(dxTarget).Result : synchronizeMultiAxes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSynchronizeMultiAxesOption(dxTarget, value);
			} else {
				this.synchronizeMultiAxes = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? useAggregation;
	[Parameter]
	bool? UseAggregation {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetUseAggregationOption(dxTarget).Result : useAggregation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetUseAggregationOption(dxTarget, value);
			} else {
				this.useAggregation = value;
			}
		}
	}
	object valueAxis;
	[Parameter]
	object ValueAxis {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetValueAxisOption(dxTarget).Result : valueAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetValueAxisOption(dxTarget, value);
			} else {
				this.valueAxis = value;
			}
		}
	}
	object zoomAndPan;
	[Parameter]
	object ZoomAndPan {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetZoomAndPanOption(dxTarget).Result : zoomAndPan;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetZoomAndPanOption(dxTarget, value);
			} else {
				this.zoomAndPan = value;
			}
		}
	}
	string zoomingMode;
	[Parameter]
	string ZoomingMode {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetZoomingModeOption(dxTarget).Result : zoomingMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetZoomingModeOption(dxTarget, value);
			} else {
				this.zoomingMode = value;
			}
		}
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetAdaptiveLayoutOption(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetAdaptiveLayoutOption(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetAnimationOption(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetAnimationOption(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object customizeLabel;
	[Parameter]
	object CustomizeLabel {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCustomizeLabelOption(dxTarget).Result : customizeLabel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCustomizeLabelOption(dxTarget, value);
			} else {
				this.customizeLabel = value;
			}
		}
	}
	object customizePoint;
	[Parameter]
	object CustomizePoint {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCustomizePointOption(dxTarget).Result : customizePoint;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCustomizePointOption(dxTarget, value);
			} else {
				this.customizePoint = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetPaletteOption(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPaletteOption(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetPaletteExtensionModeOption(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPaletteExtensionModeOption(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string pointSelectionMode;
	[Parameter]
	string PointSelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetPointSelectionModeOption(dxTarget).Result : pointSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPointSelectionModeOption(dxTarget, value);
			} else {
				this.pointSelectionMode = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxChartInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxChartInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onArgumentAxisClickEnabled;
	[Parameter]
	bool? OnArgumentAxisClickEnabled {
		get => onArgumentAxisClickEnabled;
		set => this.onArgumentAxisClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSeriesClickEnabled;
	[Parameter]
	bool? OnSeriesClickEnabled {
		get => onSeriesClickEnabled;
		set => this.onSeriesClickEnabled = value;
	}
	bool? onSeriesHoverChangedEnabled;
	[Parameter]
	bool? OnSeriesHoverChangedEnabled {
		get => onSeriesHoverChangedEnabled;
		set => this.onSeriesHoverChangedEnabled = value;
	}
	bool? onSeriesSelectionChangedEnabled;
	[Parameter]
	bool? OnSeriesSelectionChangedEnabled {
		get => onSeriesSelectionChangedEnabled;
		set => this.onSeriesSelectionChangedEnabled = value;
	}
	bool? onZoomEndEnabled;
	[Parameter]
	bool? OnZoomEndEnabled {
		get => onZoomEndEnabled;
		set => this.onZoomEndEnabled = value;
	}
	bool? onZoomStartEnabled;
	[Parameter]
	bool? OnZoomStartEnabled {
		get => onZoomStartEnabled;
		set => this.onZoomStartEnabled = value;
	}
	bool? onDoneEnabled;
	[Parameter]
	bool? OnDoneEnabled {
		get => onDoneEnabled;
		set => this.onDoneEnabled = value;
	}
	bool? onPointClickEnabled;
	[Parameter]
	bool? OnPointClickEnabled {
		get => onPointClickEnabled;
		set => this.onPointClickEnabled = value;
	}
	bool? onPointHoverChangedEnabled;
	[Parameter]
	bool? OnPointHoverChangedEnabled {
		get => onPointHoverChangedEnabled;
		set => this.onPointHoverChangedEnabled = value;
	}
	bool? onPointSelectionChangedEnabled;
	[Parameter]
	bool? OnPointSelectionChangedEnabled {
		get => onPointSelectionChangedEnabled;
		set => this.onPointSelectionChangedEnabled = value;
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxChartInterop.ArgumentAxisClick += DxChart_ArgumentAxisClick;
		DevExpress.Viz.DxChartInterop.LegendClick += DxChart_LegendClick;
		DevExpress.Viz.DxChartInterop.SeriesClick += DxChart_SeriesClick;
		DevExpress.Viz.DxChartInterop.SeriesHoverChanged += DxChart_SeriesHoverChanged;
		DevExpress.Viz.DxChartInterop.SeriesSelectionChanged += DxChart_SeriesSelectionChanged;
		DevExpress.Viz.DxChartInterop.ZoomEnd += DxChart_ZoomEnd;
		DevExpress.Viz.DxChartInterop.ZoomStart += DxChart_ZoomStart;
		DevExpress.Viz.DxChartInterop.Done += DxChart_Done;
		DevExpress.Viz.DxChartInterop.PointClick += DxChart_PointClick;
		DevExpress.Viz.DxChartInterop.PointHoverChanged += DxChart_PointHoverChanged;
		DevExpress.Viz.DxChartInterop.PointSelectionChanged += DxChart_PointSelectionChanged;
		DevExpress.Viz.DxChartInterop.TooltipHidden += DxChart_TooltipHidden;
		DevExpress.Viz.DxChartInterop.TooltipShown += DxChart_TooltipShown;
		DevExpress.Viz.DxChartInterop.Drawn += DxChart_Drawn;
		DevExpress.Viz.DxChartInterop.Exported += DxChart_Exported;
		DevExpress.Viz.DxChartInterop.Exporting += DxChart_Exporting;
		DevExpress.Viz.DxChartInterop.FileSaving += DxChart_FileSaving;
		DevExpress.Viz.DxChartInterop.IncidentOccurred += DxChart_IncidentOccurred;
		DevExpress.Viz.DxChartInterop.Disposing += DxChart_Disposing;
		DevExpress.Viz.DxChartInterop.OptionChanged += DxChart_OptionChanged;
		DevExpress.Viz.DxChartInterop.Initialized += DxChart_Initialized;
	}
	[Parameter]
	Action ArgumentAxisClick { get; set; }
	void DxChart_ArgumentAxisClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ArgumentAxisClick?.Invoke();
		}
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesClick { get; set; }
	void DxChart_SeriesClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesHoverChanged { get; set; }
	void DxChart_SeriesHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action SeriesSelectionChanged { get; set; }
	void DxChart_SeriesSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesSelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ZoomEnd { get; set; }
	void DxChart_ZoomEnd(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ZoomEnd?.Invoke();
		}
	}
	[Parameter]
	Action ZoomStart { get; set; }
	void DxChart_ZoomStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ZoomStart?.Invoke();
		}
	}
	[Parameter]
	Action Done { get; set; }
	void DxChart_Done(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Done?.Invoke();
		}
	}
	[Parameter]
	Action PointClick { get; set; }
	void DxChart_PointClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointClick?.Invoke();
		}
	}
	[Parameter]
	Action PointHoverChanged { get; set; }
	void DxChart_PointHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action PointSelectionChanged { get; set; }
	void DxChart_PointSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointSelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void DxChart_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void DxChart_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxChart_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxChart_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxChart_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxChart_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxChart_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxChart_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxChart_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxChart_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetArgumentAxis() {
		return DevExpress.Viz.DxChartInterop.GetArgumentAxis(dxTarget).Result;
	}
	public object GetValueAxis() {
		return DevExpress.Viz.DxChartInterop.GetValueAxis(dxTarget).Result;
	}
	public object GetValueAxis(string name) {
		return DevExpress.Viz.DxChartInterop.GetValueAxis(dxTarget, name).Result;
	}
	public void ResetVisualRange() {
		DevExpress.Viz.DxChartInterop.ResetVisualRange(dxTarget);
	}
	public void ZoomArgument(object startValue, object endValue) {
		DevExpress.Viz.DxChartInterop.ZoomArgument(dxTarget, startValue, endValue);
	}
	public void Dispose() {
		DevExpress.Viz.DxChartInterop.ArgumentAxisClick -= DxChart_ArgumentAxisClick;
		DevExpress.Viz.DxChartInterop.LegendClick -= DxChart_LegendClick;
		DevExpress.Viz.DxChartInterop.SeriesClick -= DxChart_SeriesClick;
		DevExpress.Viz.DxChartInterop.SeriesHoverChanged -= DxChart_SeriesHoverChanged;
		DevExpress.Viz.DxChartInterop.SeriesSelectionChanged -= DxChart_SeriesSelectionChanged;
		DevExpress.Viz.DxChartInterop.ZoomEnd -= DxChart_ZoomEnd;
		DevExpress.Viz.DxChartInterop.ZoomStart -= DxChart_ZoomStart;
		DevExpress.Viz.DxChartInterop.Done -= DxChart_Done;
		DevExpress.Viz.DxChartInterop.PointClick -= DxChart_PointClick;
		DevExpress.Viz.DxChartInterop.PointHoverChanged -= DxChart_PointHoverChanged;
		DevExpress.Viz.DxChartInterop.PointSelectionChanged -= DxChart_PointSelectionChanged;
		DevExpress.Viz.DxChartInterop.TooltipHidden -= DxChart_TooltipHidden;
		DevExpress.Viz.DxChartInterop.TooltipShown -= DxChart_TooltipShown;
		DevExpress.Viz.DxChartInterop.Drawn -= DxChart_Drawn;
		DevExpress.Viz.DxChartInterop.Exported -= DxChart_Exported;
		DevExpress.Viz.DxChartInterop.Exporting -= DxChart_Exporting;
		DevExpress.Viz.DxChartInterop.FileSaving -= DxChart_FileSaving;
		DevExpress.Viz.DxChartInterop.IncidentOccurred -= DxChart_IncidentOccurred;
		DevExpress.Viz.DxChartInterop.Disposing -= DxChart_Disposing;
		DevExpress.Viz.DxChartInterop.OptionChanged -= DxChart_OptionChanged;
		DevExpress.Viz.DxChartInterop.Initialized -= DxChart_Initialized;
	}
}
