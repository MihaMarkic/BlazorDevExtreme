
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.GridBaseOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public GridBase() : base("GridBase") { }
    protected override DevExpress.Ui.GridBaseOptions CreateOptions() {
        return new DevExpress.Ui.GridBaseOptions {
            allowColumnReordering = allowColumnReordering,
            allowColumnResizing = allowColumnResizing,
            cacheEnabled = cacheEnabled,
            cellHintEnabled = cellHintEnabled,
            columnAutoWidth = columnAutoWidth,
            columnChooser = columnChooser,
            columnFixing = columnFixing,
            columnHidingEnabled = columnHidingEnabled,
            columnMinWidth = columnMinWidth,
            columnResizingMode = columnResizingMode,
            columns = columns,
            columnWidth = columnWidth,
            dataSource = dataSource,
            dateSerializationFormat = dateSerializationFormat,
            editing = editing,
            errorRowEnabled = errorRowEnabled,
            filterBuilder = filterBuilder,
            filterBuilderPopup = filterBuilderPopup,
            filterPanel = filterPanel,
            filterRow = filterRow,
            filterSyncEnabled = filterSyncEnabled,
            filterValue = filterValue,
            headerFilter = headerFilter,
            loadPanel = loadPanel,
            noDataText = noDataText,
            pager = pager,
            paging = paging,
            rowAlternationEnabled = rowAlternationEnabled,
            scrolling = scrolling,
            searchPanel = searchPanel,
            selectedRowKeys = selectedRowKeys,
            selection = selection,
            showBorders = showBorders,
            showColumnHeaders = showColumnHeaders,
            showColumnLines = showColumnLines,
            showRowLines = showRowLines,
            sorting = sorting,
            stateStoring = stateStoring,
            twoWayBindingEnabled = twoWayBindingEnabled,
            wordWrapEnabled = wordWrapEnabled,
            accessKey = accessKey,
            activeStateEnabled = activeStateEnabled,
            disabled = disabled,
            focusStateEnabled = focusStateEnabled,
            hint = hint,
            hoverStateEnabled = hoverStateEnabled,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            onAdaptiveDetailRowPreparingEnabled = onAdaptiveDetailRowPreparingEnabled,
            onDataErrorOccurredEnabled = onDataErrorOccurredEnabled,
            onInitNewRowEnabled = onInitNewRowEnabled,
            onKeyDownEnabled = onKeyDownEnabled,
            onRowCollapsedEnabled = onRowCollapsedEnabled,
            onRowCollapsingEnabled = onRowCollapsingEnabled,
            onRowExpandedEnabled = onRowExpandedEnabled,
            onRowExpandingEnabled = onRowExpandingEnabled,
            onRowInsertedEnabled = onRowInsertedEnabled,
            onRowInsertingEnabled = onRowInsertingEnabled,
            onRowRemovedEnabled = onRowRemovedEnabled,
            onRowRemovingEnabled = onRowRemovingEnabled,
            onRowUpdatedEnabled = onRowUpdatedEnabled,
            onRowUpdatingEnabled = onRowUpdatingEnabled,
            onRowValidatingEnabled = onRowValidatingEnabled,
            onSelectionChangedEnabled = onSelectionChangedEnabled,
            onToolbarPreparingEnabled = onToolbarPreparingEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override ValueTask<object> Init(DevExpress.Ui.GridBaseOptions options) {
        return DevExpress.Ui.GridBaseInterop.Init(dxTarget, options);
    }
    bool? allowColumnReordering;
    [Parameter] public
    bool? AllowColumnReordering {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetAllowColumnReordering(dxTarget).Result : allowColumnReordering;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetAllowColumnReordering(dxTarget, value);
            } else {
                this.allowColumnReordering = value;
            }
        }
    }
    bool? allowColumnResizing;
    [Parameter] public
    bool? AllowColumnResizing {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetAllowColumnResizing(dxTarget).Result : allowColumnResizing;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetAllowColumnResizing(dxTarget, value);
            } else {
                this.allowColumnResizing = value;
            }
        }
    }
    bool? cacheEnabled;
    [Parameter] public
    bool? CacheEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetCacheEnabled(dxTarget).Result : cacheEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetCacheEnabled(dxTarget, value);
            } else {
                this.cacheEnabled = value;
            }
        }
    }
    bool? cellHintEnabled;
    [Parameter] public
    bool? CellHintEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetCellHintEnabled(dxTarget).Result : cellHintEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetCellHintEnabled(dxTarget, value);
            } else {
                this.cellHintEnabled = value;
            }
        }
    }
    bool? columnAutoWidth;
    [Parameter] public
    bool? ColumnAutoWidth {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetColumnAutoWidth(dxTarget).Result : columnAutoWidth;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnAutoWidth(dxTarget, value);
            } else {
                this.columnAutoWidth = value;
            }
        }
    }
    object columnChooser;
    [Parameter] public
    object ColumnChooser {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetColumnChooser(dxTarget).Result : columnChooser;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnChooser(dxTarget, value);
            } else {
                this.columnChooser = value;
            }
        }
    }
    object columnFixing;
    [Parameter] public
    object ColumnFixing {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetColumnFixing(dxTarget).Result : columnFixing;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnFixing(dxTarget, value);
            } else {
                this.columnFixing = value;
            }
        }
    }
    bool? columnHidingEnabled;
    [Parameter] public
    bool? ColumnHidingEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetColumnHidingEnabled(dxTarget).Result : columnHidingEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnHidingEnabled(dxTarget, value);
            } else {
                this.columnHidingEnabled = value;
            }
        }
    }
    float? columnMinWidth;
    [Parameter] public
    float? ColumnMinWidth {
        get => isInitialized ? (float?)DevExpress.Ui.GridBaseInterop.GetColumnMinWidth(dxTarget).Result : columnMinWidth;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnMinWidth(dxTarget, value);
            } else {
                this.columnMinWidth = value;
            }
        }
    }
    string columnResizingMode;
    [Parameter] public
    string ColumnResizingMode {
        get => isInitialized ? (string)DevExpress.Ui.GridBaseInterop.GetColumnResizingMode(dxTarget).Result : columnResizingMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnResizingMode(dxTarget, value);
            } else {
                this.columnResizingMode = value;
            }
        }
    }
    object columns;
    [Parameter] public
    object Columns {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetColumns(dxTarget).Result : columns;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumns(dxTarget, value);
            } else {
                this.columns = value;
            }
        }
    }
    float? columnWidth;
    [Parameter] public
    float? ColumnWidth {
        get => isInitialized ? (float?)DevExpress.Ui.GridBaseInterop.GetColumnWidth(dxTarget).Result : columnWidth;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetColumnWidth(dxTarget, value);
            } else {
                this.columnWidth = value;
            }
        }
    }
    object dataSource;
    [Parameter] public
    object DataSource {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetDataSource(dxTarget).Result : dataSource;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetDataSource(dxTarget, value);
            } else {
                this.dataSource = value;
            }
        }
    }
    string dateSerializationFormat;
    [Parameter] public
    string DateSerializationFormat {
        get => isInitialized ? (string)DevExpress.Ui.GridBaseInterop.GetDateSerializationFormat(dxTarget).Result : dateSerializationFormat;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetDateSerializationFormat(dxTarget, value);
            } else {
                this.dateSerializationFormat = value;
            }
        }
    }
    object editing;
    [Parameter] public
    object Editing {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetEditing(dxTarget).Result : editing;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetEditing(dxTarget, value);
            } else {
                this.editing = value;
            }
        }
    }
    bool? errorRowEnabled;
    [Parameter] public
    bool? ErrorRowEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetErrorRowEnabled(dxTarget).Result : errorRowEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetErrorRowEnabled(dxTarget, value);
            } else {
                this.errorRowEnabled = value;
            }
        }
    }
    object filterBuilder;
    [Parameter] public
    object FilterBuilder {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterBuilder(dxTarget).Result : filterBuilder;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterBuilder(dxTarget, value);
            } else {
                this.filterBuilder = value;
            }
        }
    }
    object filterBuilderPopup;
    [Parameter] public
    object FilterBuilderPopup {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterBuilderPopup(dxTarget).Result : filterBuilderPopup;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterBuilderPopup(dxTarget, value);
            } else {
                this.filterBuilderPopup = value;
            }
        }
    }
    object filterPanel;
    [Parameter] public
    object FilterPanel {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterPanel(dxTarget).Result : filterPanel;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterPanel(dxTarget, value);
            } else {
                this.filterPanel = value;
            }
        }
    }
    object filterRow;
    [Parameter] public
    object FilterRow {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterRow(dxTarget).Result : filterRow;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterRow(dxTarget, value);
            } else {
                this.filterRow = value;
            }
        }
    }
    object filterSyncEnabled;
    [Parameter] public
    object FilterSyncEnabled {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterSyncEnabled(dxTarget).Result : filterSyncEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterSyncEnabled(dxTarget, value);
            } else {
                this.filterSyncEnabled = value;
            }
        }
    }
    object filterValue;
    [Parameter] public
    object FilterValue {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetFilterValue(dxTarget).Result : filterValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFilterValue(dxTarget, value);
            } else {
                this.filterValue = value;
            }
        }
    }
    object headerFilter;
    [Parameter] public
    object HeaderFilter {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetHeaderFilter(dxTarget).Result : headerFilter;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetHeaderFilter(dxTarget, value);
            } else {
                this.headerFilter = value;
            }
        }
    }
    object loadPanel;
    [Parameter] public
    object LoadPanel {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetLoadPanel(dxTarget).Result : loadPanel;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetLoadPanel(dxTarget, value);
            } else {
                this.loadPanel = value;
            }
        }
    }
    string noDataText;
    [Parameter] public
    string NoDataText {
        get => isInitialized ? (string)DevExpress.Ui.GridBaseInterop.GetNoDataText(dxTarget).Result : noDataText;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetNoDataText(dxTarget, value);
            } else {
                this.noDataText = value;
            }
        }
    }
    object pager;
    [Parameter] public
    object Pager {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetPager(dxTarget).Result : pager;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetPager(dxTarget, value);
            } else {
                this.pager = value;
            }
        }
    }
    object paging;
    [Parameter] public
    object Paging {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetPaging(dxTarget).Result : paging;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetPaging(dxTarget, value);
            } else {
                this.paging = value;
            }
        }
    }
    bool? rowAlternationEnabled;
    [Parameter] public
    bool? RowAlternationEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetRowAlternationEnabled(dxTarget).Result : rowAlternationEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetRowAlternationEnabled(dxTarget, value);
            } else {
                this.rowAlternationEnabled = value;
            }
        }
    }
    object scrolling;
    [Parameter] public
    object Scrolling {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetScrolling(dxTarget).Result : scrolling;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetScrolling(dxTarget, value);
            } else {
                this.scrolling = value;
            }
        }
    }
    object searchPanel;
    [Parameter] public
    object SearchPanel {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetSearchPanel(dxTarget).Result : searchPanel;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetSearchPanel(dxTarget, value);
            } else {
                this.searchPanel = value;
            }
        }
    }
    object selectedRowKeys;
    [Parameter] public
    object SelectedRowKeys {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetSelectedRowKeys(dxTarget).Result : selectedRowKeys;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetSelectedRowKeys(dxTarget, value);
            } else {
                this.selectedRowKeys = value;
            }
        }
    }
    object selection;
    [Parameter] public
    object Selection {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetSelection(dxTarget).Result : selection;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetSelection(dxTarget, value);
            } else {
                this.selection = value;
            }
        }
    }
    bool? showBorders;
    [Parameter] public
    bool? ShowBorders {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetShowBorders(dxTarget).Result : showBorders;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetShowBorders(dxTarget, value);
            } else {
                this.showBorders = value;
            }
        }
    }
    bool? showColumnHeaders;
    [Parameter] public
    bool? ShowColumnHeaders {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetShowColumnHeaders(dxTarget).Result : showColumnHeaders;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetShowColumnHeaders(dxTarget, value);
            } else {
                this.showColumnHeaders = value;
            }
        }
    }
    bool? showColumnLines;
    [Parameter] public
    bool? ShowColumnLines {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetShowColumnLines(dxTarget).Result : showColumnLines;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetShowColumnLines(dxTarget, value);
            } else {
                this.showColumnLines = value;
            }
        }
    }
    bool? showRowLines;
    [Parameter] public
    bool? ShowRowLines {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetShowRowLines(dxTarget).Result : showRowLines;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetShowRowLines(dxTarget, value);
            } else {
                this.showRowLines = value;
            }
        }
    }
    object sorting;
    [Parameter] public
    object Sorting {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetSorting(dxTarget).Result : sorting;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetSorting(dxTarget, value);
            } else {
                this.sorting = value;
            }
        }
    }
    object stateStoring;
    [Parameter] public
    object StateStoring {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetStateStoring(dxTarget).Result : stateStoring;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetStateStoring(dxTarget, value);
            } else {
                this.stateStoring = value;
            }
        }
    }
    bool? twoWayBindingEnabled;
    [Parameter] public
    bool? TwoWayBindingEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetTwoWayBindingEnabled(dxTarget).Result : twoWayBindingEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetTwoWayBindingEnabled(dxTarget, value);
            } else {
                this.twoWayBindingEnabled = value;
            }
        }
    }
    bool? wordWrapEnabled;
    [Parameter] public
    bool? WordWrapEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetWordWrapEnabled(dxTarget).Result : wordWrapEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetWordWrapEnabled(dxTarget, value);
            } else {
                this.wordWrapEnabled = value;
            }
        }
    }
    string accessKey;
    [Parameter] public
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.GridBaseInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter] public
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? disabled;
    [Parameter] public
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter] public
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    string hint;
    [Parameter] public
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.GridBaseInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter] public
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    float? tabIndex;
    [Parameter] public
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.GridBaseInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter] public
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter] public
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter] public
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter] public
    object Height {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter] public
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.GridBaseInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter] public
    object Width {
        get => isInitialized ? DevExpress.Ui.GridBaseInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.GridBaseInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    bool? onAdaptiveDetailRowPreparingEnabled;
    [Parameter] public
    bool? OnAdaptiveDetailRowPreparingEnabled {
        get => onAdaptiveDetailRowPreparingEnabled;
        set => this.onAdaptiveDetailRowPreparingEnabled = value;
    }
    bool? onDataErrorOccurredEnabled;
    [Parameter] public
    bool? OnDataErrorOccurredEnabled {
        get => onDataErrorOccurredEnabled;
        set => this.onDataErrorOccurredEnabled = value;
    }
    bool? onInitNewRowEnabled;
    [Parameter] public
    bool? OnInitNewRowEnabled {
        get => onInitNewRowEnabled;
        set => this.onInitNewRowEnabled = value;
    }
    bool? onKeyDownEnabled;
    [Parameter] public
    bool? OnKeyDownEnabled {
        get => onKeyDownEnabled;
        set => this.onKeyDownEnabled = value;
    }
    bool? onRowCollapsedEnabled;
    [Parameter] public
    bool? OnRowCollapsedEnabled {
        get => onRowCollapsedEnabled;
        set => this.onRowCollapsedEnabled = value;
    }
    bool? onRowCollapsingEnabled;
    [Parameter] public
    bool? OnRowCollapsingEnabled {
        get => onRowCollapsingEnabled;
        set => this.onRowCollapsingEnabled = value;
    }
    bool? onRowExpandedEnabled;
    [Parameter] public
    bool? OnRowExpandedEnabled {
        get => onRowExpandedEnabled;
        set => this.onRowExpandedEnabled = value;
    }
    bool? onRowExpandingEnabled;
    [Parameter] public
    bool? OnRowExpandingEnabled {
        get => onRowExpandingEnabled;
        set => this.onRowExpandingEnabled = value;
    }
    bool? onRowInsertedEnabled;
    [Parameter] public
    bool? OnRowInsertedEnabled {
        get => onRowInsertedEnabled;
        set => this.onRowInsertedEnabled = value;
    }
    bool? onRowInsertingEnabled;
    [Parameter] public
    bool? OnRowInsertingEnabled {
        get => onRowInsertingEnabled;
        set => this.onRowInsertingEnabled = value;
    }
    bool? onRowRemovedEnabled;
    [Parameter] public
    bool? OnRowRemovedEnabled {
        get => onRowRemovedEnabled;
        set => this.onRowRemovedEnabled = value;
    }
    bool? onRowRemovingEnabled;
    [Parameter] public
    bool? OnRowRemovingEnabled {
        get => onRowRemovingEnabled;
        set => this.onRowRemovingEnabled = value;
    }
    bool? onRowUpdatedEnabled;
    [Parameter] public
    bool? OnRowUpdatedEnabled {
        get => onRowUpdatedEnabled;
        set => this.onRowUpdatedEnabled = value;
    }
    bool? onRowUpdatingEnabled;
    [Parameter] public
    bool? OnRowUpdatingEnabled {
        get => onRowUpdatingEnabled;
        set => this.onRowUpdatingEnabled = value;
    }
    bool? onRowValidatingEnabled;
    [Parameter] public
    bool? OnRowValidatingEnabled {
        get => onRowValidatingEnabled;
        set => this.onRowValidatingEnabled = value;
    }
    bool? onSelectionChangedEnabled;
    [Parameter] public
    bool? OnSelectionChangedEnabled {
        get => onSelectionChangedEnabled;
        set => this.onSelectionChangedEnabled = value;
    }
    bool? onToolbarPreparingEnabled;
    [Parameter] public
    bool? OnToolbarPreparingEnabled {
        get => onToolbarPreparingEnabled;
        set => this.onToolbarPreparingEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter] public
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter] public
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter] public
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter] public
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DevExpress.Ui.GridBaseInterop.AdaptiveDetailRowPreparing += GridBase_AdaptiveDetailRowPreparing;
        DevExpress.Ui.GridBaseInterop.DataErrorOccurred += GridBase_DataErrorOccurred;
        DevExpress.Ui.GridBaseInterop.InitNewRow += GridBase_InitNewRow;
        DevExpress.Ui.GridBaseInterop.KeyDown += GridBase_KeyDown;
        DevExpress.Ui.GridBaseInterop.RowCollapsed += GridBase_RowCollapsed;
        DevExpress.Ui.GridBaseInterop.RowCollapsing += GridBase_RowCollapsing;
        DevExpress.Ui.GridBaseInterop.RowExpanded += GridBase_RowExpanded;
        DevExpress.Ui.GridBaseInterop.RowExpanding += GridBase_RowExpanding;
        DevExpress.Ui.GridBaseInterop.RowInserted += GridBase_RowInserted;
        DevExpress.Ui.GridBaseInterop.RowInserting += GridBase_RowInserting;
        DevExpress.Ui.GridBaseInterop.RowRemoved += GridBase_RowRemoved;
        DevExpress.Ui.GridBaseInterop.RowRemoving += GridBase_RowRemoving;
        DevExpress.Ui.GridBaseInterop.RowUpdated += GridBase_RowUpdated;
        DevExpress.Ui.GridBaseInterop.RowUpdating += GridBase_RowUpdating;
        DevExpress.Ui.GridBaseInterop.RowValidating += GridBase_RowValidating;
        DevExpress.Ui.GridBaseInterop.SelectionChanged += GridBase_SelectionChanged;
        DevExpress.Ui.GridBaseInterop.ToolbarPreparing += GridBase_ToolbarPreparing;
        DevExpress.Ui.GridBaseInterop.ContentReady += GridBase_ContentReady;
        DevExpress.Ui.GridBaseInterop.Disposing += GridBase_Disposing;
        DevExpress.Ui.GridBaseInterop.OptionChanged += GridBase_OptionChanged;
        DevExpress.Ui.GridBaseInterop.Initialized += GridBase_Initialized;
    }
    [Parameter] public
    Action AdaptiveDetailRowPreparing { get; set; }
    void GridBase_AdaptiveDetailRowPreparing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            AdaptiveDetailRowPreparing?.Invoke();
        }
    }
    [Parameter] public
    Action DataErrorOccurred { get; set; }
    void GridBase_DataErrorOccurred(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            DataErrorOccurred?.Invoke();
        }
    }
    [Parameter] public
    Action InitNewRow { get; set; }
    void GridBase_InitNewRow(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            InitNewRow?.Invoke();
        }
    }
    [Parameter] public
    Action KeyDown { get; set; }
    void GridBase_KeyDown(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyDown?.Invoke();
        }
    }
    [Parameter] public
    Action RowCollapsed { get; set; }
    void GridBase_RowCollapsed(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowCollapsed?.Invoke();
        }
    }
    [Parameter] public
    Action RowCollapsing { get; set; }
    void GridBase_RowCollapsing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowCollapsing?.Invoke();
        }
    }
    [Parameter] public
    Action RowExpanded { get; set; }
    void GridBase_RowExpanded(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowExpanded?.Invoke();
        }
    }
    [Parameter] public
    Action RowExpanding { get; set; }
    void GridBase_RowExpanding(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowExpanding?.Invoke();
        }
    }
    [Parameter] public
    Action RowInserted { get; set; }
    void GridBase_RowInserted(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowInserted?.Invoke();
        }
    }
    [Parameter] public
    Action RowInserting { get; set; }
    void GridBase_RowInserting(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowInserting?.Invoke();
        }
    }
    [Parameter] public
    Action RowRemoved { get; set; }
    void GridBase_RowRemoved(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowRemoved?.Invoke();
        }
    }
    [Parameter] public
    Action RowRemoving { get; set; }
    void GridBase_RowRemoving(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowRemoving?.Invoke();
        }
    }
    [Parameter] public
    Action RowUpdated { get; set; }
    void GridBase_RowUpdated(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowUpdated?.Invoke();
        }
    }
    [Parameter] public
    Action RowUpdating { get; set; }
    void GridBase_RowUpdating(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowUpdating?.Invoke();
        }
    }
    [Parameter] public
    Action RowValidating { get; set; }
    void GridBase_RowValidating(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            RowValidating?.Invoke();
        }
    }
    [Parameter] public
    Action SelectionChanged { get; set; }
    void GridBase_SelectionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            SelectionChanged?.Invoke();
        }
    }
    [Parameter] public
    Action ToolbarPreparing { get; set; }
    void GridBase_ToolbarPreparing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ToolbarPreparing?.Invoke();
        }
    }
    [Parameter] public
    Action ContentReady { get; set; }
    void GridBase_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter] public
    Action Disposing { get; set; }
    void GridBase_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter] public
    Action OptionChanged { get; set; }
    void GridBase_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter] public
    Action Initialized { get; set; }
    void GridBase_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void BeginCustomLoading(string messageText) {
        DevExpress.Ui.GridBaseInterop.BeginCustomLoading(dxTarget, messageText);
    }
    public object ByKey(object key) {
        return DevExpress.Ui.GridBaseInterop.ByKey(dxTarget, key).Result;
    }
    public void CancelEditData() {
        DevExpress.Ui.GridBaseInterop.CancelEditData(dxTarget);
    }
    public object CellValue(float rowIndex, string dataField) {
        return DevExpress.Ui.GridBaseInterop.CellValue(dxTarget, rowIndex, dataField).Result;
    }
    public void CellValue(float rowIndex, string dataField, object value) {
        DevExpress.Ui.GridBaseInterop.CellValue(dxTarget, rowIndex, dataField, value);
    }
    public object CellValue(float rowIndex, float visibleColumnIndex) {
        return DevExpress.Ui.GridBaseInterop.CellValue(dxTarget, rowIndex, visibleColumnIndex).Result;
    }
    public void CellValue(float rowIndex, float visibleColumnIndex, object value) {
        DevExpress.Ui.GridBaseInterop.CellValue(dxTarget, rowIndex, visibleColumnIndex, value);
    }
    public void ClearFilter() {
        DevExpress.Ui.GridBaseInterop.ClearFilter(dxTarget);
    }
    public void ClearFilter(string filterName) {
        DevExpress.Ui.GridBaseInterop.ClearFilter(dxTarget, filterName);
    }
    public void ClearSelection() {
        DevExpress.Ui.GridBaseInterop.ClearSelection(dxTarget);
    }
    public void ClearSorting() {
        DevExpress.Ui.GridBaseInterop.ClearSorting(dxTarget);
    }
    public void CloseEditCell() {
        DevExpress.Ui.GridBaseInterop.CloseEditCell(dxTarget);
    }
    public void CollapseAdaptiveDetailRow() {
        DevExpress.Ui.GridBaseInterop.CollapseAdaptiveDetailRow(dxTarget);
    }
    public float ColumnCount() {
        return DevExpress.Ui.GridBaseInterop.ColumnCount(dxTarget).Result;
    }
    public object ColumnOption(object id) {
        return DevExpress.Ui.GridBaseInterop.ColumnOption(dxTarget, id).Result;
    }
    public object ColumnOption(object id, string optionName) {
        return DevExpress.Ui.GridBaseInterop.ColumnOption(dxTarget, id, optionName).Result;
    }
    public void ColumnOption(object id, string optionName, object optionValue) {
        DevExpress.Ui.GridBaseInterop.ColumnOption(dxTarget, id, optionName, optionValue);
    }
    public void ColumnOption(object id, object options) {
        DevExpress.Ui.GridBaseInterop.ColumnOption(dxTarget, id, options);
    }
    public void DeleteColumn(object id) {
        DevExpress.Ui.GridBaseInterop.DeleteColumn(dxTarget, id);
    }
    public void DeleteRow(float rowIndex) {
        DevExpress.Ui.GridBaseInterop.DeleteRow(dxTarget, rowIndex);
    }
    public object DeselectAll() {
        return DevExpress.Ui.GridBaseInterop.DeselectAll(dxTarget).Result;
    }
    public object DeselectRows(object keys) {
        return DevExpress.Ui.GridBaseInterop.DeselectRows(dxTarget, keys).Result;
    }
    public void EditCell(float rowIndex, string dataField) {
        DevExpress.Ui.GridBaseInterop.EditCell(dxTarget, rowIndex, dataField);
    }
    public void EditCell(float rowIndex, float visibleColumnIndex) {
        DevExpress.Ui.GridBaseInterop.EditCell(dxTarget, rowIndex, visibleColumnIndex);
    }
    public void EditRow(float rowIndex) {
        DevExpress.Ui.GridBaseInterop.EditRow(dxTarget, rowIndex);
    }
    public void EndCustomLoading() {
        DevExpress.Ui.GridBaseInterop.EndCustomLoading(dxTarget);
    }
    public void ExpandAdaptiveDetailRow(object key) {
        DevExpress.Ui.GridBaseInterop.ExpandAdaptiveDetailRow(dxTarget, key);
    }
    public object Filter() {
        return DevExpress.Ui.GridBaseInterop.Filter(dxTarget).Result;
    }
    public void Filter(object filterExpr) {
        DevExpress.Ui.GridBaseInterop.Filter(dxTarget, filterExpr);
    }
    public void Focus() {
        DevExpress.Ui.GridBaseInterop.Focus(dxTarget);
    }
    public void Focus(object element) {
        DevExpress.Ui.GridBaseInterop.Focus(dxTarget, element);
    }

    public object GetCellElement(float rowIndex, string dataField) {
        return DevExpress.Ui.GridBaseInterop.GetCellElement(dxTarget, rowIndex, dataField).Result;
    }
    public object GetCellElement(float rowIndex, float visibleColumnIndex) {
        return DevExpress.Ui.GridBaseInterop.GetCellElement(dxTarget, rowIndex, visibleColumnIndex).Result;
    }
    public object GetCombinedFilter() {
        return DevExpress.Ui.GridBaseInterop.GetCombinedFilter(dxTarget).Result;
    }
    public object GetCombinedFilter(bool returnDataField) {
        return DevExpress.Ui.GridBaseInterop.GetCombinedFilter(dxTarget, returnDataField).Result;
    }
    public object GetDataSourceEx() {
        return DevExpress.Ui.GridBaseInterop.GetDataSourceEx(dxTarget).Result;
    }
    public object GetKeyByRowIndex(float rowIndex) {
        return DevExpress.Ui.GridBaseInterop.GetKeyByRowIndex(dxTarget, rowIndex).Result;
    }
    public object GetRowElement(float rowIndex) {
        return DevExpress.Ui.GridBaseInterop.GetRowElement(dxTarget, rowIndex).Result;
    }
    public float GetRowIndexByKey(object key) {
        return DevExpress.Ui.GridBaseInterop.GetRowIndexByKey(dxTarget, key).Result;
    }
    public object GetScrollable() {
        return DevExpress.Ui.GridBaseInterop.GetScrollable(dxTarget).Result;
    }
    public bool HasEditData() {
        return DevExpress.Ui.GridBaseInterop.HasEditData(dxTarget).Result;
    }
    public void HideColumnChooser() {
        DevExpress.Ui.GridBaseInterop.HideColumnChooser(dxTarget);
    }
    public void IsAdaptiveDetailRowExpanded(object key) {
        DevExpress.Ui.GridBaseInterop.IsAdaptiveDetailRowExpanded(dxTarget, key);
    }
    public bool IsRowSelected(object key) {
        return DevExpress.Ui.GridBaseInterop.IsRowSelected(dxTarget, key).Result;
    }
    public object KeyOf(object obj) {
        return DevExpress.Ui.GridBaseInterop.KeyOf(dxTarget, obj).Result;
    }
    public float PageCount() {
        return DevExpress.Ui.GridBaseInterop.PageCount(dxTarget).Result;
    }
    public float PageIndex() {
        return DevExpress.Ui.GridBaseInterop.PageIndex(dxTarget).Result;
    }
    public object PageIndex(float newIndex) {
        return DevExpress.Ui.GridBaseInterop.PageIndex(dxTarget, newIndex).Result;
    }
    public float PageSize() {
        return DevExpress.Ui.GridBaseInterop.PageSize(dxTarget).Result;
    }
    public void PageSize(float value) {
        DevExpress.Ui.GridBaseInterop.PageSize(dxTarget, value);
    }
    public object refresh() {
        return DevExpress.Ui.GridBaseInterop.Refresh(dxTarget).Result;
    }
    public void RepaintRows(object rowIndexes) {
        DevExpress.Ui.GridBaseInterop.RepaintRows(dxTarget, rowIndexes);
    }
    public object SaveEditData() {
        return DevExpress.Ui.GridBaseInterop.SaveEditData(dxTarget).Result;
    }
    public void SearchByText(string text) {
        DevExpress.Ui.GridBaseInterop.SearchByText(dxTarget, text);
    }
    public object SelectAll() {
        return DevExpress.Ui.GridBaseInterop.SelectAll(dxTarget).Result;
    }
    public object SelectRows(object keys, bool preserve) {
        return DevExpress.Ui.GridBaseInterop.SelectRows(dxTarget, keys, preserve).Result;
    }
    public object SelectRowsByIndexes(object indexes) {
        return DevExpress.Ui.GridBaseInterop.SelectRowsByIndexes(dxTarget, indexes).Result;
    }
    public void ShowColumnChooser() {
        DevExpress.Ui.GridBaseInterop.ShowColumnChooser(dxTarget);
    }
    public object State() {
        return DevExpress.Ui.GridBaseInterop.State(dxTarget).Result;
    }
    public void State(object state) {
        DevExpress.Ui.GridBaseInterop.State(dxTarget, state);
    }
    public void UndeleteRow(float rowIndex) {
        DevExpress.Ui.GridBaseInterop.UndeleteRow(dxTarget, rowIndex);
    }
    public void UpdateDimensions() {
        DevExpress.Ui.GridBaseInterop.UpdateDimensions(dxTarget);
    }
    public void Dispose() {
        DevExpress.Ui.GridBaseInterop.AdaptiveDetailRowPreparing -= GridBase_AdaptiveDetailRowPreparing;
        DevExpress.Ui.GridBaseInterop.DataErrorOccurred -= GridBase_DataErrorOccurred;
        DevExpress.Ui.GridBaseInterop.InitNewRow -= GridBase_InitNewRow;
        DevExpress.Ui.GridBaseInterop.KeyDown -= GridBase_KeyDown;
        DevExpress.Ui.GridBaseInterop.RowCollapsed -= GridBase_RowCollapsed;
        DevExpress.Ui.GridBaseInterop.RowCollapsing -= GridBase_RowCollapsing;
        DevExpress.Ui.GridBaseInterop.RowExpanded -= GridBase_RowExpanded;
        DevExpress.Ui.GridBaseInterop.RowExpanding -= GridBase_RowExpanding;
        DevExpress.Ui.GridBaseInterop.RowInserted -= GridBase_RowInserted;
        DevExpress.Ui.GridBaseInterop.RowInserting -= GridBase_RowInserting;
        DevExpress.Ui.GridBaseInterop.RowRemoved -= GridBase_RowRemoved;
        DevExpress.Ui.GridBaseInterop.RowRemoving -= GridBase_RowRemoving;
        DevExpress.Ui.GridBaseInterop.RowUpdated -= GridBase_RowUpdated;
        DevExpress.Ui.GridBaseInterop.RowUpdating -= GridBase_RowUpdating;
        DevExpress.Ui.GridBaseInterop.RowValidating -= GridBase_RowValidating;
        DevExpress.Ui.GridBaseInterop.SelectionChanged -= GridBase_SelectionChanged;
        DevExpress.Ui.GridBaseInterop.ToolbarPreparing -= GridBase_ToolbarPreparing;
        DevExpress.Ui.GridBaseInterop.ContentReady -= GridBase_ContentReady;
        DevExpress.Ui.GridBaseInterop.Disposing -= GridBase_Disposing;
        DevExpress.Ui.GridBaseInterop.OptionChanged -= GridBase_OptionChanged;
        DevExpress.Ui.GridBaseInterop.Initialized -= GridBase_Initialized;
    }
}
