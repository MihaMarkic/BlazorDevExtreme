@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxFormOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxForm() : base("DxForm") { }
	protected override DevExpress.Ui.DxFormOptions CreateOptions() {
		return new DevExpress.Ui.DxFormOptions {
			alignItemLabels = alignItemLabels,
			alignItemLabelsInAllGroups = alignItemLabelsInAllGroups,
			colCount = colCount,
			colCountByScreen = colCountByScreen,
			customizeItem = customizeItem,
			formData = formData,
			items = items,
			labelLocation = labelLocation,
			minColWidth = minColWidth,
			optionalMark = optionalMark,
			readOnly = readOnly,
			requiredMark = requiredMark,
			requiredMessage = requiredMessage,
			screenByWidth = screenByWidth,
			scrollingEnabled = scrollingEnabled,
			showColonAfterLabel = showColonAfterLabel,
			showOptionalMark = showOptionalMark,
			showRequiredMark = showRequiredMark,
			showValidationSummary = showValidationSummary,
			validationGroup = validationGroup,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onEditorEnterKeyEnabled = onEditorEnterKeyEnabled,
			onFieldDataChangedEnabled = onFieldDataChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxFormOptions options) {
		return DevExpress.Ui.DxFormInterop.Init(dxTarget, options);
	}
	bool? alignItemLabels;
	[Parameter]
	bool? AlignItemLabels {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetAlignItemLabelsOption(dxTarget).Result : alignItemLabels;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabelsOption(dxTarget, value);
			} else {
				this.alignItemLabels = value;
			}
		}
	}
	bool? alignItemLabelsInAllGroups;
	[Parameter]
	bool? AlignItemLabelsInAllGroups {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetAlignItemLabelsInAllGroupsOption(dxTarget).Result : alignItemLabelsInAllGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabelsInAllGroupsOption(dxTarget, value);
			} else {
				this.alignItemLabelsInAllGroups = value;
			}
		}
	}
	object colCount;
	[Parameter]
	object ColCount {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCountOption(dxTarget).Result : colCount;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCountOption(dxTarget, value);
			} else {
				this.colCount = value;
			}
		}
	}
	object colCountByScreen;
	[Parameter]
	object ColCountByScreen {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCountByScreenOption(dxTarget).Result : colCountByScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCountByScreenOption(dxTarget, value);
			} else {
				this.colCountByScreen = value;
			}
		}
	}
	object customizeItem;
	[Parameter]
	object CustomizeItem {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetCustomizeItemOption(dxTarget).Result : customizeItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetCustomizeItemOption(dxTarget, value);
			} else {
				this.customizeItem = value;
			}
		}
	}
	object formData;
	[Parameter]
	object FormData {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetFormDataOption(dxTarget).Result : formData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetFormDataOption(dxTarget, value);
			} else {
				this.formData = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	string labelLocation;
	[Parameter]
	string LabelLocation {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetLabelLocationOption(dxTarget).Result : labelLocation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetLabelLocationOption(dxTarget, value);
			} else {
				this.labelLocation = value;
			}
		}
	}
	float? minColWidth;
	[Parameter]
	float? MinColWidth {
		get => isInitialized ? (float?)DevExpress.Ui.DxFormInterop.GetMinColWidthOption(dxTarget).Result : minColWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetMinColWidthOption(dxTarget, value);
			} else {
				this.minColWidth = value;
			}
		}
	}
	string optionalMark;
	[Parameter]
	string OptionalMark {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetOptionalMarkOption(dxTarget).Result : optionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetOptionalMarkOption(dxTarget, value);
			} else {
				this.optionalMark = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	string requiredMark;
	[Parameter]
	string RequiredMark {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetRequiredMarkOption(dxTarget).Result : requiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMarkOption(dxTarget, value);
			} else {
				this.requiredMark = value;
			}
		}
	}
	string requiredMessage;
	[Parameter]
	string RequiredMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetRequiredMessageOption(dxTarget).Result : requiredMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMessageOption(dxTarget, value);
			} else {
				this.requiredMessage = value;
			}
		}
	}
	object screenByWidth;
	[Parameter]
	object ScreenByWidth {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetScreenByWidthOption(dxTarget).Result : screenByWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScreenByWidthOption(dxTarget, value);
			} else {
				this.screenByWidth = value;
			}
		}
	}
	bool? scrollingEnabled;
	[Parameter]
	bool? ScrollingEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetScrollingEnabledOption(dxTarget).Result : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScrollingEnabledOption(dxTarget, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	bool? showColonAfterLabel;
	[Parameter]
	bool? ShowColonAfterLabel {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetShowColonAfterLabelOption(dxTarget).Result : showColonAfterLabel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowColonAfterLabelOption(dxTarget, value);
			} else {
				this.showColonAfterLabel = value;
			}
		}
	}
	bool? showOptionalMark;
	[Parameter]
	bool? ShowOptionalMark {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetShowOptionalMarkOption(dxTarget).Result : showOptionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowOptionalMarkOption(dxTarget, value);
			} else {
				this.showOptionalMark = value;
			}
		}
	}
	bool? showRequiredMark;
	[Parameter]
	bool? ShowRequiredMark {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetShowRequiredMarkOption(dxTarget).Result : showRequiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowRequiredMarkOption(dxTarget, value);
			} else {
				this.showRequiredMark = value;
			}
		}
	}
	bool? showValidationSummary;
	[Parameter]
	bool? ShowValidationSummary {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetShowValidationSummaryOption(dxTarget).Result : showValidationSummary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowValidationSummaryOption(dxTarget, value);
			} else {
				this.showValidationSummary = value;
			}
		}
	}
	string validationGroup;
	[Parameter]
	string ValidationGroup {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetValidationGroupOption(dxTarget).Result : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetValidationGroupOption(dxTarget, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxFormInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxFormInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFormInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onEditorEnterKeyEnabled;
	[Parameter]
	bool? OnEditorEnterKeyEnabled {
		get => onEditorEnterKeyEnabled;
		set => this.onEditorEnterKeyEnabled = value;
	}
	bool? onFieldDataChangedEnabled;
	[Parameter]
	bool? OnFieldDataChangedEnabled {
		get => onFieldDataChangedEnabled;
		set => this.onFieldDataChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFormInterop.EditorEnterKey += DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged += DxForm_FieldDataChanged;
		DevExpress.Ui.DxFormInterop.ContentReady += DxForm_ContentReady;
		DevExpress.Ui.DxFormInterop.Disposing += DxForm_Disposing;
		DevExpress.Ui.DxFormInterop.OptionChanged += DxForm_OptionChanged;
		DevExpress.Ui.DxFormInterop.Initialized += DxForm_Initialized;
	}
	[Parameter]
	Action EditorEnterKey { get; set; }
	void DxForm_EditorEnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorEnterKey?.Invoke();
		}
	}
	[Parameter]
	Action FieldDataChanged { get; set; }
	void DxForm_FieldDataChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FieldDataChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxForm_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxForm_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxForm_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxForm_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetButton(string name) {
		return DevExpress.Ui.DxFormInterop.GetButton(dxTarget, name).Result;
	}
	public object GetEditor(string dataField) {
		return DevExpress.Ui.DxFormInterop.GetEditor(dxTarget, dataField).Result;
	}
	public object ItemOption(string id) {
		return DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id).Result;
	}
	public void ItemOption(string id, string option, object value) {
		DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id, option, value);
	}
	public void ItemOption(string id, object options) {
		DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id, options);
	}
	public void ResetValues() {
		DevExpress.Ui.DxFormInterop.ResetValues(dxTarget);
	}
	public void UpdateData(object data) {
		DevExpress.Ui.DxFormInterop.UpdateData(dxTarget, data);
	}
	public void UpdateData(string dataField, object value) {
		DevExpress.Ui.DxFormInterop.UpdateData(dxTarget, dataField, value);
	}
	public object UpdateDimensions() {
		return DevExpress.Ui.DxFormInterop.UpdateDimensions(dxTarget).Result;
	}
	public object Validate() {
		return DevExpress.Ui.DxFormInterop.Validate(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxFormInterop.EditorEnterKey -= DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged -= DxForm_FieldDataChanged;
		DevExpress.Ui.DxFormInterop.ContentReady -= DxForm_ContentReady;
		DevExpress.Ui.DxFormInterop.Disposing -= DxForm_Disposing;
		DevExpress.Ui.DxFormInterop.OptionChanged -= DxForm_OptionChanged;
		DevExpress.Ui.DxFormInterop.Initialized -= DxForm_Initialized;
	}
}
