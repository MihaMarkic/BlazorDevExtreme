
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Sparklines.DxBulletOptions>

<div id="@Id" @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxBullet() : base("DxBullet") { }
	protected override DevExpress.Viz.Sparklines.DxBulletOptions CreateOptions() {
		return new DevExpress.Viz.Sparklines.DxBulletOptions {
			color = color,
			endScaleValue = endScaleValue,
			showTarget = showTarget,
			showZeroLevel = showZeroLevel,
			startScaleValue = startScaleValue,
			target = target,
			targetColor = targetColor,
			targetWidth = targetWidth,
			value = value,
			tooltip = tooltip,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Sparklines.DxBulletOptions options) {
		return DevExpress.Viz.DxBulletInterop.Init(dxTarget, options);
	}
	string color;
	[Parameter]
	string Color {
		get => isInitialized ? (string)DevExpress.Viz.DxBulletInterop.GetColor(dxTarget).Result : color;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetColor(dxTarget, value);
			} else {
				this.color = value;
			}
		}
	}
	float? endScaleValue;
	[Parameter]
	float? EndScaleValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxBulletInterop.GetEndScaleValue(dxTarget).Result : endScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetEndScaleValue(dxTarget, value);
			} else {
				this.endScaleValue = value;
			}
		}
	}
	bool? showTarget;
	[Parameter]
	bool? ShowTarget {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBulletInterop.GetShowTarget(dxTarget).Result : showTarget;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowTarget(dxTarget, value);
			} else {
				this.showTarget = value;
			}
		}
	}
	bool? showZeroLevel;
	[Parameter]
	bool? ShowZeroLevel {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBulletInterop.GetShowZeroLevel(dxTarget).Result : showZeroLevel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowZeroLevel(dxTarget, value);
			} else {
				this.showZeroLevel = value;
			}
		}
	}
	float? startScaleValue;
	[Parameter]
	float? StartScaleValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxBulletInterop.GetStartScaleValue(dxTarget).Result : startScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetStartScaleValue(dxTarget, value);
			} else {
				this.startScaleValue = value;
			}
		}
	}
	float? target;
	[Parameter]
	float? Target {
		get => isInitialized ? (float?)DevExpress.Viz.DxBulletInterop.GetTarget(dxTarget).Result : target;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTarget(dxTarget, value);
			} else {
				this.target = value;
			}
		}
	}
	string targetColor;
	[Parameter]
	string TargetColor {
		get => isInitialized ? (string)DevExpress.Viz.DxBulletInterop.GetTargetColor(dxTarget).Result : targetColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetColor(dxTarget, value);
			} else {
				this.targetColor = value;
			}
		}
	}
	float? targetWidth;
	[Parameter]
	float? TargetWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxBulletInterop.GetTargetWidth(dxTarget).Result : targetWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetWidth(dxTarget, value);
			} else {
				this.targetWidth = value;
			}
		}
	}
	float? value;
	[Parameter]
	float? Value {
		get => isInitialized ? (float?)DevExpress.Viz.DxBulletInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetLoadingIndicator(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetLoadingIndicator(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetMargin(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetMargin(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBulletInterop.GetPathModified(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetPathModified(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBulletInterop.GetRedrawOnResize(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetRedrawOnResize(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxBulletInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetSize(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetSize(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxBulletInterop.GetTheme(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTheme(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxBulletInterop.TooltipHidden += DxBullet_TooltipHidden;
		DevExpress.Viz.DxBulletInterop.TooltipShown += DxBullet_TooltipShown;
		DevExpress.Viz.DxBulletInterop.Drawn += DxBullet_Drawn;
		DevExpress.Viz.DxBulletInterop.Exported += DxBullet_Exported;
		DevExpress.Viz.DxBulletInterop.Exporting += DxBullet_Exporting;
		DevExpress.Viz.DxBulletInterop.FileSaving += DxBullet_FileSaving;
		DevExpress.Viz.DxBulletInterop.IncidentOccurred += DxBullet_IncidentOccurred;
		DevExpress.Viz.DxBulletInterop.Disposing += DxBullet_Disposing;
		DevExpress.Viz.DxBulletInterop.OptionChanged += DxBullet_OptionChanged;
		DevExpress.Viz.DxBulletInterop.Initialized += DxBullet_Initialized;
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void DxBullet_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void DxBullet_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxBullet_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxBullet_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxBullet_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxBullet_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxBullet_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxBullet_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxBullet_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxBullet_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.DxBulletInterop.TooltipHidden -= DxBullet_TooltipHidden;
		DevExpress.Viz.DxBulletInterop.TooltipShown -= DxBullet_TooltipShown;
		DevExpress.Viz.DxBulletInterop.Drawn -= DxBullet_Drawn;
		DevExpress.Viz.DxBulletInterop.Exported -= DxBullet_Exported;
		DevExpress.Viz.DxBulletInterop.Exporting -= DxBullet_Exporting;
		DevExpress.Viz.DxBulletInterop.FileSaving -= DxBullet_FileSaving;
		DevExpress.Viz.DxBulletInterop.IncidentOccurred -= DxBullet_IncidentOccurred;
		DevExpress.Viz.DxBulletInterop.Disposing -= DxBullet_Disposing;
		DevExpress.Viz.DxBulletInterop.OptionChanged -= DxBullet_OptionChanged;
		DevExpress.Viz.DxBulletInterop.Initialized -= DxBullet_Initialized;
	}
}
