
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxSlideOutOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSlideOut() : base("DxSlideOut") { }
	protected override DevExpress.Ui.DxSlideOutOptions CreateOptions() {
		return new DevExpress.Ui.DxSlideOutOptions {
			activeStateEnabled = activeStateEnabled,
			contentTemplate = contentTemplate,
			menuGrouped = menuGrouped,
			menuGroupTemplate = menuGroupTemplate,
			menuItemTemplate = menuItemTemplate,
			menuPosition = menuPosition,
			menuVisible = menuVisible,
			selectedIndex = selectedIndex,
			swipeEnabled = swipeEnabled,
			dataSource = dataSource,
			itemHoldTimeout = itemHoldTimeout,
			items = items,
			itemTemplate = itemTemplate,
			keyExpr = keyExpr,
			noDataText = noDataText,
			selectedItem = selectedItem,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			accessKey = accessKey,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onMenuGroupRenderedEnabled = onMenuGroupRenderedEnabled,
			onMenuItemRenderedEnabled = onMenuItemRenderedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemRenderedEnabled = onItemRenderedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxSlideOutOptions options) {
		return DevExpress.Ui.DxSlideOutInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object contentTemplate;
	[Parameter]
	object ContentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetContentTemplate(dxTarget).Result : contentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetContentTemplate(dxTarget, value);
			} else {
				this.contentTemplate = value;
			}
		}
	}
	bool? menuGrouped;
	[Parameter]
	bool? MenuGrouped {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetMenuGrouped(dxTarget).Result : menuGrouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetMenuGrouped(dxTarget, value);
			} else {
				this.menuGrouped = value;
			}
		}
	}
	object menuGroupTemplate;
	[Parameter]
	object MenuGroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetMenuGroupTemplate(dxTarget).Result : menuGroupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetMenuGroupTemplate(dxTarget, value);
			} else {
				this.menuGroupTemplate = value;
			}
		}
	}
	object menuItemTemplate;
	[Parameter]
	object MenuItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetMenuItemTemplate(dxTarget).Result : menuItemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetMenuItemTemplate(dxTarget, value);
			} else {
				this.menuItemTemplate = value;
			}
		}
	}
	string menuPosition;
	[Parameter]
	string MenuPosition {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutInterop.GetMenuPosition(dxTarget).Result : menuPosition;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetMenuPosition(dxTarget, value);
			} else {
				this.menuPosition = value;
			}
		}
	}
	bool? menuVisible;
	[Parameter]
	bool? MenuVisible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetMenuVisible(dxTarget).Result : menuVisible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetMenuVisible(dxTarget, value);
			} else {
				this.menuVisible = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxSlideOutInterop.GetSelectedIndex(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	bool? swipeEnabled;
	[Parameter]
	bool? SwipeEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetSwipeEnabled(dxTarget).Result : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetSwipeEnabled(dxTarget, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	float? itemHoldTimeout;
	[Parameter]
	float? ItemHoldTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxSlideOutInterop.GetItemHoldTimeout(dxTarget).Result : itemHoldTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetItemHoldTimeout(dxTarget, value);
			} else {
				this.itemHoldTimeout = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetItems(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetItemTemplate(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetKeyExpr(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetKeyExpr(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutInterop.GetNoDataText(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetNoDataText(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetSelectedItem(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetSelectedItem(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetSelectedItemKeys(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetSelectedItemKeys(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetSelectedItems(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetSelectedItems(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxSlideOutInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxSlideOutInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxSlideOutInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxSlideOutInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSlideOutInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onMenuGroupRenderedEnabled;
	[Parameter]
	bool? OnMenuGroupRenderedEnabled {
		get => onMenuGroupRenderedEnabled;
		set => this.onMenuGroupRenderedEnabled = value;
	}
	bool? onMenuItemRenderedEnabled;
	[Parameter]
	bool? OnMenuItemRenderedEnabled {
		get => onMenuItemRenderedEnabled;
		set => this.onMenuItemRenderedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemRenderedEnabled;
	[Parameter]
	bool? OnItemRenderedEnabled {
		get => onItemRenderedEnabled;
		set => this.onItemRenderedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSlideOutInterop.MenuGroupRendered += DxSlideOut_MenuGroupRendered;
		DevExpress.Ui.DxSlideOutInterop.MenuItemRendered += DxSlideOut_MenuItemRendered;
		DevExpress.Ui.DxSlideOutInterop.ItemClick += DxSlideOut_ItemClick;
		DevExpress.Ui.DxSlideOutInterop.ItemContextMenu += DxSlideOut_ItemContextMenu;
		DevExpress.Ui.DxSlideOutInterop.ItemHold += DxSlideOut_ItemHold;
		DevExpress.Ui.DxSlideOutInterop.ItemRendered += DxSlideOut_ItemRendered;
		DevExpress.Ui.DxSlideOutInterop.SelectionChanged += DxSlideOut_SelectionChanged;
		DevExpress.Ui.DxSlideOutInterop.ContentReady += DxSlideOut_ContentReady;
		DevExpress.Ui.DxSlideOutInterop.Disposing += DxSlideOut_Disposing;
		DevExpress.Ui.DxSlideOutInterop.OptionChanged += DxSlideOut_OptionChanged;
		DevExpress.Ui.DxSlideOutInterop.Initialized += DxSlideOut_Initialized;
	}
	[Parameter]
	Action MenuGroupRendered { get; set; }
	void DxSlideOut_MenuGroupRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			MenuGroupRendered?.Invoke();
		}
	}
	[Parameter]
	Action MenuItemRendered { get; set; }
	void DxSlideOut_MenuItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			MenuItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxSlideOut_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxSlideOut_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxSlideOut_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemRendered { get; set; }
	void DxSlideOut_ItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxSlideOut_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxSlideOut_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxSlideOut_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxSlideOut_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxSlideOut_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object HideMenu() {
		return DevExpress.Ui.DxSlideOutInterop.HideMenu(dxTarget).Result;
	}
	public object ShowMenu() {
		return DevExpress.Ui.DxSlideOutInterop.ShowMenu(dxTarget).Result;
	}
	public object ToggleMenuVisibility(bool showing) {
		return DevExpress.Ui.DxSlideOutInterop.ToggleMenuVisibility(dxTarget, showing).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxSlideOutInterop.MenuGroupRendered -= DxSlideOut_MenuGroupRendered;
		DevExpress.Ui.DxSlideOutInterop.MenuItemRendered -= DxSlideOut_MenuItemRendered;
		DevExpress.Ui.DxSlideOutInterop.ItemClick -= DxSlideOut_ItemClick;
		DevExpress.Ui.DxSlideOutInterop.ItemContextMenu -= DxSlideOut_ItemContextMenu;
		DevExpress.Ui.DxSlideOutInterop.ItemHold -= DxSlideOut_ItemHold;
		DevExpress.Ui.DxSlideOutInterop.ItemRendered -= DxSlideOut_ItemRendered;
		DevExpress.Ui.DxSlideOutInterop.SelectionChanged -= DxSlideOut_SelectionChanged;
		DevExpress.Ui.DxSlideOutInterop.ContentReady -= DxSlideOut_ContentReady;
		DevExpress.Ui.DxSlideOutInterop.Disposing -= DxSlideOut_Disposing;
		DevExpress.Ui.DxSlideOutInterop.OptionChanged -= DxSlideOut_OptionChanged;
		DevExpress.Ui.DxSlideOutInterop.Initialized -= DxSlideOut_Initialized;
	}
}
