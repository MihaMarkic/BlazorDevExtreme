@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxLookupOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxLookup() : base("DxLookup") { }
	protected override DevExpress.Ui.DxLookupOptions CreateOptions() {
		return new DevExpress.Ui.DxLookupOptions {
			animation = animation,
			applyButtonText = applyButtonText,
			applyValueMode = applyValueMode,
			cancelButtonText = cancelButtonText,
			cleanSearchOnOpening = cleanSearchOnOpening,
			clearButtonText = clearButtonText,
			closeOnOutsideClick = closeOnOutsideClick,
			fieldTemplate = fieldTemplate,
			focusStateEnabled = focusStateEnabled,
			fullScreen = fullScreen,
			grouped = grouped,
			groupTemplate = groupTemplate,
			nextButtonText = nextButtonText,
			pageLoadingText = pageLoadingText,
			pageLoadMode = pageLoadMode,
			placeholder = placeholder,
			popupHeight = popupHeight,
			popupWidth = popupWidth,
			position = position,
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			pullRefreshEnabled = pullRefreshEnabled,
			refreshingText = refreshingText,
			searchEnabled = searchEnabled,
			searchPlaceholder = searchPlaceholder,
			shading = shading,
			showCancelButton = showCancelButton,
			showClearButton = showClearButton,
			showPopupTitle = showPopupTitle,
			title = title,
			titleTemplate = titleTemplate,
			useNativeScrolling = useNativeScrolling,
			usePopover = usePopover,
			displayValue = displayValue,
			minSearchLength = minSearchLength,
			noDataText = noDataText,
			searchExpr = searchExpr,
			searchMode = searchMode,
			searchTimeout = searchTimeout,
			selectedItem = selectedItem,
			showDataBeforeSearch = showDataBeforeSearch,
			value = value,
			valueChangeEvent = valueChangeEvent,
			acceptCustomValue = acceptCustomValue,
			activeStateEnabled = activeStateEnabled,
			deferRendering = deferRendering,
			dropDownButtonTemplate = dropDownButtonTemplate,
			opened = isOpened,
			openOnFieldClick = openOnFieldClick,
			showDropDownButton = showDropDownButton,
			maxLength = maxLength,
			mode = mode,
			hoverStateEnabled = hoverStateEnabled,
			inputAttr = inputAttr,
			mask = mask,
			maskChar = maskChar,
			maskInvalidMessage = maskInvalidMessage,
			maskRules = maskRules,
			name = name,
			showMaskMode = showMaskMode,
			spellcheck = spellcheck,
			stylingMode = stylingMode,
			text = text,
			useMaskedValue = useMaskedValue,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			dataSource = dataSource,
			displayExpr = displayExpr,
			items = items,
			itemTemplate = itemTemplate,
			valueExpr = valueExpr,
			onPageLoadingEnabled = onPageLoadingEnabled,
			onPullRefreshEnabled = onPullRefreshEnabled,
			onScrollEnabled = onScrollEnabled,
			onTitleRenderedEnabled = onTitleRenderedEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onClosedEnabled = onClosedEnabled,
			onOpenedEnabled = onOpenedEnabled,
			onChangeEnabled = onChangeEnabled,
			onCopyEnabled = onCopyEnabled,
			onCutEnabled = onCutEnabled,
			onEnterKeyEnabled = onEnterKeyEnabled,
			onFocusInEnabled = onFocusInEnabled,
			onFocusOutEnabled = onFocusOutEnabled,
			onInputEnabled = onInputEnabled,
			onKeyDownEnabled = onKeyDownEnabled,
			onKeyPressEnabled = onKeyPressEnabled,
			onKeyUpEnabled = onKeyUpEnabled,
			onPasteEnabled = onPasteEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxLookupOptions options) {
		return DevExpress.Ui.DxLookupInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetAnimationOption(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetAnimationOption(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string applyButtonText;
	[Parameter]
	string ApplyButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetApplyButtonTextOption(dxTarget).Result : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetApplyButtonTextOption(dxTarget, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetApplyValueModeOption(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetApplyValueModeOption(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	string cancelButtonText;
	[Parameter]
	string CancelButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetCancelButtonTextOption(dxTarget).Result : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCancelButtonTextOption(dxTarget, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	bool? cleanSearchOnOpening;
	[Parameter]
	bool? CleanSearchOnOpening {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetCleanSearchOnOpeningOption(dxTarget).Result : cleanSearchOnOpening;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCleanSearchOnOpeningOption(dxTarget, value);
			} else {
				this.cleanSearchOnOpening = value;
			}
		}
	}
	string clearButtonText;
	[Parameter]
	string ClearButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetClearButtonTextOption(dxTarget).Result : clearButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetClearButtonTextOption(dxTarget, value);
			} else {
				this.clearButtonText = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetCloseOnOutsideClickOption(dxTarget).Result : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCloseOnOutsideClickOption(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	object fieldTemplate;
	[Parameter]
	object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetFieldTemplateOption(dxTarget).Result : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFieldTemplateOption(dxTarget, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? fullScreen;
	[Parameter]
	bool? FullScreen {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetFullScreenOption(dxTarget).Result : fullScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFullScreenOption(dxTarget, value);
			} else {
				this.fullScreen = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetGroupedOption(dxTarget).Result : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetGroupedOption(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetGroupTemplateOption(dxTarget).Result : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetGroupTemplateOption(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	string nextButtonText;
	[Parameter]
	string NextButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetNextButtonTextOption(dxTarget).Result : nextButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetNextButtonTextOption(dxTarget, value);
			} else {
				this.nextButtonText = value;
			}
		}
	}
	string pageLoadingText;
	[Parameter]
	string PageLoadingText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPageLoadingTextOption(dxTarget).Result : pageLoadingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPageLoadingTextOption(dxTarget, value);
			} else {
				this.pageLoadingText = value;
			}
		}
	}
	string pageLoadMode;
	[Parameter]
	string PageLoadMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPageLoadModeOption(dxTarget).Result : pageLoadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPageLoadModeOption(dxTarget, value);
			} else {
				this.pageLoadMode = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPlaceholderOption(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPlaceholderOption(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	object popupHeight;
	[Parameter]
	object PopupHeight {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupHeightOption(dxTarget).Result : popupHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPopupHeightOption(dxTarget, value);
			} else {
				this.popupHeight = value;
			}
		}
	}
	object popupWidth;
	[Parameter]
	object PopupWidth {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupWidthOption(dxTarget).Result : popupWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPopupWidthOption(dxTarget, value);
			} else {
				this.popupWidth = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPositionOption(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPositionOption(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	string pulledDownText;
	[Parameter]
	string PulledDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPulledDownTextOption(dxTarget).Result : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPulledDownTextOption(dxTarget, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	[Parameter]
	string PullingDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetPullingDownTextOption(dxTarget).Result : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPullingDownTextOption(dxTarget, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	bool? pullRefreshEnabled;
	[Parameter]
	bool? PullRefreshEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetPullRefreshEnabledOption(dxTarget).Result : pullRefreshEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPullRefreshEnabledOption(dxTarget, value);
			} else {
				this.pullRefreshEnabled = value;
			}
		}
	}
	string refreshingText;
	[Parameter]
	string RefreshingText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetRefreshingTextOption(dxTarget).Result : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetRefreshingTextOption(dxTarget, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? searchEnabled;
	[Parameter]
	bool? SearchEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetSearchEnabledOption(dxTarget).Result : searchEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchEnabledOption(dxTarget, value);
			} else {
				this.searchEnabled = value;
			}
		}
	}
	string searchPlaceholder;
	[Parameter]
	string SearchPlaceholder {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetSearchPlaceholderOption(dxTarget).Result : searchPlaceholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchPlaceholderOption(dxTarget, value);
			} else {
				this.searchPlaceholder = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShadingOption(dxTarget).Result : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShadingOption(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	bool? showCancelButton;
	[Parameter]
	bool? ShowCancelButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowCancelButtonOption(dxTarget).Result : showCancelButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowCancelButtonOption(dxTarget, value);
			} else {
				this.showCancelButton = value;
			}
		}
	}
	bool? showClearButton;
	[Parameter]
	bool? ShowClearButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowClearButtonOption(dxTarget).Result : showClearButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowClearButtonOption(dxTarget, value);
			} else {
				this.showClearButton = value;
			}
		}
	}
	bool? showPopupTitle;
	[Parameter]
	bool? ShowPopupTitle {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowPopupTitleOption(dxTarget).Result : showPopupTitle;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowPopupTitleOption(dxTarget, value);
			} else {
				this.showPopupTitle = value;
			}
		}
	}
	string title;
	[Parameter]
	string Title {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object titleTemplate;
	[Parameter]
	object TitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetTitleTemplateOption(dxTarget).Result : titleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTitleTemplateOption(dxTarget, value);
			} else {
				this.titleTemplate = value;
			}
		}
	}
	bool? useNativeScrolling;
	[Parameter]
	bool? UseNativeScrolling {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUseNativeScrollingOption(dxTarget).Result : useNativeScrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetUseNativeScrollingOption(dxTarget, value);
			} else {
				this.useNativeScrolling = value;
			}
		}
	}
	bool? usePopover;
	[Parameter]
	bool? UsePopover {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUsePopoverOption(dxTarget).Result : usePopover;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetUsePopoverOption(dxTarget, value);
			} else {
				this.usePopover = value;
			}
		}
	}
	string displayValue;
	[Parameter]
	string DisplayValue {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetDisplayValueOption(dxTarget).Result : displayValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDisplayValueOption(dxTarget, value);
			} else {
				this.displayValue = value;
			}
		}
	}
	float? minSearchLength;
	[Parameter]
	float? MinSearchLength {
		get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetMinSearchLengthOption(dxTarget).Result : minSearchLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMinSearchLengthOption(dxTarget, value);
			} else {
				this.minSearchLength = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	object searchExpr;
	[Parameter]
	object SearchExpr {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSearchExprOption(dxTarget).Result : searchExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchExprOption(dxTarget, value);
			} else {
				this.searchExpr = value;
			}
		}
	}
	string searchMode;
	[Parameter]
	string SearchMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetSearchModeOption(dxTarget).Result : searchMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchModeOption(dxTarget, value);
			} else {
				this.searchMode = value;
			}
		}
	}
	float? searchTimeout;
	[Parameter]
	float? SearchTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetSearchTimeoutOption(dxTarget).Result : searchTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchTimeoutOption(dxTarget, value);
			} else {
				this.searchTimeout = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSelectedItemOption(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSelectedItemOption(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	bool? showDataBeforeSearch;
	[Parameter]
	bool? ShowDataBeforeSearch {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowDataBeforeSearchOption(dxTarget).Result : showDataBeforeSearch;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowDataBeforeSearchOption(dxTarget, value);
			} else {
				this.showDataBeforeSearch = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string valueChangeEvent;
	[Parameter]
	string ValueChangeEvent {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetValueChangeEventOption(dxTarget).Result : valueChangeEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetValueChangeEventOption(dxTarget, value);
			} else {
				this.valueChangeEvent = value;
			}
		}
	}
	bool? acceptCustomValue;
	[Parameter]
	bool? AcceptCustomValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetAcceptCustomValueOption(dxTarget).Result : acceptCustomValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetAcceptCustomValueOption(dxTarget, value);
			} else {
				this.acceptCustomValue = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetDeferRenderingOption(dxTarget).Result : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDeferRenderingOption(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	object dropDownButtonTemplate;
	[Parameter]
	object DropDownButtonTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDropDownButtonTemplateOption(dxTarget).Result : dropDownButtonTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDropDownButtonTemplateOption(dxTarget, value);
			} else {
				this.dropDownButtonTemplate = value;
			}
		}
	}
	bool? isOpened;
	[Parameter]
	bool? IsOpened {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetOpenedOption(dxTarget).Result : isOpened;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetOpenedOption(dxTarget, value);
			} else {
				this.isOpened = value;
			}
		}
	}
	bool? openOnFieldClick;
	[Parameter]
	bool? OpenOnFieldClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetOpenOnFieldClickOption(dxTarget).Result : openOnFieldClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetOpenOnFieldClickOption(dxTarget, value);
			} else {
				this.openOnFieldClick = value;
			}
		}
	}
	bool? showDropDownButton;
	[Parameter]
	bool? ShowDropDownButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetShowDropDownButtonOption(dxTarget).Result : showDropDownButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowDropDownButtonOption(dxTarget, value);
			} else {
				this.showDropDownButton = value;
			}
		}
	}
	object maxLength;
	[Parameter]
	object MaxLength {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetMaxLengthOption(dxTarget).Result : maxLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMaxLengthOption(dxTarget, value);
			} else {
				this.maxLength = value;
			}
		}
	}
	string mode;
	[Parameter]
	string Mode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetModeOption(dxTarget).Result : mode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetModeOption(dxTarget, value);
			} else {
				this.mode = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object inputAttr;
	[Parameter]
	object InputAttr {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetInputAttrOption(dxTarget).Result : inputAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetInputAttrOption(dxTarget, value);
			} else {
				this.inputAttr = value;
			}
		}
	}
	string mask;
	[Parameter]
	string Mask {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMaskOption(dxTarget).Result : mask;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMaskOption(dxTarget, value);
			} else {
				this.mask = value;
			}
		}
	}
	string maskChar;
	[Parameter]
	string MaskChar {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMaskCharOption(dxTarget).Result : maskChar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMaskCharOption(dxTarget, value);
			} else {
				this.maskChar = value;
			}
		}
	}
	string maskInvalidMessage;
	[Parameter]
	string MaskInvalidMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetMaskInvalidMessageOption(dxTarget).Result : maskInvalidMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMaskInvalidMessageOption(dxTarget, value);
			} else {
				this.maskInvalidMessage = value;
			}
		}
	}
	object maskRules;
	[Parameter]
	object MaskRules {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetMaskRulesOption(dxTarget).Result : maskRules;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetMaskRulesOption(dxTarget, value);
			} else {
				this.maskRules = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	string showMaskMode;
	[Parameter]
	string ShowMaskMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetShowMaskModeOption(dxTarget).Result : showMaskMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowMaskModeOption(dxTarget, value);
			} else {
				this.showMaskMode = value;
			}
		}
	}
	bool? spellcheck;
	[Parameter]
	bool? Spellcheck {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetSpellcheckOption(dxTarget).Result : spellcheck;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSpellcheckOption(dxTarget, value);
			} else {
				this.spellcheck = value;
			}
		}
	}
	string stylingMode;
	[Parameter]
	string StylingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetStylingModeOption(dxTarget).Result : stylingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetStylingModeOption(dxTarget, value);
			} else {
				this.stylingMode = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetTextOption(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTextOption(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	bool? useMaskedValue;
	[Parameter]
	bool? UseMaskedValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetUseMaskedValueOption(dxTarget).Result : useMaskedValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetUseMaskedValueOption(dxTarget, value);
			} else {
				this.useMaskedValue = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxLookupInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxLookupInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLookupInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object displayExpr;
	[Parameter]
	object DisplayExpr {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetDisplayExprOption(dxTarget).Result : displayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetDisplayExprOption(dxTarget, value);
			} else {
				this.displayExpr = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetItemTemplateOption(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetItemTemplateOption(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object valueExpr;
	[Parameter]
	object ValueExpr {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetValueExprOption(dxTarget).Result : valueExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetValueExprOption(dxTarget, value);
			} else {
				this.valueExpr = value;
			}
		}
	}
	bool? onPageLoadingEnabled;
	[Parameter]
	bool? OnPageLoadingEnabled {
		get => onPageLoadingEnabled;
		set => this.onPageLoadingEnabled = value;
	}
	bool? onPullRefreshEnabled;
	[Parameter]
	bool? OnPullRefreshEnabled {
		get => onPullRefreshEnabled;
		set => this.onPullRefreshEnabled = value;
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onTitleRenderedEnabled;
	[Parameter]
	bool? OnTitleRenderedEnabled {
		get => onTitleRenderedEnabled;
		set => this.onTitleRenderedEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onClosedEnabled;
	[Parameter]
	bool? OnClosedEnabled {
		get => onClosedEnabled;
		set => this.onClosedEnabled = value;
	}
	bool? onOpenedEnabled;
	[Parameter]
	bool? OnOpenedEnabled {
		get => onOpenedEnabled;
		set => this.onOpenedEnabled = value;
	}
	bool? onChangeEnabled;
	[Parameter]
	bool? OnChangeEnabled {
		get => onChangeEnabled;
		set => this.onChangeEnabled = value;
	}
	bool? onCopyEnabled;
	[Parameter]
	bool? OnCopyEnabled {
		get => onCopyEnabled;
		set => this.onCopyEnabled = value;
	}
	bool? onCutEnabled;
	[Parameter]
	bool? OnCutEnabled {
		get => onCutEnabled;
		set => this.onCutEnabled = value;
	}
	bool? onEnterKeyEnabled;
	[Parameter]
	bool? OnEnterKeyEnabled {
		get => onEnterKeyEnabled;
		set => this.onEnterKeyEnabled = value;
	}
	bool? onFocusInEnabled;
	[Parameter]
	bool? OnFocusInEnabled {
		get => onFocusInEnabled;
		set => this.onFocusInEnabled = value;
	}
	bool? onFocusOutEnabled;
	[Parameter]
	bool? OnFocusOutEnabled {
		get => onFocusOutEnabled;
		set => this.onFocusOutEnabled = value;
	}
	bool? onInputEnabled;
	[Parameter]
	bool? OnInputEnabled {
		get => onInputEnabled;
		set => this.onInputEnabled = value;
	}
	bool? onKeyDownEnabled;
	[Parameter]
	bool? OnKeyDownEnabled {
		get => onKeyDownEnabled;
		set => this.onKeyDownEnabled = value;
	}
	bool? onKeyPressEnabled;
	[Parameter]
	bool? OnKeyPressEnabled {
		get => onKeyPressEnabled;
		set => this.onKeyPressEnabled = value;
	}
	bool? onKeyUpEnabled;
	[Parameter]
	bool? OnKeyUpEnabled {
		get => onKeyUpEnabled;
		set => this.onKeyUpEnabled = value;
	}
	bool? onPasteEnabled;
	[Parameter]
	bool? OnPasteEnabled {
		get => onPasteEnabled;
		set => this.onPasteEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxLookupInterop.PageLoading += DxLookup_PageLoading;
		DevExpress.Ui.DxLookupInterop.PullRefresh += DxLookup_PullRefresh;
		DevExpress.Ui.DxLookupInterop.Scroll += DxLookup_Scroll;
		DevExpress.Ui.DxLookupInterop.TitleRendered += DxLookup_TitleRendered;
		DevExpress.Ui.DxLookupInterop.ValueChanged += DxLookup_ValueChanged;
		DevExpress.Ui.DxLookupInterop.ItemClick += DxLookup_ItemClick;
		DevExpress.Ui.DxLookupInterop.SelectionChanged += DxLookup_SelectionChanged;
		DevExpress.Ui.DxLookupInterop.Closed += DxLookup_Closed;
		DevExpress.Ui.DxLookupInterop.Opened += DxLookup_Opened;
		DevExpress.Ui.DxLookupInterop.Change += DxLookup_Change;
		DevExpress.Ui.DxLookupInterop.Copy += DxLookup_Copy;
		DevExpress.Ui.DxLookupInterop.Cut += DxLookup_Cut;
		DevExpress.Ui.DxLookupInterop.EnterKey += DxLookup_EnterKey;
		DevExpress.Ui.DxLookupInterop.FocusIn += DxLookup_FocusIn;
		DevExpress.Ui.DxLookupInterop.FocusOut += DxLookup_FocusOut;
		DevExpress.Ui.DxLookupInterop.Input += DxLookup_Input;
		DevExpress.Ui.DxLookupInterop.KeyDown += DxLookup_KeyDown;
		DevExpress.Ui.DxLookupInterop.KeyPress += DxLookup_KeyPress;
		DevExpress.Ui.DxLookupInterop.KeyUp += DxLookup_KeyUp;
		DevExpress.Ui.DxLookupInterop.Paste += DxLookup_Paste;
		DevExpress.Ui.DxLookupInterop.ContentReady += DxLookup_ContentReady;
		DevExpress.Ui.DxLookupInterop.Disposing += DxLookup_Disposing;
		DevExpress.Ui.DxLookupInterop.OptionChanged += DxLookup_OptionChanged;
		DevExpress.Ui.DxLookupInterop.Initialized += DxLookup_Initialized;
	}
	[Parameter]
	Action PageLoading { get; set; }
	void DxLookup_PageLoading(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PageLoading?.Invoke();
		}
	}
	[Parameter]
	Action PullRefresh { get; set; }
	void DxLookup_PullRefresh(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullRefresh?.Invoke();
		}
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxLookup_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action TitleRendered { get; set; }
	void DxLookup_TitleRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleRendered?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxLookup_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxLookup_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxLookup_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Closed { get; set; }
	void DxLookup_Closed(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Closed?.Invoke();
		}
	}
	[Parameter]
	Action Opened { get; set; }
	void DxLookup_Opened(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Opened?.Invoke();
		}
	}
	[Parameter]
	Action Change { get; set; }
	void DxLookup_Change(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Change?.Invoke();
		}
	}
	[Parameter]
	Action Copy { get; set; }
	void DxLookup_Copy(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Copy?.Invoke();
		}
	}
	[Parameter]
	Action Cut { get; set; }
	void DxLookup_Cut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Cut?.Invoke();
		}
	}
	[Parameter]
	Action EnterKey { get; set; }
	void DxLookup_EnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EnterKey?.Invoke();
		}
	}
	[Parameter]
	Action FocusIn { get; set; }
	void DxLookup_FocusIn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusIn?.Invoke();
		}
	}
	[Parameter]
	Action FocusOut { get; set; }
	void DxLookup_FocusOut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusOut?.Invoke();
		}
	}
	[Parameter]
	Action Input { get; set; }
	void DxLookup_Input(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Input?.Invoke();
		}
	}
	[Parameter]
	Action KeyDown { get; set; }
	void DxLookup_KeyDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyDown?.Invoke();
		}
	}
	[Parameter]
	Action KeyPress { get; set; }
	void DxLookup_KeyPress(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyPress?.Invoke();
		}
	}
	[Parameter]
	Action KeyUp { get; set; }
	void DxLookup_KeyUp(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyUp?.Invoke();
		}
	}
	[Parameter]
	Action Paste { get; set; }
	void DxLookup_Paste(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Paste?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxLookup_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxLookup_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxLookup_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxLookup_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxLookupInterop.PageLoading -= DxLookup_PageLoading;
		DevExpress.Ui.DxLookupInterop.PullRefresh -= DxLookup_PullRefresh;
		DevExpress.Ui.DxLookupInterop.Scroll -= DxLookup_Scroll;
		DevExpress.Ui.DxLookupInterop.TitleRendered -= DxLookup_TitleRendered;
		DevExpress.Ui.DxLookupInterop.ValueChanged -= DxLookup_ValueChanged;
		DevExpress.Ui.DxLookupInterop.ItemClick -= DxLookup_ItemClick;
		DevExpress.Ui.DxLookupInterop.SelectionChanged -= DxLookup_SelectionChanged;
		DevExpress.Ui.DxLookupInterop.Closed -= DxLookup_Closed;
		DevExpress.Ui.DxLookupInterop.Opened -= DxLookup_Opened;
		DevExpress.Ui.DxLookupInterop.Change -= DxLookup_Change;
		DevExpress.Ui.DxLookupInterop.Copy -= DxLookup_Copy;
		DevExpress.Ui.DxLookupInterop.Cut -= DxLookup_Cut;
		DevExpress.Ui.DxLookupInterop.EnterKey -= DxLookup_EnterKey;
		DevExpress.Ui.DxLookupInterop.FocusIn -= DxLookup_FocusIn;
		DevExpress.Ui.DxLookupInterop.FocusOut -= DxLookup_FocusOut;
		DevExpress.Ui.DxLookupInterop.Input -= DxLookup_Input;
		DevExpress.Ui.DxLookupInterop.KeyDown -= DxLookup_KeyDown;
		DevExpress.Ui.DxLookupInterop.KeyPress -= DxLookup_KeyPress;
		DevExpress.Ui.DxLookupInterop.KeyUp -= DxLookup_KeyUp;
		DevExpress.Ui.DxLookupInterop.Paste -= DxLookup_Paste;
		DevExpress.Ui.DxLookupInterop.ContentReady -= DxLookup_ContentReady;
		DevExpress.Ui.DxLookupInterop.Disposing -= DxLookup_Disposing;
		DevExpress.Ui.DxLookupInterop.OptionChanged -= DxLookup_OptionChanged;
		DevExpress.Ui.DxLookupInterop.Initialized -= DxLookup_Initialized;
	}
}
