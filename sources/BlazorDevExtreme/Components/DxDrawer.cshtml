@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDrawerOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDrawer() : base("DxDrawer") { }
	protected override DevExpress.Ui.DxDrawerOptions CreateOptions() {
		return new DevExpress.Ui.DxDrawerOptions {
			animationDuration = animationDuration,
			animationEnabled = animationEnabled,
			closeOnOutsideClick = closeOnOutsideClick,
			maxSize = maxSize,
			minSize = minSize,
			opened = isOpened,
			openedStateMode = openedStateMode,
			position = position,
			revealMode = revealMode,
			shading = shading,
			target = target,
			template = template,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxDrawerOptions options) {
		return DevExpress.Ui.DxDrawerInterop.Init(dxTarget, options);
	}
	float? animationDuration;
	[Parameter]
	float? AnimationDuration {
		get => isInitialized ? (float?)DevExpress.Ui.DxDrawerInterop.GetAnimationDurationOption(dxTarget).Result : animationDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetAnimationDurationOption(dxTarget, value);
			} else {
				this.animationDuration = value;
			}
		}
	}
	bool? animationEnabled;
	[Parameter]
	bool? AnimationEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetAnimationEnabledOption(dxTarget).Result : animationEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetAnimationEnabledOption(dxTarget, value);
			} else {
				this.animationEnabled = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetCloseOnOutsideClickOption(dxTarget).Result : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetCloseOnOutsideClickOption(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	float? maxSize;
	[Parameter]
	float? MaxSize {
		get => isInitialized ? (float?)DevExpress.Ui.DxDrawerInterop.GetMaxSizeOption(dxTarget).Result : maxSize;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetMaxSizeOption(dxTarget, value);
			} else {
				this.maxSize = value;
			}
		}
	}
	float? minSize;
	[Parameter]
	float? MinSize {
		get => isInitialized ? (float?)DevExpress.Ui.DxDrawerInterop.GetMinSizeOption(dxTarget).Result : minSize;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetMinSizeOption(dxTarget, value);
			} else {
				this.minSize = value;
			}
		}
	}
	bool? isOpened;
	[Parameter]
	bool? IsOpened {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetOpenedOption(dxTarget).Result : isOpened;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetOpenedOption(dxTarget, value);
			} else {
				this.isOpened = value;
			}
		}
	}
	string openedStateMode;
	[Parameter]
	string OpenedStateMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDrawerInterop.GetOpenedStateModeOption(dxTarget).Result : openedStateMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetOpenedStateModeOption(dxTarget, value);
			} else {
				this.openedStateMode = value;
			}
		}
	}
	string position;
	[Parameter]
	string Position {
		get => isInitialized ? (string)DevExpress.Ui.DxDrawerInterop.GetPositionOption(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetPositionOption(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	string revealMode;
	[Parameter]
	string RevealMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDrawerInterop.GetRevealModeOption(dxTarget).Result : revealMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetRevealModeOption(dxTarget, value);
			} else {
				this.revealMode = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetShadingOption(dxTarget).Result : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetShadingOption(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	object target;
	[Parameter]
	object Target {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetTargetOption(dxTarget).Result : target;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetTargetOption(dxTarget, value);
			} else {
				this.target = value;
			}
		}
	}
	object template;
	[Parameter]
	object Template {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetTemplateOption(dxTarget).Result : template;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetTemplateOption(dxTarget, value);
			} else {
				this.template = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxDrawerInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxDrawerInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDrawerInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDrawerInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxDrawerInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDrawerInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDrawerInterop.ContentReady += DxDrawer_ContentReady;
		DevExpress.Ui.DxDrawerInterop.Disposing += DxDrawer_Disposing;
		DevExpress.Ui.DxDrawerInterop.OptionChanged += DxDrawer_OptionChanged;
		DevExpress.Ui.DxDrawerInterop.Initialized += DxDrawer_Initialized;
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxDrawer_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxDrawer_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxDrawer_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxDrawer_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object Content() {
		return DevExpress.Ui.DxDrawerInterop.Content(dxTarget).Result;
	}
	public object Hide() {
		return DevExpress.Ui.DxDrawerInterop.Hide(dxTarget).Result;
	}
	public object Show() {
		return DevExpress.Ui.DxDrawerInterop.Show(dxTarget).Result;
	}
	public object Toggle() {
		return DevExpress.Ui.DxDrawerInterop.Toggle(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxDrawerInterop.ContentReady -= DxDrawer_ContentReady;
		DevExpress.Ui.DxDrawerInterop.Disposing -= DxDrawer_Disposing;
		DevExpress.Ui.DxDrawerInterop.OptionChanged -= DxDrawer_OptionChanged;
		DevExpress.Ui.DxDrawerInterop.Initialized -= DxDrawer_Initialized;
	}
}
