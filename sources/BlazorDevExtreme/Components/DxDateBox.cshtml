@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDateBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDateBox() : base("DxDateBox") { }
	protected override DevExpress.Ui.DxDateBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxDateBoxOptions {
			adaptivityEnabled = adaptivityEnabled,
			applyButtonText = applyButtonText,
			calendarOptions = calendarOptions,
			cancelButtonText = cancelButtonText,
			dateOutOfRangeMessage = dateOutOfRangeMessage,
			dateSerializationFormat = dateSerializationFormat,
			disabledDates = disabledDates,
			displayFormat = displayFormat,
			interval = interval,
			invalidDateMessage = invalidDateMessage,
			max = max,
			maxZoomLevel = maxZoomLevel,
			min = min,
			minZoomLevel = minZoomLevel,
			pickerType = pickerType,
			placeholder = placeholder,
			showAnalogClock = showAnalogClock,
			type = type,
			useMaskBehavior = useMaskBehavior,
			value = value,
			acceptCustomValue = acceptCustomValue,
			activeStateEnabled = activeStateEnabled,
			applyValueMode = applyValueMode,
			deferRendering = deferRendering,
			dropDownButtonTemplate = dropDownButtonTemplate,
			opened = isOpened,
			openOnFieldClick = openOnFieldClick,
			showDropDownButton = showDropDownButton,
			maxLength = maxLength,
			mode = mode,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			inputAttr = inputAttr,
			mask = mask,
			maskChar = maskChar,
			maskInvalidMessage = maskInvalidMessage,
			maskRules = maskRules,
			name = name,
			showClearButton = showClearButton,
			showMaskMode = showMaskMode,
			spellcheck = spellcheck,
			stylingMode = stylingMode,
			text = text,
			useMaskedValue = useMaskedValue,
			valueChangeEvent = valueChangeEvent,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onClosedEnabled = onClosedEnabled,
			onOpenedEnabled = onOpenedEnabled,
			onChangeEnabled = onChangeEnabled,
			onCopyEnabled = onCopyEnabled,
			onCutEnabled = onCutEnabled,
			onEnterKeyEnabled = onEnterKeyEnabled,
			onFocusInEnabled = onFocusInEnabled,
			onFocusOutEnabled = onFocusOutEnabled,
			onInputEnabled = onInputEnabled,
			onKeyDownEnabled = onKeyDownEnabled,
			onKeyPressEnabled = onKeyPressEnabled,
			onKeyUpEnabled = onKeyUpEnabled,
			onPasteEnabled = onPasteEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxDateBoxOptions options) {
		return DevExpress.Ui.DxDateBoxInterop.Init(dxTarget, options);
	}
	bool? adaptivityEnabled;
	[Parameter]
	bool? AdaptivityEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetAdaptivityEnabledOption(dxTarget).Result : adaptivityEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetAdaptivityEnabledOption(dxTarget, value);
			} else {
				this.adaptivityEnabled = value;
			}
		}
	}
	string applyButtonText;
	[Parameter]
	string ApplyButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetApplyButtonTextOption(dxTarget).Result : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetApplyButtonTextOption(dxTarget, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	object calendarOptions;
	[Parameter]
	object CalendarOptions {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetCalendarOptionsOption(dxTarget).Result : calendarOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetCalendarOptionsOption(dxTarget, value);
			} else {
				this.calendarOptions = value;
			}
		}
	}
	string cancelButtonText;
	[Parameter]
	string CancelButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetCancelButtonTextOption(dxTarget).Result : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetCancelButtonTextOption(dxTarget, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	string dateOutOfRangeMessage;
	[Parameter]
	string DateOutOfRangeMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetDateOutOfRangeMessageOption(dxTarget).Result : dateOutOfRangeMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDateOutOfRangeMessageOption(dxTarget, value);
			} else {
				this.dateOutOfRangeMessage = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetDateSerializationFormatOption(dxTarget).Result : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDateSerializationFormatOption(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	object disabledDates;
	[Parameter]
	object DisabledDates {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisabledDatesOption(dxTarget).Result : disabledDates;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDisabledDatesOption(dxTarget, value);
			} else {
				this.disabledDates = value;
			}
		}
	}
	object displayFormat;
	[Parameter]
	object DisplayFormat {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisplayFormatOption(dxTarget).Result : displayFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDisplayFormatOption(dxTarget, value);
			} else {
				this.displayFormat = value;
			}
		}
	}
	float? interval;
	[Parameter]
	float? Interval {
		get => isInitialized ? (float?)DevExpress.Ui.DxDateBoxInterop.GetIntervalOption(dxTarget).Result : interval;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetIntervalOption(dxTarget, value);
			} else {
				this.interval = value;
			}
		}
	}
	string invalidDateMessage;
	[Parameter]
	string InvalidDateMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetInvalidDateMessageOption(dxTarget).Result : invalidDateMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetInvalidDateMessageOption(dxTarget, value);
			} else {
				this.invalidDateMessage = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaxOption(dxTarget).Result : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaxOption(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	string maxZoomLevel;
	[Parameter]
	string MaxZoomLevel {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaxZoomLevelOption(dxTarget).Result : maxZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaxZoomLevelOption(dxTarget, value);
			} else {
				this.maxZoomLevel = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMinOption(dxTarget).Result : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMinOption(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string minZoomLevel;
	[Parameter]
	string MinZoomLevel {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMinZoomLevelOption(dxTarget).Result : minZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMinZoomLevelOption(dxTarget, value);
			} else {
				this.minZoomLevel = value;
			}
		}
	}
	string pickerType;
	[Parameter]
	string PickerType {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetPickerTypeOption(dxTarget).Result : pickerType;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetPickerTypeOption(dxTarget, value);
			} else {
				this.pickerType = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetPlaceholderOption(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetPlaceholderOption(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	bool? showAnalogClock;
	[Parameter]
	bool? ShowAnalogClock {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetShowAnalogClockOption(dxTarget).Result : showAnalogClock;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetShowAnalogClockOption(dxTarget, value);
			} else {
				this.showAnalogClock = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetTypeOption(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetTypeOption(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	bool? useMaskBehavior;
	[Parameter]
	bool? UseMaskBehavior {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetUseMaskBehaviorOption(dxTarget).Result : useMaskBehavior;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetUseMaskBehaviorOption(dxTarget, value);
			} else {
				this.useMaskBehavior = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? acceptCustomValue;
	[Parameter]
	bool? AcceptCustomValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetAcceptCustomValueOption(dxTarget).Result : acceptCustomValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetAcceptCustomValueOption(dxTarget, value);
			} else {
				this.acceptCustomValue = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetApplyValueModeOption(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetApplyValueModeOption(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetDeferRenderingOption(dxTarget).Result : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDeferRenderingOption(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	object dropDownButtonTemplate;
	[Parameter]
	object DropDownButtonTemplate {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDropDownButtonTemplateOption(dxTarget).Result : dropDownButtonTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDropDownButtonTemplateOption(dxTarget, value);
			} else {
				this.dropDownButtonTemplate = value;
			}
		}
	}
	bool? isOpened;
	[Parameter]
	bool? IsOpened {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetOpenedOption(dxTarget).Result : isOpened;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetOpenedOption(dxTarget, value);
			} else {
				this.isOpened = value;
			}
		}
	}
	bool? openOnFieldClick;
	[Parameter]
	bool? OpenOnFieldClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetOpenOnFieldClickOption(dxTarget).Result : openOnFieldClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetOpenOnFieldClickOption(dxTarget, value);
			} else {
				this.openOnFieldClick = value;
			}
		}
	}
	bool? showDropDownButton;
	[Parameter]
	bool? ShowDropDownButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetShowDropDownButtonOption(dxTarget).Result : showDropDownButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetShowDropDownButtonOption(dxTarget, value);
			} else {
				this.showDropDownButton = value;
			}
		}
	}
	object maxLength;
	[Parameter]
	object MaxLength {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaxLengthOption(dxTarget).Result : maxLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaxLengthOption(dxTarget, value);
			} else {
				this.maxLength = value;
			}
		}
	}
	string mode;
	[Parameter]
	string Mode {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetModeOption(dxTarget).Result : mode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetModeOption(dxTarget, value);
			} else {
				this.mode = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object inputAttr;
	[Parameter]
	object InputAttr {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetInputAttrOption(dxTarget).Result : inputAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetInputAttrOption(dxTarget, value);
			} else {
				this.inputAttr = value;
			}
		}
	}
	string mask;
	[Parameter]
	string Mask {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaskOption(dxTarget).Result : mask;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaskOption(dxTarget, value);
			} else {
				this.mask = value;
			}
		}
	}
	string maskChar;
	[Parameter]
	string MaskChar {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaskCharOption(dxTarget).Result : maskChar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaskCharOption(dxTarget, value);
			} else {
				this.maskChar = value;
			}
		}
	}
	string maskInvalidMessage;
	[Parameter]
	string MaskInvalidMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaskInvalidMessageOption(dxTarget).Result : maskInvalidMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaskInvalidMessageOption(dxTarget, value);
			} else {
				this.maskInvalidMessage = value;
			}
		}
	}
	object maskRules;
	[Parameter]
	object MaskRules {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaskRulesOption(dxTarget).Result : maskRules;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaskRulesOption(dxTarget, value);
			} else {
				this.maskRules = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showClearButton;
	[Parameter]
	bool? ShowClearButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetShowClearButtonOption(dxTarget).Result : showClearButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetShowClearButtonOption(dxTarget, value);
			} else {
				this.showClearButton = value;
			}
		}
	}
	string showMaskMode;
	[Parameter]
	string ShowMaskMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetShowMaskModeOption(dxTarget).Result : showMaskMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetShowMaskModeOption(dxTarget, value);
			} else {
				this.showMaskMode = value;
			}
		}
	}
	bool? spellcheck;
	[Parameter]
	bool? Spellcheck {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetSpellcheckOption(dxTarget).Result : spellcheck;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetSpellcheckOption(dxTarget, value);
			} else {
				this.spellcheck = value;
			}
		}
	}
	string stylingMode;
	[Parameter]
	string StylingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetStylingModeOption(dxTarget).Result : stylingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetStylingModeOption(dxTarget, value);
			} else {
				this.stylingMode = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetTextOption(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetTextOption(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	bool? useMaskedValue;
	[Parameter]
	bool? UseMaskedValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetUseMaskedValueOption(dxTarget).Result : useMaskedValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetUseMaskedValueOption(dxTarget, value);
			} else {
				this.useMaskedValue = value;
			}
		}
	}
	string valueChangeEvent;
	[Parameter]
	string ValueChangeEvent {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetValueChangeEventOption(dxTarget).Result : valueChangeEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetValueChangeEventOption(dxTarget, value);
			} else {
				this.valueChangeEvent = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDateBoxInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onClosedEnabled;
	[Parameter]
	bool? OnClosedEnabled {
		get => onClosedEnabled;
		set => this.onClosedEnabled = value;
	}
	bool? onOpenedEnabled;
	[Parameter]
	bool? OnOpenedEnabled {
		get => onOpenedEnabled;
		set => this.onOpenedEnabled = value;
	}
	bool? onChangeEnabled;
	[Parameter]
	bool? OnChangeEnabled {
		get => onChangeEnabled;
		set => this.onChangeEnabled = value;
	}
	bool? onCopyEnabled;
	[Parameter]
	bool? OnCopyEnabled {
		get => onCopyEnabled;
		set => this.onCopyEnabled = value;
	}
	bool? onCutEnabled;
	[Parameter]
	bool? OnCutEnabled {
		get => onCutEnabled;
		set => this.onCutEnabled = value;
	}
	bool? onEnterKeyEnabled;
	[Parameter]
	bool? OnEnterKeyEnabled {
		get => onEnterKeyEnabled;
		set => this.onEnterKeyEnabled = value;
	}
	bool? onFocusInEnabled;
	[Parameter]
	bool? OnFocusInEnabled {
		get => onFocusInEnabled;
		set => this.onFocusInEnabled = value;
	}
	bool? onFocusOutEnabled;
	[Parameter]
	bool? OnFocusOutEnabled {
		get => onFocusOutEnabled;
		set => this.onFocusOutEnabled = value;
	}
	bool? onInputEnabled;
	[Parameter]
	bool? OnInputEnabled {
		get => onInputEnabled;
		set => this.onInputEnabled = value;
	}
	bool? onKeyDownEnabled;
	[Parameter]
	bool? OnKeyDownEnabled {
		get => onKeyDownEnabled;
		set => this.onKeyDownEnabled = value;
	}
	bool? onKeyPressEnabled;
	[Parameter]
	bool? OnKeyPressEnabled {
		get => onKeyPressEnabled;
		set => this.onKeyPressEnabled = value;
	}
	bool? onKeyUpEnabled;
	[Parameter]
	bool? OnKeyUpEnabled {
		get => onKeyUpEnabled;
		set => this.onKeyUpEnabled = value;
	}
	bool? onPasteEnabled;
	[Parameter]
	bool? OnPasteEnabled {
		get => onPasteEnabled;
		set => this.onPasteEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDateBoxInterop.Closed += DxDateBox_Closed;
		DevExpress.Ui.DxDateBoxInterop.Opened += DxDateBox_Opened;
		DevExpress.Ui.DxDateBoxInterop.Change += DxDateBox_Change;
		DevExpress.Ui.DxDateBoxInterop.Copy += DxDateBox_Copy;
		DevExpress.Ui.DxDateBoxInterop.Cut += DxDateBox_Cut;
		DevExpress.Ui.DxDateBoxInterop.EnterKey += DxDateBox_EnterKey;
		DevExpress.Ui.DxDateBoxInterop.FocusIn += DxDateBox_FocusIn;
		DevExpress.Ui.DxDateBoxInterop.FocusOut += DxDateBox_FocusOut;
		DevExpress.Ui.DxDateBoxInterop.Input += DxDateBox_Input;
		DevExpress.Ui.DxDateBoxInterop.KeyDown += DxDateBox_KeyDown;
		DevExpress.Ui.DxDateBoxInterop.KeyPress += DxDateBox_KeyPress;
		DevExpress.Ui.DxDateBoxInterop.KeyUp += DxDateBox_KeyUp;
		DevExpress.Ui.DxDateBoxInterop.Paste += DxDateBox_Paste;
		DevExpress.Ui.DxDateBoxInterop.ValueChanged += DxDateBox_ValueChanged;
		DevExpress.Ui.DxDateBoxInterop.ContentReady += DxDateBox_ContentReady;
		DevExpress.Ui.DxDateBoxInterop.Disposing += DxDateBox_Disposing;
		DevExpress.Ui.DxDateBoxInterop.OptionChanged += DxDateBox_OptionChanged;
		DevExpress.Ui.DxDateBoxInterop.Initialized += DxDateBox_Initialized;
	}
	[Parameter]
	Action Closed { get; set; }
	void DxDateBox_Closed(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Closed?.Invoke();
		}
	}
	[Parameter]
	Action Opened { get; set; }
	void DxDateBox_Opened(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Opened?.Invoke();
		}
	}
	[Parameter]
	Action Change { get; set; }
	void DxDateBox_Change(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Change?.Invoke();
		}
	}
	[Parameter]
	Action Copy { get; set; }
	void DxDateBox_Copy(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Copy?.Invoke();
		}
	}
	[Parameter]
	Action Cut { get; set; }
	void DxDateBox_Cut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Cut?.Invoke();
		}
	}
	[Parameter]
	Action EnterKey { get; set; }
	void DxDateBox_EnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EnterKey?.Invoke();
		}
	}
	[Parameter]
	Action FocusIn { get; set; }
	void DxDateBox_FocusIn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusIn?.Invoke();
		}
	}
	[Parameter]
	Action FocusOut { get; set; }
	void DxDateBox_FocusOut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusOut?.Invoke();
		}
	}
	[Parameter]
	Action Input { get; set; }
	void DxDateBox_Input(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Input?.Invoke();
		}
	}
	[Parameter]
	Action KeyDown { get; set; }
	void DxDateBox_KeyDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyDown?.Invoke();
		}
	}
	[Parameter]
	Action KeyPress { get; set; }
	void DxDateBox_KeyPress(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyPress?.Invoke();
		}
	}
	[Parameter]
	Action KeyUp { get; set; }
	void DxDateBox_KeyUp(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyUp?.Invoke();
		}
	}
	[Parameter]
	Action Paste { get; set; }
	void DxDateBox_Paste(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Paste?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxDateBox_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxDateBox_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxDateBox_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxDateBox_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxDateBox_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Close() {
		DevExpress.Ui.DxDateBoxInterop.Close(dxTarget);
	}
	public void Open() {
		DevExpress.Ui.DxDateBoxInterop.Open(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxDateBoxInterop.Closed -= DxDateBox_Closed;
		DevExpress.Ui.DxDateBoxInterop.Opened -= DxDateBox_Opened;
		DevExpress.Ui.DxDateBoxInterop.Change -= DxDateBox_Change;
		DevExpress.Ui.DxDateBoxInterop.Copy -= DxDateBox_Copy;
		DevExpress.Ui.DxDateBoxInterop.Cut -= DxDateBox_Cut;
		DevExpress.Ui.DxDateBoxInterop.EnterKey -= DxDateBox_EnterKey;
		DevExpress.Ui.DxDateBoxInterop.FocusIn -= DxDateBox_FocusIn;
		DevExpress.Ui.DxDateBoxInterop.FocusOut -= DxDateBox_FocusOut;
		DevExpress.Ui.DxDateBoxInterop.Input -= DxDateBox_Input;
		DevExpress.Ui.DxDateBoxInterop.KeyDown -= DxDateBox_KeyDown;
		DevExpress.Ui.DxDateBoxInterop.KeyPress -= DxDateBox_KeyPress;
		DevExpress.Ui.DxDateBoxInterop.KeyUp -= DxDateBox_KeyUp;
		DevExpress.Ui.DxDateBoxInterop.Paste -= DxDateBox_Paste;
		DevExpress.Ui.DxDateBoxInterop.ValueChanged -= DxDateBox_ValueChanged;
		DevExpress.Ui.DxDateBoxInterop.ContentReady -= DxDateBox_ContentReady;
		DevExpress.Ui.DxDateBoxInterop.Disposing -= DxDateBox_Disposing;
		DevExpress.Ui.DxDateBoxInterop.OptionChanged -= DxDateBox_OptionChanged;
		DevExpress.Ui.DxDateBoxInterop.Initialized -= DxDateBox_Initialized;
	}
}
