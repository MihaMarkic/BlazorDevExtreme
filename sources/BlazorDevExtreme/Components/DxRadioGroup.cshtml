@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxRadioGroupOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
    ElementRef dxTarget;
    public DxRadioGroup() : base("DxRadioGroup") { }
    protected override DevExpress.Ui.DxRadioGroupOptions CreateOptions() {
        return new DevExpress.Ui.DxRadioGroupOptions {
            activeStateEnabled = activeStateEnabled,
            focusStateEnabled = focusStateEnabled,
            hoverStateEnabled = hoverStateEnabled,
            layout = layout,
            name = name,
            value = value,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            dataSource = dataSource,
            displayExpr = displayExpr,
            items = items,
            itemTemplate = itemTemplate,
            valueExpr = valueExpr,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override Task Init(DevExpress.Ui.DxRadioGroupOptions options) {
        return DevExpress.Ui.DxRadioGroupInterop.Init(dxTarget, options);
    }
    bool? activeStateEnabled;
    [Parameter]
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter]
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter]
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    string layout;
    [Parameter]
    string Layout {
        get => isInitialized ? (string)DevExpress.Ui.DxRadioGroupInterop.GetLayout(dxTarget).Result : layout;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetLayout(dxTarget, value);
            } else {
                this.layout = value;
            }
        }
    }
    string name;
    [Parameter]
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxRadioGroupInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    object value;
    [Parameter]
    object Value {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    bool? isValid;
    [Parameter]
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter]
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter]
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter]
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxRadioGroupInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter]
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxRadioGroupInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? disabled;
    [Parameter]
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter]
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxRadioGroupInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter]
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxRadioGroupInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter]
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter]
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter]
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter]
    object Height {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter]
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxRadioGroupInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter]
    object Width {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    object dataSource;
    [Parameter]
    object DataSource {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetDataSource(dxTarget).Result : dataSource;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetDataSource(dxTarget, value);
            } else {
                this.dataSource = value;
            }
        }
    }
    object displayExpr;
    [Parameter]
    object DisplayExpr {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetDisplayExpr(dxTarget).Result : displayExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetDisplayExpr(dxTarget, value);
            } else {
                this.displayExpr = value;
            }
        }
    }
    object items;
    [Parameter]
    object Items {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetItems(dxTarget).Result : items;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetItems(dxTarget, value);
            } else {
                this.items = value;
            }
        }
    }
    object itemTemplate;
    [Parameter]
    object ItemTemplate {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetItemTemplate(dxTarget, value);
            } else {
                this.itemTemplate = value;
            }
        }
    }
    object valueExpr;
    [Parameter]
    object ValueExpr {
        get => isInitialized ? DevExpress.Ui.DxRadioGroupInterop.GetValueExpr(dxTarget).Result : valueExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxRadioGroupInterop.SetValueExpr(dxTarget, value);
            } else {
                this.valueExpr = value;
            }
        }
    }
    bool? onValueChangedEnabled;
    [Parameter]
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter]
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter]
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter]
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter]
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitAsync() {
        await base.OnInitAsync();
        //DevExpress.Ui.DxRadioGroupInterop.ValueChanged += DxRadioGroup_ValueChanged;
        DevExpress.Ui.DxRadioGroupInterop.ContentReady += DxRadioGroup_ContentReady;
        DevExpress.Ui.DxRadioGroupInterop.Disposing += DxRadioGroup_Disposing;
        DevExpress.Ui.DxRadioGroupInterop.OptionChanged += DxRadioGroup_OptionChanged;
        DevExpress.Ui.DxRadioGroupInterop.Initialized += DxRadioGroup_Initialized;
    }
    [Parameter]
    Action ValueChanged { get; set; }
    void DxRadioGroup_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter]
    Action ContentReady { get; set; }
    void DxRadioGroup_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter]
    Action Disposing { get; set; }
    void DxRadioGroup_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter]
    Action OptionChanged { get; set; }
    void DxRadioGroup_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter]
    Action Initialized { get; set; }
    void DxRadioGroup_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public object GetDataSourceEx() {
        return DevExpress.Ui.DxRadioGroupInterop.GetDataSourceEx(dxTarget).Result;
    }
    public void Dispose() {
        //DevExpress.Ui.DxRadioGroupInterop.ValueChanged -= DxRadioGroup_ValueChanged;
        DevExpress.Ui.DxRadioGroupInterop.ContentReady -= DxRadioGroup_ContentReady;
        DevExpress.Ui.DxRadioGroupInterop.Disposing -= DxRadioGroup_Disposing;
        DevExpress.Ui.DxRadioGroupInterop.OptionChanged -= DxRadioGroup_OptionChanged;
        DevExpress.Ui.DxRadioGroupInterop.Initialized -= DxRadioGroup_Initialized;
    }
}
