
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxFileUploaderOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public DxFileUploader() : base("DxFileUploader") { }
    protected override DevExpress.Ui.DxFileUploaderOptions CreateOptions() {
        return new DevExpress.Ui.DxFileUploaderOptions {
            accept = accept,
            allowCanceling = allowCanceling,
            focusStateEnabled = focusStateEnabled,
            labelText = labelText,
            multiple = multiple,
            name = name,
            progress = progressValue,
            readyToUploadMessage = readyToUploadMessage,
            selectButtonText = selectButtonText,
            showFileList = showFileList,
            uploadButtonText = uploadButtonText,
            uploadedMessage = uploadedMessage,
            uploadFailedMessage = uploadFailedMessage,
            uploadHeaders = uploadHeaders,
            uploadMethod = uploadMethod,
            uploadMode = uploadMode,
            uploadUrl = uploadUrl,
            value = value,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            activeStateEnabled = activeStateEnabled,
            disabled = disabled,
            hint = hint,
            hoverStateEnabled = hoverStateEnabled,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            onProgressEnabled = onProgressEnabled,
            onUploadAbortedEnabled = onUploadAbortedEnabled,
            onUploadedEnabled = onUploadedEnabled,
            onUploadErrorEnabled = onUploadErrorEnabled,
            onUploadStartedEnabled = onUploadStartedEnabled,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override ValueTask<object> Init(DevExpress.Ui.DxFileUploaderOptions options) {
        return DevExpress.Ui.DxFileUploaderInterop.Init(dxTarget, options);
    }
    string accept;
    [Parameter]
    string Accept {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetAccept(dxTarget).Result : accept;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetAccept(dxTarget, value);
            } else {
                this.accept = value;
            }
        }
    }
    bool? allowCanceling;
    [Parameter]
    bool? AllowCanceling {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetAllowCanceling(dxTarget).Result : allowCanceling;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetAllowCanceling(dxTarget, value);
            } else {
                this.allowCanceling = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter]
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    string labelText;
    [Parameter]
    string LabelText {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetLabelText(dxTarget).Result : labelText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetLabelText(dxTarget, value);
            } else {
                this.labelText = value;
            }
        }
    }
    bool? multiple;
    [Parameter]
    bool? Multiple {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetMultiple(dxTarget).Result : multiple;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetMultiple(dxTarget, value);
            } else {
                this.multiple = value;
            }
        }
    }
    string name;
    [Parameter]
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    float? progressValue;
    [Parameter]
    float? ProgressValue {
        get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetProgress(dxTarget).Result : progressValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetProgress(dxTarget, value);
            } else {
                this.progressValue = value;
            }
        }
    }
    string readyToUploadMessage;
    [Parameter]
    string ReadyToUploadMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetReadyToUploadMessage(dxTarget).Result : readyToUploadMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetReadyToUploadMessage(dxTarget, value);
            } else {
                this.readyToUploadMessage = value;
            }
        }
    }
    string selectButtonText;
    [Parameter]
    string SelectButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetSelectButtonText(dxTarget).Result : selectButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetSelectButtonText(dxTarget, value);
            } else {
                this.selectButtonText = value;
            }
        }
    }
    bool? showFileList;
    [Parameter]
    bool? ShowFileList {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetShowFileList(dxTarget).Result : showFileList;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetShowFileList(dxTarget, value);
            } else {
                this.showFileList = value;
            }
        }
    }
    string uploadButtonText;
    [Parameter]
    string UploadButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadButtonText(dxTarget).Result : uploadButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadButtonText(dxTarget, value);
            } else {
                this.uploadButtonText = value;
            }
        }
    }
    string uploadedMessage;
    [Parameter]
    string UploadedMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadedMessage(dxTarget).Result : uploadedMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadedMessage(dxTarget, value);
            } else {
                this.uploadedMessage = value;
            }
        }
    }
    string uploadFailedMessage;
    [Parameter]
    string UploadFailedMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadFailedMessage(dxTarget).Result : uploadFailedMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadFailedMessage(dxTarget, value);
            } else {
                this.uploadFailedMessage = value;
            }
        }
    }
    object uploadHeaders;
    [Parameter]
    object UploadHeaders {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetUploadHeaders(dxTarget).Result : uploadHeaders;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadHeaders(dxTarget, value);
            } else {
                this.uploadHeaders = value;
            }
        }
    }
    string uploadMethod;
    [Parameter]
    string UploadMethod {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadMethod(dxTarget).Result : uploadMethod;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadMethod(dxTarget, value);
            } else {
                this.uploadMethod = value;
            }
        }
    }
    string uploadMode;
    [Parameter]
    string UploadMode {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadMode(dxTarget).Result : uploadMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadMode(dxTarget, value);
            } else {
                this.uploadMode = value;
            }
        }
    }
    string uploadUrl;
    [Parameter]
    string UploadUrl {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadUrl(dxTarget).Result : uploadUrl;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetUploadUrl(dxTarget, value);
            } else {
                this.uploadUrl = value;
            }
        }
    }
    object value;
    [Parameter]
    object Value {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    bool? isValid;
    [Parameter]
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter]
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter]
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter]
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter]
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter]
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? disabled;
    [Parameter]
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter]
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter]
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    float? tabIndex;
    [Parameter]
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter]
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter]
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter]
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter]
    object Height {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter]
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter]
    object Width {
        get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxFileUploaderInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    bool? onProgressEnabled;
    [Parameter]
    bool? OnProgressEnabled {
        get => onProgressEnabled;
        set => this.onProgressEnabled = value;
    }
    bool? onUploadAbortedEnabled;
    [Parameter]
    bool? OnUploadAbortedEnabled {
        get => onUploadAbortedEnabled;
        set => this.onUploadAbortedEnabled = value;
    }
    bool? onUploadedEnabled;
    [Parameter]
    bool? OnUploadedEnabled {
        get => onUploadedEnabled;
        set => this.onUploadedEnabled = value;
    }
    bool? onUploadErrorEnabled;
    [Parameter]
    bool? OnUploadErrorEnabled {
        get => onUploadErrorEnabled;
        set => this.onUploadErrorEnabled = value;
    }
    bool? onUploadStartedEnabled;
    [Parameter]
    bool? OnUploadStartedEnabled {
        get => onUploadStartedEnabled;
        set => this.onUploadStartedEnabled = value;
    }
    bool? onValueChangedEnabled;
    [Parameter]
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter]
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter]
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter]
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter]
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DevExpress.Ui.DxFileUploaderInterop.Progress += DxFileUploader_Progress;
        DevExpress.Ui.DxFileUploaderInterop.UploadAborted += DxFileUploader_UploadAborted;
        DevExpress.Ui.DxFileUploaderInterop.Uploaded += DxFileUploader_Uploaded;
        DevExpress.Ui.DxFileUploaderInterop.UploadError += DxFileUploader_UploadError;
        DevExpress.Ui.DxFileUploaderInterop.UploadStarted += DxFileUploader_UploadStarted;
        //DevExpress.Ui.DxFileUploaderInterop.ValueChanged += DxFileUploader_ValueChanged;
        DevExpress.Ui.DxFileUploaderInterop.ContentReady += DxFileUploader_ContentReady;
        DevExpress.Ui.DxFileUploaderInterop.Disposing += DxFileUploader_Disposing;
        DevExpress.Ui.DxFileUploaderInterop.OptionChanged += DxFileUploader_OptionChanged;
        DevExpress.Ui.DxFileUploaderInterop.Initialized += DxFileUploader_Initialized;
    }
    [Parameter]
    Action Progress { get; set; }
    void DxFileUploader_Progress(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Progress?.Invoke();
        }
    }
    [Parameter]
    Action UploadAborted { get; set; }
    void DxFileUploader_UploadAborted(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            UploadAborted?.Invoke();
        }
    }
    [Parameter]
    Action Uploaded { get; set; }
    void DxFileUploader_Uploaded(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Uploaded?.Invoke();
        }
    }
    [Parameter]
    Action UploadError { get; set; }
    void DxFileUploader_UploadError(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            UploadError?.Invoke();
        }
    }
    [Parameter]
    Action UploadStarted { get; set; }
    void DxFileUploader_UploadStarted(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            UploadStarted?.Invoke();
        }
    }
    [Parameter]
    Action ValueChanged { get; set; }
    void DxFileUploader_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter]
    Action ContentReady { get; set; }
    void DxFileUploader_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter]
    Action Disposing { get; set; }
    void DxFileUploader_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter]
    Action OptionChanged { get; set; }
    void DxFileUploader_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter]
    Action Initialized { get; set; }
    void DxFileUploader_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void Dispose() {
        DevExpress.Ui.DxFileUploaderInterop.Progress -= DxFileUploader_Progress;
        DevExpress.Ui.DxFileUploaderInterop.UploadAborted -= DxFileUploader_UploadAborted;
        DevExpress.Ui.DxFileUploaderInterop.Uploaded -= DxFileUploader_Uploaded;
        DevExpress.Ui.DxFileUploaderInterop.UploadError -= DxFileUploader_UploadError;
        DevExpress.Ui.DxFileUploaderInterop.UploadStarted -= DxFileUploader_UploadStarted;
        //DevExpress.Ui.DxFileUploaderInterop.ValueChanged -= DxFileUploader_ValueChanged;
        DevExpress.Ui.DxFileUploaderInterop.ContentReady -= DxFileUploader_ContentReady;
        DevExpress.Ui.DxFileUploaderInterop.Disposing -= DxFileUploader_Disposing;
        DevExpress.Ui.DxFileUploaderInterop.OptionChanged -= DxFileUploader_OptionChanged;
        DevExpress.Ui.DxFileUploaderInterop.Initialized -= DxFileUploader_Initialized;
    }
}
