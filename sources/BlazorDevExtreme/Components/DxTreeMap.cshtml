@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxTreeMapOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTreeMap() : base("DxTreeMap") { }
	protected override DevExpress.Viz.DxTreeMapOptions CreateOptions() {
		return new DevExpress.Viz.DxTreeMapOptions {
			childrenField = childrenField,
			colorField = colorField,
			colorizer = colorizer,
			dataSource = dataSource,
			group = group,
			hoverEnabled = hoverEnabled,
			idField = idField,
			interactWithGroup = interactWithGroup,
			labelField = labelField,
			layoutAlgorithm = layoutAlgorithm,
			layoutDirection = layoutDirection,
			maxDepth = maxDepth,
			parentField = parentField,
			resolveLabelOverflow = resolveLabelOverflow,
			selectionMode = selectionMode,
			tile = tile,
			tooltip = tooltip,
			valueField = valueField,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onClickEnabled = onClickEnabled,
			onDrillEnabled = onDrillEnabled,
			onHoverChangedEnabled = onHoverChangedEnabled,
			onNodesInitializedEnabled = onNodesInitializedEnabled,
			onNodesRenderingEnabled = onNodesRenderingEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxTreeMapOptions options) {
		return DevExpress.Viz.DxTreeMapInterop.Init(dxTarget, options);
	}
	string childrenField;
	[Parameter]
	string ChildrenField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetChildrenFieldOption(dxTarget).Result : childrenField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetChildrenFieldOption(dxTarget, value);
			} else {
				this.childrenField = value;
			}
		}
	}
	string colorField;
	[Parameter]
	string ColorField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetColorFieldOption(dxTarget).Result : colorField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetColorFieldOption(dxTarget, value);
			} else {
				this.colorField = value;
			}
		}
	}
	object colorizer;
	[Parameter]
	object Colorizer {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetColorizerOption(dxTarget).Result : colorizer;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetColorizerOption(dxTarget, value);
			} else {
				this.colorizer = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object group;
	[Parameter]
	object Group {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetGroupOption(dxTarget).Result : group;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetGroupOption(dxTarget, value);
			} else {
				this.group = value;
			}
		}
	}
	bool? hoverEnabled;
	[Parameter]
	bool? HoverEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetHoverEnabledOption(dxTarget).Result : hoverEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetHoverEnabledOption(dxTarget, value);
			} else {
				this.hoverEnabled = value;
			}
		}
	}
	string idField;
	[Parameter]
	string IdField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetIdFieldOption(dxTarget).Result : idField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetIdFieldOption(dxTarget, value);
			} else {
				this.idField = value;
			}
		}
	}
	bool? interactWithGroup;
	[Parameter]
	bool? InteractWithGroup {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetInteractWithGroupOption(dxTarget).Result : interactWithGroup;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetInteractWithGroupOption(dxTarget, value);
			} else {
				this.interactWithGroup = value;
			}
		}
	}
	string labelField;
	[Parameter]
	string LabelField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetLabelFieldOption(dxTarget).Result : labelField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLabelFieldOption(dxTarget, value);
			} else {
				this.labelField = value;
			}
		}
	}
	object layoutAlgorithm;
	[Parameter]
	object LayoutAlgorithm {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetLayoutAlgorithmOption(dxTarget).Result : layoutAlgorithm;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLayoutAlgorithmOption(dxTarget, value);
			} else {
				this.layoutAlgorithm = value;
			}
		}
	}
	string layoutDirection;
	[Parameter]
	string LayoutDirection {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetLayoutDirectionOption(dxTarget).Result : layoutDirection;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLayoutDirectionOption(dxTarget, value);
			} else {
				this.layoutDirection = value;
			}
		}
	}
	float? maxDepth;
	[Parameter]
	float? MaxDepth {
		get => isInitialized ? (float?)DevExpress.Viz.DxTreeMapInterop.GetMaxDepthOption(dxTarget).Result : maxDepth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetMaxDepthOption(dxTarget, value);
			} else {
				this.maxDepth = value;
			}
		}
	}
	string parentField;
	[Parameter]
	string ParentField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetParentFieldOption(dxTarget).Result : parentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetParentFieldOption(dxTarget, value);
			} else {
				this.parentField = value;
			}
		}
	}
	string resolveLabelOverflow;
	[Parameter]
	string ResolveLabelOverflow {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetResolveLabelOverflowOption(dxTarget).Result : resolveLabelOverflow;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetResolveLabelOverflowOption(dxTarget, value);
			} else {
				this.resolveLabelOverflow = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetSelectionModeOption(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetSelectionModeOption(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	object tile;
	[Parameter]
	object Tile {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetTileOption(dxTarget).Result : tile;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetTileOption(dxTarget, value);
			} else {
				this.tile = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetValueFieldOption(dxTarget).Result : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetValueFieldOption(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxTreeMapInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxTreeMapInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onClickEnabled;
	[Parameter]
	bool? OnClickEnabled {
		get => onClickEnabled;
		set => this.onClickEnabled = value;
	}
	bool? onDrillEnabled;
	[Parameter]
	bool? OnDrillEnabled {
		get => onDrillEnabled;
		set => this.onDrillEnabled = value;
	}
	bool? onHoverChangedEnabled;
	[Parameter]
	bool? OnHoverChangedEnabled {
		get => onHoverChangedEnabled;
		set => this.onHoverChangedEnabled = value;
	}
	bool? onNodesInitializedEnabled;
	[Parameter]
	bool? OnNodesInitializedEnabled {
		get => onNodesInitializedEnabled;
		set => this.onNodesInitializedEnabled = value;
	}
	bool? onNodesRenderingEnabled;
	[Parameter]
	bool? OnNodesRenderingEnabled {
		get => onNodesRenderingEnabled;
		set => this.onNodesRenderingEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxTreeMapInterop.Click += DxTreeMap_Click;
		DevExpress.Viz.DxTreeMapInterop.Drill += DxTreeMap_Drill;
		DevExpress.Viz.DxTreeMapInterop.HoverChanged += DxTreeMap_HoverChanged;
		DevExpress.Viz.DxTreeMapInterop.NodesInitialized += DxTreeMap_NodesInitialized;
		DevExpress.Viz.DxTreeMapInterop.NodesRendering += DxTreeMap_NodesRendering;
		DevExpress.Viz.DxTreeMapInterop.SelectionChanged += DxTreeMap_SelectionChanged;
		DevExpress.Viz.DxTreeMapInterop.Drawn += DxTreeMap_Drawn;
		DevExpress.Viz.DxTreeMapInterop.Exported += DxTreeMap_Exported;
		DevExpress.Viz.DxTreeMapInterop.Exporting += DxTreeMap_Exporting;
		DevExpress.Viz.DxTreeMapInterop.FileSaving += DxTreeMap_FileSaving;
		DevExpress.Viz.DxTreeMapInterop.IncidentOccurred += DxTreeMap_IncidentOccurred;
		DevExpress.Viz.DxTreeMapInterop.Disposing += DxTreeMap_Disposing;
		DevExpress.Viz.DxTreeMapInterop.OptionChanged += DxTreeMap_OptionChanged;
		DevExpress.Viz.DxTreeMapInterop.Initialized += DxTreeMap_Initialized;
	}
	[Parameter]
	Action Click { get; set; }
	void DxTreeMap_Click(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Click?.Invoke();
		}
	}
	[Parameter]
	Action Drill { get; set; }
	void DxTreeMap_Drill(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drill?.Invoke();
		}
	}
	[Parameter]
	Action HoverChanged { get; set; }
	void DxTreeMap_HoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			HoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action NodesInitialized { get; set; }
	void DxTreeMap_NodesInitialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodesInitialized?.Invoke();
		}
	}
	[Parameter]
	Action NodesRendering { get; set; }
	void DxTreeMap_NodesRendering(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodesRendering?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxTreeMap_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxTreeMap_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxTreeMap_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxTreeMap_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxTreeMap_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxTreeMap_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxTreeMap_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxTreeMap_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxTreeMap_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void ClearSelection() {
		DevExpress.Viz.DxTreeMapInterop.ClearSelection(dxTarget);
	}
	public void DrillUp() {
		DevExpress.Viz.DxTreeMapInterop.DrillUp(dxTarget);
	}
	public object GetCurrentNode() {
		return DevExpress.Viz.DxTreeMapInterop.GetCurrentNode(dxTarget).Result;
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxTreeMapInterop.GetDataSourceEx(dxTarget).Result;
	}
	public object GetRootNode() {
		return DevExpress.Viz.DxTreeMapInterop.GetRootNode(dxTarget).Result;
	}
	public void HideTooltip() {
		DevExpress.Viz.DxTreeMapInterop.HideTooltip(dxTarget);
	}
	public void ResetDrillDown() {
		DevExpress.Viz.DxTreeMapInterop.ResetDrillDown(dxTarget);
	}
	public void Dispose() {
		DevExpress.Viz.DxTreeMapInterop.Click -= DxTreeMap_Click;
		DevExpress.Viz.DxTreeMapInterop.Drill -= DxTreeMap_Drill;
		DevExpress.Viz.DxTreeMapInterop.HoverChanged -= DxTreeMap_HoverChanged;
		DevExpress.Viz.DxTreeMapInterop.NodesInitialized -= DxTreeMap_NodesInitialized;
		DevExpress.Viz.DxTreeMapInterop.NodesRendering -= DxTreeMap_NodesRendering;
		DevExpress.Viz.DxTreeMapInterop.SelectionChanged -= DxTreeMap_SelectionChanged;
		DevExpress.Viz.DxTreeMapInterop.Drawn -= DxTreeMap_Drawn;
		DevExpress.Viz.DxTreeMapInterop.Exported -= DxTreeMap_Exported;
		DevExpress.Viz.DxTreeMapInterop.Exporting -= DxTreeMap_Exporting;
		DevExpress.Viz.DxTreeMapInterop.FileSaving -= DxTreeMap_FileSaving;
		DevExpress.Viz.DxTreeMapInterop.IncidentOccurred -= DxTreeMap_IncidentOccurred;
		DevExpress.Viz.DxTreeMapInterop.Disposing -= DxTreeMap_Disposing;
		DevExpress.Viz.DxTreeMapInterop.OptionChanged -= DxTreeMap_OptionChanged;
		DevExpress.Viz.DxTreeMapInterop.Initialized -= DxTreeMap_Initialized;
	}
}
