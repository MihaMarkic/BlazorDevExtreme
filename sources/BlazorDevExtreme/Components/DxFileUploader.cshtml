@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxFileUploaderOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxFileUploader() : base("DxFileUploader") { }
	protected override DevExpress.Ui.DxFileUploaderOptions CreateOptions() {
		return new DevExpress.Ui.DxFileUploaderOptions {
			accept = accept,
			allowCanceling = allowCanceling,
			allowedFileExtensions = allowedFileExtensions,
			chunkSize = chunkSize,
			focusStateEnabled = focusStateEnabled,
			invalidFileExtensionMessage = invalidFileExtensionMessage,
			invalidMaxFileSizeMessage = invalidMaxFileSizeMessage,
			invalidMinFileSizeMessage = invalidMinFileSizeMessage,
			labelText = labelText,
			maxFileSize = maxFileSize,
			minFileSize = minFileSize,
			multiple = multiple,
			name = name,
			progress = progressValue,
			readyToUploadMessage = readyToUploadMessage,
			selectButtonText = selectButtonText,
			showFileList = showFileList,
			uploadButtonText = uploadButtonText,
			uploadedMessage = uploadedMessage,
			uploadFailedMessage = uploadFailedMessage,
			uploadHeaders = uploadHeaders,
			uploadMethod = uploadMethod,
			uploadMode = uploadMode,
			uploadUrl = uploadUrl,
			value = value,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onProgressEnabled = onProgressEnabled,
			onUploadAbortedEnabled = onUploadAbortedEnabled,
			onUploadedEnabled = onUploadedEnabled,
			onUploadErrorEnabled = onUploadErrorEnabled,
			onUploadStartedEnabled = onUploadStartedEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxFileUploaderOptions options) {
		return DevExpress.Ui.DxFileUploaderInterop.Init(dxTarget, options);
	}
	string accept;
	[Parameter]
	string Accept {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetAcceptOption(dxTarget).Result : accept;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetAcceptOption(dxTarget, value);
			} else {
				this.accept = value;
			}
		}
	}
	bool? allowCanceling;
	[Parameter]
	bool? AllowCanceling {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetAllowCancelingOption(dxTarget).Result : allowCanceling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetAllowCancelingOption(dxTarget, value);
			} else {
				this.allowCanceling = value;
			}
		}
	}
	object allowedFileExtensions;
	[Parameter]
	object AllowedFileExtensions {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetAllowedFileExtensionsOption(dxTarget).Result : allowedFileExtensions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetAllowedFileExtensionsOption(dxTarget, value);
			} else {
				this.allowedFileExtensions = value;
			}
		}
	}
	float? chunkSize;
	[Parameter]
	float? ChunkSize {
		get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetChunkSizeOption(dxTarget).Result : chunkSize;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetChunkSizeOption(dxTarget, value);
			} else {
				this.chunkSize = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string invalidFileExtensionMessage;
	[Parameter]
	string InvalidFileExtensionMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetInvalidFileExtensionMessageOption(dxTarget).Result : invalidFileExtensionMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetInvalidFileExtensionMessageOption(dxTarget, value);
			} else {
				this.invalidFileExtensionMessage = value;
			}
		}
	}
	string invalidMaxFileSizeMessage;
	[Parameter]
	string InvalidMaxFileSizeMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetInvalidMaxFileSizeMessageOption(dxTarget).Result : invalidMaxFileSizeMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetInvalidMaxFileSizeMessageOption(dxTarget, value);
			} else {
				this.invalidMaxFileSizeMessage = value;
			}
		}
	}
	string invalidMinFileSizeMessage;
	[Parameter]
	string InvalidMinFileSizeMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetInvalidMinFileSizeMessageOption(dxTarget).Result : invalidMinFileSizeMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetInvalidMinFileSizeMessageOption(dxTarget, value);
			} else {
				this.invalidMinFileSizeMessage = value;
			}
		}
	}
	string labelText;
	[Parameter]
	string LabelText {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetLabelTextOption(dxTarget).Result : labelText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetLabelTextOption(dxTarget, value);
			} else {
				this.labelText = value;
			}
		}
	}
	float? maxFileSize;
	[Parameter]
	float? MaxFileSize {
		get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetMaxFileSizeOption(dxTarget).Result : maxFileSize;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetMaxFileSizeOption(dxTarget, value);
			} else {
				this.maxFileSize = value;
			}
		}
	}
	float? minFileSize;
	[Parameter]
	float? MinFileSize {
		get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetMinFileSizeOption(dxTarget).Result : minFileSize;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetMinFileSizeOption(dxTarget, value);
			} else {
				this.minFileSize = value;
			}
		}
	}
	bool? multiple;
	[Parameter]
	bool? Multiple {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetMultipleOption(dxTarget).Result : multiple;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetMultipleOption(dxTarget, value);
			} else {
				this.multiple = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	float? progressValue;
	[Parameter]
	float? ProgressValue {
		get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetProgressOption(dxTarget).Result : progressValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetProgressOption(dxTarget, value);
			} else {
				this.progressValue = value;
			}
		}
	}
	string readyToUploadMessage;
	[Parameter]
	string ReadyToUploadMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetReadyToUploadMessageOption(dxTarget).Result : readyToUploadMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetReadyToUploadMessageOption(dxTarget, value);
			} else {
				this.readyToUploadMessage = value;
			}
		}
	}
	string selectButtonText;
	[Parameter]
	string SelectButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetSelectButtonTextOption(dxTarget).Result : selectButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetSelectButtonTextOption(dxTarget, value);
			} else {
				this.selectButtonText = value;
			}
		}
	}
	bool? showFileList;
	[Parameter]
	bool? ShowFileList {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetShowFileListOption(dxTarget).Result : showFileList;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetShowFileListOption(dxTarget, value);
			} else {
				this.showFileList = value;
			}
		}
	}
	string uploadButtonText;
	[Parameter]
	string UploadButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadButtonTextOption(dxTarget).Result : uploadButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadButtonTextOption(dxTarget, value);
			} else {
				this.uploadButtonText = value;
			}
		}
	}
	string uploadedMessage;
	[Parameter]
	string UploadedMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadedMessageOption(dxTarget).Result : uploadedMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadedMessageOption(dxTarget, value);
			} else {
				this.uploadedMessage = value;
			}
		}
	}
	string uploadFailedMessage;
	[Parameter]
	string UploadFailedMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadFailedMessageOption(dxTarget).Result : uploadFailedMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadFailedMessageOption(dxTarget, value);
			} else {
				this.uploadFailedMessage = value;
			}
		}
	}
	object uploadHeaders;
	[Parameter]
	object UploadHeaders {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetUploadHeadersOption(dxTarget).Result : uploadHeaders;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadHeadersOption(dxTarget, value);
			} else {
				this.uploadHeaders = value;
			}
		}
	}
	string uploadMethod;
	[Parameter]
	string UploadMethod {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadMethodOption(dxTarget).Result : uploadMethod;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadMethodOption(dxTarget, value);
			} else {
				this.uploadMethod = value;
			}
		}
	}
	string uploadMode;
	[Parameter]
	string UploadMode {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadModeOption(dxTarget).Result : uploadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadModeOption(dxTarget, value);
			} else {
				this.uploadMode = value;
			}
		}
	}
	string uploadUrl;
	[Parameter]
	string UploadUrl {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetUploadUrlOption(dxTarget).Result : uploadUrl;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetUploadUrlOption(dxTarget, value);
			} else {
				this.uploadUrl = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxFileUploaderInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxFileUploaderInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxFileUploaderInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxFileUploaderInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFileUploaderInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onProgressEnabled;
	[Parameter]
	bool? OnProgressEnabled {
		get => onProgressEnabled;
		set => this.onProgressEnabled = value;
	}
	bool? onUploadAbortedEnabled;
	[Parameter]
	bool? OnUploadAbortedEnabled {
		get => onUploadAbortedEnabled;
		set => this.onUploadAbortedEnabled = value;
	}
	bool? onUploadedEnabled;
	[Parameter]
	bool? OnUploadedEnabled {
		get => onUploadedEnabled;
		set => this.onUploadedEnabled = value;
	}
	bool? onUploadErrorEnabled;
	[Parameter]
	bool? OnUploadErrorEnabled {
		get => onUploadErrorEnabled;
		set => this.onUploadErrorEnabled = value;
	}
	bool? onUploadStartedEnabled;
	[Parameter]
	bool? OnUploadStartedEnabled {
		get => onUploadStartedEnabled;
		set => this.onUploadStartedEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFileUploaderInterop.Progress += DxFileUploader_Progress;
		DevExpress.Ui.DxFileUploaderInterop.UploadAborted += DxFileUploader_UploadAborted;
		DevExpress.Ui.DxFileUploaderInterop.Uploaded += DxFileUploader_Uploaded;
		DevExpress.Ui.DxFileUploaderInterop.UploadError += DxFileUploader_UploadError;
		DevExpress.Ui.DxFileUploaderInterop.UploadStarted += DxFileUploader_UploadStarted;
		DevExpress.Ui.DxFileUploaderInterop.ValueChanged += DxFileUploader_ValueChanged;
		DevExpress.Ui.DxFileUploaderInterop.ContentReady += DxFileUploader_ContentReady;
		DevExpress.Ui.DxFileUploaderInterop.Disposing += DxFileUploader_Disposing;
		DevExpress.Ui.DxFileUploaderInterop.OptionChanged += DxFileUploader_OptionChanged;
		DevExpress.Ui.DxFileUploaderInterop.Initialized += DxFileUploader_Initialized;
	}
	[Parameter]
	Action Progress { get; set; }
	void DxFileUploader_Progress(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Progress?.Invoke();
		}
	}
	[Parameter]
	Action UploadAborted { get; set; }
	void DxFileUploader_UploadAborted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			UploadAborted?.Invoke();
		}
	}
	[Parameter]
	Action Uploaded { get; set; }
	void DxFileUploader_Uploaded(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Uploaded?.Invoke();
		}
	}
	[Parameter]
	Action UploadError { get; set; }
	void DxFileUploader_UploadError(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			UploadError?.Invoke();
		}
	}
	[Parameter]
	Action UploadStarted { get; set; }
	void DxFileUploader_UploadStarted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			UploadStarted?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxFileUploader_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxFileUploader_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxFileUploader_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxFileUploader_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxFileUploader_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxFileUploaderInterop.Progress -= DxFileUploader_Progress;
		DevExpress.Ui.DxFileUploaderInterop.UploadAborted -= DxFileUploader_UploadAborted;
		DevExpress.Ui.DxFileUploaderInterop.Uploaded -= DxFileUploader_Uploaded;
		DevExpress.Ui.DxFileUploaderInterop.UploadError -= DxFileUploader_UploadError;
		DevExpress.Ui.DxFileUploaderInterop.UploadStarted -= DxFileUploader_UploadStarted;
		DevExpress.Ui.DxFileUploaderInterop.ValueChanged -= DxFileUploader_ValueChanged;
		DevExpress.Ui.DxFileUploaderInterop.ContentReady -= DxFileUploader_ContentReady;
		DevExpress.Ui.DxFileUploaderInterop.Disposing -= DxFileUploader_Disposing;
		DevExpress.Ui.DxFileUploaderInterop.OptionChanged -= DxFileUploader_OptionChanged;
		DevExpress.Ui.DxFileUploaderInterop.Initialized -= DxFileUploader_Initialized;
	}
}
