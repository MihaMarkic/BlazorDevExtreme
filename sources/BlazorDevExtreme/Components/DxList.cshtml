@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxListOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxList() : base("DxList") { }
	protected override DevExpress.Ui.DxListOptions CreateOptions() {
		return new DevExpress.Ui.DxListOptions {
			activeStateEnabled = activeStateEnabled,
			allowItemDeleting = allowItemDeleting,
			allowItemReordering = allowItemReordering,
			bounceEnabled = bounceEnabled,
			collapsibleGroups = collapsibleGroups,
			focusStateEnabled = focusStateEnabled,
			grouped = grouped,
			groupTemplate = groupTemplate,
			hoverStateEnabled = hoverStateEnabled,
			indicateLoading = indicateLoading,
			itemDeleteMode = itemDeleteMode,
			menuItems = menuItems,
			menuMode = menuMode,
			nextButtonText = nextButtonText,
			pageLoadingText = pageLoadingText,
			pageLoadMode = pageLoadMode,
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			pullRefreshEnabled = pullRefreshEnabled,
			refreshingText = refreshingText,
			repaintChangesOnly = repaintChangesOnly,
			scrollByContent = scrollByContent,
			scrollByThumb = scrollByThumb,
			scrollingEnabled = scrollingEnabled,
			selectAllMode = selectAllMode,
			selectionMode = selectionMode,
			showScrollbar = showScrollbar,
			showSelectionControls = showSelectionControls,
			useNativeScrolling = useNativeScrolling,
			dataSource = dataSource,
			itemHoldTimeout = itemHoldTimeout,
			items = items,
			itemTemplate = itemTemplate,
			keyExpr = keyExpr,
			noDataText = noDataText,
			selectedIndex = selectedIndex,
			selectedItem = selectedItem,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			searchEditorOptions = searchEditorOptions,
			searchEnabled = searchEnabled,
			searchExpr = searchExpr,
			searchMode = searchMode,
			searchTimeout = searchTimeout,
			searchValue = searchValue,
			onGroupRenderedEnabled = onGroupRenderedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemDeletedEnabled = onItemDeletedEnabled,
			onItemDeletingEnabled = onItemDeletingEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemReorderedEnabled = onItemReorderedEnabled,
			onItemSwipeEnabled = onItemSwipeEnabled,
			onPageLoadingEnabled = onPageLoadingEnabled,
			onPullRefreshEnabled = onPullRefreshEnabled,
			onScrollEnabled = onScrollEnabled,
			onSelectAllValueChangedEnabled = onSelectAllValueChangedEnabled,
			onItemRenderedEnabled = onItemRenderedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxListOptions options) {
		return DevExpress.Ui.DxListInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? allowItemDeleting;
	[Parameter]
	bool? AllowItemDeleting {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetAllowItemDeletingOption(dxTarget).Result : allowItemDeleting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemDeletingOption(dxTarget, value);
			} else {
				this.allowItemDeleting = value;
			}
		}
	}
	bool? allowItemReordering;
	[Parameter]
	bool? AllowItemReordering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetAllowItemReorderingOption(dxTarget).Result : allowItemReordering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemReorderingOption(dxTarget, value);
			} else {
				this.allowItemReordering = value;
			}
		}
	}
	bool? bounceEnabled;
	[Parameter]
	bool? BounceEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetBounceEnabledOption(dxTarget).Result : bounceEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetBounceEnabledOption(dxTarget, value);
			} else {
				this.bounceEnabled = value;
			}
		}
	}
	bool? collapsibleGroups;
	[Parameter]
	bool? CollapsibleGroups {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetCollapsibleGroupsOption(dxTarget).Result : collapsibleGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetCollapsibleGroupsOption(dxTarget, value);
			} else {
				this.collapsibleGroups = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetGroupedOption(dxTarget).Result : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGroupedOption(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetGroupTemplateOption(dxTarget).Result : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGroupTemplateOption(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	bool? indicateLoading;
	[Parameter]
	bool? IndicateLoading {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetIndicateLoadingOption(dxTarget).Result : indicateLoading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetIndicateLoadingOption(dxTarget, value);
			} else {
				this.indicateLoading = value;
			}
		}
	}
	string itemDeleteMode;
	[Parameter]
	string ItemDeleteMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetItemDeleteModeOption(dxTarget).Result : itemDeleteMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemDeleteModeOption(dxTarget, value);
			} else {
				this.itemDeleteMode = value;
			}
		}
	}
	object menuItems;
	[Parameter]
	object MenuItems {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetMenuItemsOption(dxTarget).Result : menuItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuItemsOption(dxTarget, value);
			} else {
				this.menuItems = value;
			}
		}
	}
	string menuMode;
	[Parameter]
	string MenuMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetMenuModeOption(dxTarget).Result : menuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuModeOption(dxTarget, value);
			} else {
				this.menuMode = value;
			}
		}
	}
	string nextButtonText;
	[Parameter]
	string NextButtonText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetNextButtonTextOption(dxTarget).Result : nextButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetNextButtonTextOption(dxTarget, value);
			} else {
				this.nextButtonText = value;
			}
		}
	}
	string pageLoadingText;
	[Parameter]
	string PageLoadingText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetPageLoadingTextOption(dxTarget).Result : pageLoadingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadingTextOption(dxTarget, value);
			} else {
				this.pageLoadingText = value;
			}
		}
	}
	string pageLoadMode;
	[Parameter]
	string PageLoadMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetPageLoadModeOption(dxTarget).Result : pageLoadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadModeOption(dxTarget, value);
			} else {
				this.pageLoadMode = value;
			}
		}
	}
	string pulledDownText;
	[Parameter]
	string PulledDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetPulledDownTextOption(dxTarget).Result : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPulledDownTextOption(dxTarget, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	[Parameter]
	string PullingDownText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetPullingDownTextOption(dxTarget).Result : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullingDownTextOption(dxTarget, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	bool? pullRefreshEnabled;
	[Parameter]
	bool? PullRefreshEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetPullRefreshEnabledOption(dxTarget).Result : pullRefreshEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullRefreshEnabledOption(dxTarget, value);
			} else {
				this.pullRefreshEnabled = value;
			}
		}
	}
	string refreshingText;
	[Parameter]
	string RefreshingText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetRefreshingTextOption(dxTarget).Result : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetRefreshingTextOption(dxTarget, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? repaintChangesOnly;
	[Parameter]
	bool? RepaintChangesOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetRepaintChangesOnlyOption(dxTarget).Result : repaintChangesOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetRepaintChangesOnlyOption(dxTarget, value);
			} else {
				this.repaintChangesOnly = value;
			}
		}
	}
	bool? scrollByContent;
	[Parameter]
	bool? ScrollByContent {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetScrollByContentOption(dxTarget).Result : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByContentOption(dxTarget, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollByThumb;
	[Parameter]
	bool? ScrollByThumb {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetScrollByThumbOption(dxTarget).Result : scrollByThumb;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByThumbOption(dxTarget, value);
			} else {
				this.scrollByThumb = value;
			}
		}
	}
	bool? scrollingEnabled;
	[Parameter]
	bool? ScrollingEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetScrollingEnabledOption(dxTarget).Result : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollingEnabledOption(dxTarget, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	string selectAllMode;
	[Parameter]
	string SelectAllMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetSelectAllModeOption(dxTarget).Result : selectAllMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectAllModeOption(dxTarget, value);
			} else {
				this.selectAllMode = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetSelectionModeOption(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectionModeOption(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	string showScrollbar;
	[Parameter]
	string ShowScrollbar {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetShowScrollbarOption(dxTarget).Result : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowScrollbarOption(dxTarget, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	bool? showSelectionControls;
	[Parameter]
	bool? ShowSelectionControls {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetShowSelectionControlsOption(dxTarget).Result : showSelectionControls;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowSelectionControlsOption(dxTarget, value);
			} else {
				this.showSelectionControls = value;
			}
		}
	}
	bool? useNativeScrolling;
	[Parameter]
	bool? UseNativeScrolling {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetUseNativeScrollingOption(dxTarget).Result : useNativeScrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetUseNativeScrollingOption(dxTarget, value);
			} else {
				this.useNativeScrolling = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	float? itemHoldTimeout;
	[Parameter]
	float? ItemHoldTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxListInterop.GetItemHoldTimeoutOption(dxTarget).Result : itemHoldTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemHoldTimeoutOption(dxTarget, value);
			} else {
				this.itemHoldTimeout = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetItemTemplateOption(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemTemplateOption(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetKeyExprOption(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetKeyExprOption(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxListInterop.GetSelectedIndexOption(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectedIndexOption(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectedItemOption(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectedItemOption(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectedItemKeysOption(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectedItemKeysOption(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectedItemsOption(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectedItemsOption(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxListInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	object searchEditorOptions;
	[Parameter]
	object SearchEditorOptions {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSearchEditorOptionsOption(dxTarget).Result : searchEditorOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchEditorOptionsOption(dxTarget, value);
			} else {
				this.searchEditorOptions = value;
			}
		}
	}
	bool? searchEnabled;
	[Parameter]
	bool? SearchEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxListInterop.GetSearchEnabledOption(dxTarget).Result : searchEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchEnabledOption(dxTarget, value);
			} else {
				this.searchEnabled = value;
			}
		}
	}
	object searchExpr;
	[Parameter]
	object SearchExpr {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSearchExprOption(dxTarget).Result : searchExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchExprOption(dxTarget, value);
			} else {
				this.searchExpr = value;
			}
		}
	}
	string searchMode;
	[Parameter]
	string SearchMode {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetSearchModeOption(dxTarget).Result : searchMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchModeOption(dxTarget, value);
			} else {
				this.searchMode = value;
			}
		}
	}
	float? searchTimeout;
	[Parameter]
	float? SearchTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxListInterop.GetSearchTimeoutOption(dxTarget).Result : searchTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchTimeoutOption(dxTarget, value);
			} else {
				this.searchTimeout = value;
			}
		}
	}
	string searchValue;
	[Parameter]
	string SearchValue {
		get => isInitialized ? (string)DevExpress.Ui.DxListInterop.GetSearchValueOption(dxTarget).Result : searchValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSearchValueOption(dxTarget, value);
			} else {
				this.searchValue = value;
			}
		}
	}
	bool? onGroupRenderedEnabled;
	[Parameter]
	bool? OnGroupRenderedEnabled {
		get => onGroupRenderedEnabled;
		set => this.onGroupRenderedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemDeletedEnabled;
	[Parameter]
	bool? OnItemDeletedEnabled {
		get => onItemDeletedEnabled;
		set => this.onItemDeletedEnabled = value;
	}
	bool? onItemDeletingEnabled;
	[Parameter]
	bool? OnItemDeletingEnabled {
		get => onItemDeletingEnabled;
		set => this.onItemDeletingEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemReorderedEnabled;
	[Parameter]
	bool? OnItemReorderedEnabled {
		get => onItemReorderedEnabled;
		set => this.onItemReorderedEnabled = value;
	}
	bool? onItemSwipeEnabled;
	[Parameter]
	bool? OnItemSwipeEnabled {
		get => onItemSwipeEnabled;
		set => this.onItemSwipeEnabled = value;
	}
	bool? onPageLoadingEnabled;
	[Parameter]
	bool? OnPageLoadingEnabled {
		get => onPageLoadingEnabled;
		set => this.onPageLoadingEnabled = value;
	}
	bool? onPullRefreshEnabled;
	[Parameter]
	bool? OnPullRefreshEnabled {
		get => onPullRefreshEnabled;
		set => this.onPullRefreshEnabled = value;
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onSelectAllValueChangedEnabled;
	[Parameter]
	bool? OnSelectAllValueChangedEnabled {
		get => onSelectAllValueChangedEnabled;
		set => this.onSelectAllValueChangedEnabled = value;
	}
	bool? onItemRenderedEnabled;
	[Parameter]
	bool? OnItemRenderedEnabled {
		get => onItemRenderedEnabled;
		set => this.onItemRenderedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxListInterop.GroupRendered += DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick += DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu += DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted += DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting += DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold += DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered += DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe += DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading += DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh += DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll += DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged += DxList_SelectAllValueChanged;
		DevExpress.Ui.DxListInterop.ItemRendered += DxList_ItemRendered;
		DevExpress.Ui.DxListInterop.SelectionChanged += DxList_SelectionChanged;
		DevExpress.Ui.DxListInterop.ContentReady += DxList_ContentReady;
		DevExpress.Ui.DxListInterop.Disposing += DxList_Disposing;
		DevExpress.Ui.DxListInterop.OptionChanged += DxList_OptionChanged;
		DevExpress.Ui.DxListInterop.Initialized += DxList_Initialized;
	}
	[Parameter]
	Action GroupRendered { get; set; }
	void DxList_GroupRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			GroupRendered?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxList_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxList_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemDeleted { get; set; }
	void DxList_ItemDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleted?.Invoke();
		}
	}
	[Parameter]
	Action ItemDeleting { get; set; }
	void DxList_ItemDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleting?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxList_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemReordered { get; set; }
	void DxList_ItemReordered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemReordered?.Invoke();
		}
	}
	[Parameter]
	Action ItemSwipe { get; set; }
	void DxList_ItemSwipe(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemSwipe?.Invoke();
		}
	}
	[Parameter]
	Action PageLoading { get; set; }
	void DxList_PageLoading(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PageLoading?.Invoke();
		}
	}
	[Parameter]
	Action PullRefresh { get; set; }
	void DxList_PullRefresh(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullRefresh?.Invoke();
		}
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxList_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action SelectAllValueChanged { get; set; }
	void DxList_SelectAllValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectAllValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ItemRendered { get; set; }
	void DxList_ItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxList_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxList_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxList_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxList_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxList_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public float ClientHeight() {
		return DevExpress.Ui.DxListInterop.ClientHeight(dxTarget).Result;
	}
	public object CollapseGroup(float groupIndex) {
		return DevExpress.Ui.DxListInterop.CollapseGroup(dxTarget, groupIndex).Result;
	}
	public object DeleteItem(object itemElement) {
		return DevExpress.Ui.DxListInterop.DeleteItem(dxTarget, itemElement).Result;
	}
	public object ExpandGroup(float groupIndex) {
		return DevExpress.Ui.DxListInterop.ExpandGroup(dxTarget, groupIndex).Result;
	}
	public bool IsItemSelected(object itemElement) {
		return DevExpress.Ui.DxListInterop.IsItemSelected(dxTarget, itemElement).Result;
	}
	public void Reload() {
		DevExpress.Ui.DxListInterop.Reload(dxTarget);
	}
	public object ReorderItem(object itemElement, object toItemElement) {
		return DevExpress.Ui.DxListInterop.ReorderItem(dxTarget, itemElement, toItemElement).Result;
	}
	public void ScrollBy(float distance) {
		DevExpress.Ui.DxListInterop.ScrollBy(dxTarget, distance);
	}
	public float ScrollHeight() {
		return DevExpress.Ui.DxListInterop.ScrollHeight(dxTarget).Result;
	}
	public void ScrollTo(float location) {
		DevExpress.Ui.DxListInterop.ScrollTo(dxTarget, location);
	}
	public void ScrollToItem(object itemElement) {
		DevExpress.Ui.DxListInterop.ScrollToItem(dxTarget, itemElement);
	}
	public float ScrollTop() {
		return DevExpress.Ui.DxListInterop.ScrollTop(dxTarget).Result;
	}
	public void SelectAll() {
		DevExpress.Ui.DxListInterop.SelectAll(dxTarget);
	}
	public void SelectItem(object itemElement) {
		DevExpress.Ui.DxListInterop.SelectItem(dxTarget, itemElement);
	}
	public void UnselectAll() {
		DevExpress.Ui.DxListInterop.UnselectAll(dxTarget);
	}
	public void UnselectItem(object itemElement) {
		DevExpress.Ui.DxListInterop.UnselectItem(dxTarget, itemElement);
	}
	public object UpdateDimensions() {
		return DevExpress.Ui.DxListInterop.UpdateDimensions(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxListInterop.GroupRendered -= DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick -= DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu -= DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted -= DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting -= DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold -= DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered -= DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe -= DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading -= DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh -= DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll -= DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged -= DxList_SelectAllValueChanged;
		DevExpress.Ui.DxListInterop.ItemRendered -= DxList_ItemRendered;
		DevExpress.Ui.DxListInterop.SelectionChanged -= DxList_SelectionChanged;
		DevExpress.Ui.DxListInterop.ContentReady -= DxList_ContentReady;
		DevExpress.Ui.DxListInterop.Disposing -= DxList_Disposing;
		DevExpress.Ui.DxListInterop.OptionChanged -= DxList_OptionChanged;
		DevExpress.Ui.DxListInterop.Initialized -= DxList_Initialized;
	}
}
