@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxButtonOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxButton() : base("DxButton") { }
	protected override DevExpress.Ui.DxButtonOptions CreateOptions() {
		return new DevExpress.Ui.DxButtonOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			icon = icon,
			stylingMode = stylingMode,
			template = template,
			text = text,
			type = type,
			useSubmitBehavior = useSubmitBehavior,
			validationGroup = validationGroup,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onClickEnabled = onClickEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxButtonOptions options) {
		return DevExpress.Ui.DxButtonInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	string icon;
	[Parameter]
	string Icon {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetIconOption(dxTarget).Result : icon;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetIconOption(dxTarget, value);
			} else {
				this.icon = value;
			}
		}
	}
	string stylingMode;
	[Parameter]
	string StylingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetStylingModeOption(dxTarget).Result : stylingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetStylingModeOption(dxTarget, value);
			} else {
				this.stylingMode = value;
			}
		}
	}
	object template;
	[Parameter]
	object Template {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetTemplateOption(dxTarget).Result : template;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetTemplateOption(dxTarget, value);
			} else {
				this.template = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetTextOption(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetTextOption(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetTypeOption(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetTypeOption(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	bool? useSubmitBehavior;
	[Parameter]
	bool? UseSubmitBehavior {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetUseSubmitBehaviorOption(dxTarget).Result : useSubmitBehavior;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetUseSubmitBehaviorOption(dxTarget, value);
			} else {
				this.useSubmitBehavior = value;
			}
		}
	}
	string validationGroup;
	[Parameter]
	string ValidationGroup {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetValidationGroupOption(dxTarget).Result : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetValidationGroupOption(dxTarget, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxButtonInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxButtonInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxButtonInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onClickEnabled;
	[Parameter]
	bool? OnClickEnabled {
		get => onClickEnabled;
		set => this.onClickEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxButtonInterop.Click += DxButton_Click;
		DevExpress.Ui.DxButtonInterop.ContentReady += DxButton_ContentReady;
		DevExpress.Ui.DxButtonInterop.Disposing += DxButton_Disposing;
		DevExpress.Ui.DxButtonInterop.OptionChanged += DxButton_OptionChanged;
		DevExpress.Ui.DxButtonInterop.Initialized += DxButton_Initialized;
	}
	[Parameter]
	Action Click { get; set; }
	void DxButton_Click(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Click?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxButton_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxButton_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxButton_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxButton_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxButtonInterop.Click -= DxButton_Click;
		DevExpress.Ui.DxButtonInterop.ContentReady -= DxButton_ContentReady;
		DevExpress.Ui.DxButtonInterop.Disposing -= DxButton_Disposing;
		DevExpress.Ui.DxButtonInterop.OptionChanged -= DxButton_OptionChanged;
		DevExpress.Ui.DxButtonInterop.Initialized -= DxButton_Initialized;
	}
}
