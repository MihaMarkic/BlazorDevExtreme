
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxPivotGridOptions>

<div id="@Id"  @ref="dxTarget"></div>

@code {
	ElementReference dxTarget;
	public DxPivotGrid() : base("DxPivotGrid") { }
	protected override DevExpress.Ui.DxPivotGridOptions CreateOptions() {
		return new DevExpress.Ui.DxPivotGridOptions {
			allowExpandAll = allowExpandAll,
			allowFiltering = allowFiltering,
			allowSorting = allowSorting,
			allowSortingBySummary = allowSortingBySummary,
			dataFieldArea = dataFieldArea,
			dataSource = dataSource,
			export = export,
			fieldChooser = fieldChooser,
			fieldPanel = fieldPanel,
			headerFilter = headerFilter,
			hideEmptySummaryCells = hideEmptySummaryCells,
			loadPanel = loadPanel,
			rowHeaderLayout = rowHeaderLayout,
			scrolling = scrolling,
			showBorders = showBorders,
			showColumnGrandTotals = showColumnGrandTotals,
			showColumnTotals = showColumnTotals,
			showRowGrandTotals = showRowGrandTotals,
			showRowTotals = showRowTotals,
			showTotalsPrior = showTotalsPrior,
			stateStoring = stateStoring,
			texts = texts,
			wordWrapEnabled = wordWrapEnabled,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onCellClickEnabled = onCellClickEnabled,
			onCellPreparedEnabled = onCellPreparedEnabled,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Ui.DxPivotGridOptions options) {
		return DevExpress.Ui.DxPivotGridInterop.Init(dxTarget, options);
	}
	bool? allowExpandAll;
	[Parameter]
	bool? AllowExpandAll {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetAllowExpandAll(dxTarget).Result : allowExpandAll;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowExpandAll(dxTarget, value);
			} else {
				this.allowExpandAll = value;
			}
		}
	}
	bool? allowFiltering;
	[Parameter]
	bool? AllowFiltering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetAllowFiltering(dxTarget).Result : allowFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowFiltering(dxTarget, value);
			} else {
				this.allowFiltering = value;
			}
		}
	}
	bool? allowSorting;
	[Parameter]
	bool? AllowSorting {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetAllowSorting(dxTarget).Result : allowSorting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowSorting(dxTarget, value);
			} else {
				this.allowSorting = value;
			}
		}
	}
	bool? allowSortingBySummary;
	[Parameter]
	bool? AllowSortingBySummary {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetAllowSortingBySummary(dxTarget).Result : allowSortingBySummary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowSortingBySummary(dxTarget, value);
			} else {
				this.allowSortingBySummary = value;
			}
		}
	}
	string dataFieldArea;
	[Parameter]
	string DataFieldArea {
		get => isInitialized ? (string)DevExpress.Ui.DxPivotGridInterop.GetDataFieldArea(dxTarget).Result : dataFieldArea;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetDataFieldArea(dxTarget, value);
			} else {
				this.dataFieldArea = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetExport(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetExport(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object fieldChooser;
	[Parameter]
	object FieldChooser {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetFieldChooser(dxTarget).Result : fieldChooser;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetFieldChooser(dxTarget, value);
			} else {
				this.fieldChooser = value;
			}
		}
	}
	object fieldPanel;
	[Parameter]
	object FieldPanel {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetFieldPanel(dxTarget).Result : fieldPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetFieldPanel(dxTarget, value);
			} else {
				this.fieldPanel = value;
			}
		}
	}
	object headerFilter;
	[Parameter]
	object HeaderFilter {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetHeaderFilter(dxTarget).Result : headerFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHeaderFilter(dxTarget, value);
			} else {
				this.headerFilter = value;
			}
		}
	}
	bool? hideEmptySummaryCells;
	[Parameter]
	bool? HideEmptySummaryCells {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetHideEmptySummaryCells(dxTarget).Result : hideEmptySummaryCells;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHideEmptySummaryCells(dxTarget, value);
			} else {
				this.hideEmptySummaryCells = value;
			}
		}
	}
	object loadPanel;
	[Parameter]
	object LoadPanel {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetLoadPanel(dxTarget).Result : loadPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetLoadPanel(dxTarget, value);
			} else {
				this.loadPanel = value;
			}
		}
	}
	string rowHeaderLayout;
	[Parameter]
	string RowHeaderLayout {
		get => isInitialized ? (string)DevExpress.Ui.DxPivotGridInterop.GetRowHeaderLayout(dxTarget).Result : rowHeaderLayout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetRowHeaderLayout(dxTarget, value);
			} else {
				this.rowHeaderLayout = value;
			}
		}
	}
	object scrolling;
	[Parameter]
	object Scrolling {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetScrolling(dxTarget).Result : scrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetScrolling(dxTarget, value);
			} else {
				this.scrolling = value;
			}
		}
	}
	bool? showBorders;
	[Parameter]
	bool? ShowBorders {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetShowBorders(dxTarget).Result : showBorders;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowBorders(dxTarget, value);
			} else {
				this.showBorders = value;
			}
		}
	}
	bool? showColumnGrandTotals;
	[Parameter]
	bool? ShowColumnGrandTotals {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetShowColumnGrandTotals(dxTarget).Result : showColumnGrandTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowColumnGrandTotals(dxTarget, value);
			} else {
				this.showColumnGrandTotals = value;
			}
		}
	}
	bool? showColumnTotals;
	[Parameter]
	bool? ShowColumnTotals {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetShowColumnTotals(dxTarget).Result : showColumnTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowColumnTotals(dxTarget, value);
			} else {
				this.showColumnTotals = value;
			}
		}
	}
	bool? showRowGrandTotals;
	[Parameter]
	bool? ShowRowGrandTotals {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetShowRowGrandTotals(dxTarget).Result : showRowGrandTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowRowGrandTotals(dxTarget, value);
			} else {
				this.showRowGrandTotals = value;
			}
		}
	}
	bool? showRowTotals;
	[Parameter]
	bool? ShowRowTotals {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetShowRowTotals(dxTarget).Result : showRowTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowRowTotals(dxTarget, value);
			} else {
				this.showRowTotals = value;
			}
		}
	}
	string showTotalsPrior;
	[Parameter]
	string ShowTotalsPrior {
		get => isInitialized ? (string)DevExpress.Ui.DxPivotGridInterop.GetShowTotalsPrior(dxTarget).Result : showTotalsPrior;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowTotalsPrior(dxTarget, value);
			} else {
				this.showTotalsPrior = value;
			}
		}
	}
	object stateStoring;
	[Parameter]
	object StateStoring {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetStateStoring(dxTarget).Result : stateStoring;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetStateStoring(dxTarget, value);
			} else {
				this.stateStoring = value;
			}
		}
	}
	object texts;
	[Parameter]
	object Texts {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetTexts(dxTarget).Result : texts;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetTexts(dxTarget, value);
			} else {
				this.texts = value;
			}
		}
	}
	bool? wordWrapEnabled;
	[Parameter]
	bool? WordWrapEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetWordWrapEnabled(dxTarget).Result : wordWrapEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetWordWrapEnabled(dxTarget, value);
			} else {
				this.wordWrapEnabled = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxPivotGridInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxPivotGridInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxPivotGridInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxPivotGridInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onCellClickEnabled;
	[Parameter]
	bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellPreparedEnabled;
	[Parameter]
	bool? OnCellPreparedEnabled {
		get => onCellPreparedEnabled;
		set => this.onCellPreparedEnabled = value;
	}
	bool? onContextMenuPreparingEnabled;
	[Parameter]
	bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Ui.DxPivotGridInterop.CellClick += DxPivotGrid_CellClick;
		DevExpress.Ui.DxPivotGridInterop.CellPrepared += DxPivotGrid_CellPrepared;
		DevExpress.Ui.DxPivotGridInterop.ContextMenuPreparing += DxPivotGrid_ContextMenuPreparing;
		DevExpress.Ui.DxPivotGridInterop.Exported += DxPivotGrid_Exported;
		DevExpress.Ui.DxPivotGridInterop.Exporting += DxPivotGrid_Exporting;
		DevExpress.Ui.DxPivotGridInterop.FileSaving += DxPivotGrid_FileSaving;
		DevExpress.Ui.DxPivotGridInterop.ContentReady += DxPivotGrid_ContentReady;
		DevExpress.Ui.DxPivotGridInterop.Disposing += DxPivotGrid_Disposing;
		DevExpress.Ui.DxPivotGridInterop.OptionChanged += DxPivotGrid_OptionChanged;
		DevExpress.Ui.DxPivotGridInterop.Initialized += DxPivotGrid_Initialized;
	}
	[Parameter]
	Action CellClick { get; set; }
	void DxPivotGrid_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	[Parameter]
	Action CellPrepared { get; set; }
	void DxPivotGrid_CellPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellPrepared?.Invoke();
		}
	}
	[Parameter]
	Action ContextMenuPreparing { get; set; }
	void DxPivotGrid_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxPivotGrid_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxPivotGrid_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxPivotGrid_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxPivotGrid_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxPivotGrid_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxPivotGrid_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxPivotGrid_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object BindChart(object chart, object integrationOptions) {
		return DevExpress.Ui.DxPivotGridInterop.BindChart(dxTarget, chart, integrationOptions).Result;
	}
	public void ExportToExcel() {
		DevExpress.Ui.DxPivotGridInterop.ExportToExcel(dxTarget);
	}
	public object GetDataSourceEx() {
		return DevExpress.Ui.DxPivotGridInterop.GetDataSourceEx(dxTarget).Result;
	}
	public object GetFieldChooserPopup() {
		return DevExpress.Ui.DxPivotGridInterop.GetFieldChooserPopup(dxTarget).Result;
	}
	public void UpdateDimensions() {
		DevExpress.Ui.DxPivotGridInterop.UpdateDimensions(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxPivotGridInterop.CellClick -= DxPivotGrid_CellClick;
		DevExpress.Ui.DxPivotGridInterop.CellPrepared -= DxPivotGrid_CellPrepared;
		DevExpress.Ui.DxPivotGridInterop.ContextMenuPreparing -= DxPivotGrid_ContextMenuPreparing;
		DevExpress.Ui.DxPivotGridInterop.Exported -= DxPivotGrid_Exported;
		DevExpress.Ui.DxPivotGridInterop.Exporting -= DxPivotGrid_Exporting;
		DevExpress.Ui.DxPivotGridInterop.FileSaving -= DxPivotGrid_FileSaving;
		DevExpress.Ui.DxPivotGridInterop.ContentReady -= DxPivotGrid_ContentReady;
		DevExpress.Ui.DxPivotGridInterop.Disposing -= DxPivotGrid_Disposing;
		DevExpress.Ui.DxPivotGridInterop.OptionChanged -= DxPivotGrid_OptionChanged;
		DevExpress.Ui.DxPivotGridInterop.Initialized -= DxPivotGrid_Initialized;
	}
}
