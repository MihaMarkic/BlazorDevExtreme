@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxSparklineOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSparkline() : base("DxSparkline") { }
	protected override DevExpress.Viz.DxSparklineOptions CreateOptions() {
		return new DevExpress.Viz.DxSparklineOptions {
			argumentField = argumentField,
			barNegativeColor = barNegativeColor,
			barPositiveColor = barPositiveColor,
			dataSource = dataSource,
			firstLastColor = firstLastColor,
			ignoreEmptyPoints = ignoreEmptyPoints,
			lineColor = lineColor,
			lineWidth = lineWidth,
			lossColor = lossColor,
			maxColor = maxColor,
			maxValue = maxValue,
			minColor = minColor,
			minValue = minValue,
			pointColor = pointColor,
			pointSize = pointSize,
			pointSymbol = pointSymbol,
			showFirstLast = showFirstLast,
			showMinMax = showMinMax,
			type = type,
			valueField = valueField,
			winColor = winColor,
			winlossThreshold = winlossThreshold,
			tooltip = tooltip,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxSparklineOptions options) {
		return DevExpress.Viz.DxSparklineInterop.Init(dxTarget, options);
	}
	string argumentField;
	[Parameter]
	string ArgumentField {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetArgumentFieldOption(dxTarget).Result : argumentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetArgumentFieldOption(dxTarget, value);
			} else {
				this.argumentField = value;
			}
		}
	}
	string barNegativeColor;
	[Parameter]
	string BarNegativeColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetBarNegativeColorOption(dxTarget).Result : barNegativeColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetBarNegativeColorOption(dxTarget, value);
			} else {
				this.barNegativeColor = value;
			}
		}
	}
	string barPositiveColor;
	[Parameter]
	string BarPositiveColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetBarPositiveColorOption(dxTarget).Result : barPositiveColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetBarPositiveColorOption(dxTarget, value);
			} else {
				this.barPositiveColor = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string firstLastColor;
	[Parameter]
	string FirstLastColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetFirstLastColorOption(dxTarget).Result : firstLastColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetFirstLastColorOption(dxTarget, value);
			} else {
				this.firstLastColor = value;
			}
		}
	}
	bool? ignoreEmptyPoints;
	[Parameter]
	bool? IgnoreEmptyPoints {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetIgnoreEmptyPointsOption(dxTarget).Result : ignoreEmptyPoints;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetIgnoreEmptyPointsOption(dxTarget, value);
			} else {
				this.ignoreEmptyPoints = value;
			}
		}
	}
	string lineColor;
	[Parameter]
	string LineColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetLineColorOption(dxTarget).Result : lineColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLineColorOption(dxTarget, value);
			} else {
				this.lineColor = value;
			}
		}
	}
	float? lineWidth;
	[Parameter]
	float? LineWidth {
		get => isInitialized ? (float?)DevExpress.Viz.DxSparklineInterop.GetLineWidthOption(dxTarget).Result : lineWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLineWidthOption(dxTarget, value);
			} else {
				this.lineWidth = value;
			}
		}
	}
	string lossColor;
	[Parameter]
	string LossColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetLossColorOption(dxTarget).Result : lossColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLossColorOption(dxTarget, value);
			} else {
				this.lossColor = value;
			}
		}
	}
	string maxColor;
	[Parameter]
	string MaxColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetMaxColorOption(dxTarget).Result : maxColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMaxColorOption(dxTarget, value);
			} else {
				this.maxColor = value;
			}
		}
	}
	float? maxValue;
	[Parameter]
	float? MaxValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxSparklineInterop.GetMaxValueOption(dxTarget).Result : maxValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMaxValueOption(dxTarget, value);
			} else {
				this.maxValue = value;
			}
		}
	}
	string minColor;
	[Parameter]
	string MinColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetMinColorOption(dxTarget).Result : minColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMinColorOption(dxTarget, value);
			} else {
				this.minColor = value;
			}
		}
	}
	float? minValue;
	[Parameter]
	float? MinValue {
		get => isInitialized ? (float?)DevExpress.Viz.DxSparklineInterop.GetMinValueOption(dxTarget).Result : minValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMinValueOption(dxTarget, value);
			} else {
				this.minValue = value;
			}
		}
	}
	string pointColor;
	[Parameter]
	string PointColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetPointColorOption(dxTarget).Result : pointColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointColorOption(dxTarget, value);
			} else {
				this.pointColor = value;
			}
		}
	}
	float? pointSize;
	[Parameter]
	float? PointSize {
		get => isInitialized ? (float?)DevExpress.Viz.DxSparklineInterop.GetPointSizeOption(dxTarget).Result : pointSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointSizeOption(dxTarget, value);
			} else {
				this.pointSize = value;
			}
		}
	}
	string pointSymbol;
	[Parameter]
	string PointSymbol {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetPointSymbolOption(dxTarget).Result : pointSymbol;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointSymbolOption(dxTarget, value);
			} else {
				this.pointSymbol = value;
			}
		}
	}
	bool? showFirstLast;
	[Parameter]
	bool? ShowFirstLast {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetShowFirstLastOption(dxTarget).Result : showFirstLast;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetShowFirstLastOption(dxTarget, value);
			} else {
				this.showFirstLast = value;
			}
		}
	}
	bool? showMinMax;
	[Parameter]
	bool? ShowMinMax {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetShowMinMaxOption(dxTarget).Result : showMinMax;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetShowMinMaxOption(dxTarget, value);
			} else {
				this.showMinMax = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetTypeOption(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetTypeOption(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetValueFieldOption(dxTarget).Result : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetValueFieldOption(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	string winColor;
	[Parameter]
	string WinColor {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetWinColorOption(dxTarget).Result : winColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetWinColorOption(dxTarget, value);
			} else {
				this.winColor = value;
			}
		}
	}
	float? winlossThreshold;
	[Parameter]
	float? WinlossThreshold {
		get => isInitialized ? (float?)DevExpress.Viz.DxSparklineInterop.GetWinlossThresholdOption(dxTarget).Result : winlossThreshold;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetWinlossThresholdOption(dxTarget, value);
			} else {
				this.winlossThreshold = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSparklineInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxSparklineInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxSparklineInterop.TooltipHidden += DxSparkline_TooltipHidden;
		DevExpress.Viz.DxSparklineInterop.TooltipShown += DxSparkline_TooltipShown;
		DevExpress.Viz.DxSparklineInterop.Drawn += DxSparkline_Drawn;
		DevExpress.Viz.DxSparklineInterop.Exported += DxSparkline_Exported;
		DevExpress.Viz.DxSparklineInterop.Exporting += DxSparkline_Exporting;
		DevExpress.Viz.DxSparklineInterop.FileSaving += DxSparkline_FileSaving;
		DevExpress.Viz.DxSparklineInterop.IncidentOccurred += DxSparkline_IncidentOccurred;
		DevExpress.Viz.DxSparklineInterop.Disposing += DxSparkline_Disposing;
		DevExpress.Viz.DxSparklineInterop.OptionChanged += DxSparkline_OptionChanged;
		DevExpress.Viz.DxSparklineInterop.Initialized += DxSparkline_Initialized;
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void DxSparkline_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void DxSparkline_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxSparkline_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxSparkline_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxSparkline_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxSparkline_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxSparkline_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxSparkline_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxSparkline_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxSparkline_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxSparklineInterop.GetDataSourceEx(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Viz.DxSparklineInterop.TooltipHidden -= DxSparkline_TooltipHidden;
		DevExpress.Viz.DxSparklineInterop.TooltipShown -= DxSparkline_TooltipShown;
		DevExpress.Viz.DxSparklineInterop.Drawn -= DxSparkline_Drawn;
		DevExpress.Viz.DxSparklineInterop.Exported -= DxSparkline_Exported;
		DevExpress.Viz.DxSparklineInterop.Exporting -= DxSparkline_Exporting;
		DevExpress.Viz.DxSparklineInterop.FileSaving -= DxSparkline_FileSaving;
		DevExpress.Viz.DxSparklineInterop.IncidentOccurred -= DxSparkline_IncidentOccurred;
		DevExpress.Viz.DxSparklineInterop.Disposing -= DxSparkline_Disposing;
		DevExpress.Viz.DxSparklineInterop.OptionChanged -= DxSparkline_OptionChanged;
		DevExpress.Viz.DxSparklineInterop.Initialized -= DxSparkline_Initialized;
	}
}
