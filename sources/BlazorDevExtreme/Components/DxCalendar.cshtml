@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxCalendarOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxCalendar() : base("DxCalendar") { }
	protected override DevExpress.Ui.DxCalendarOptions CreateOptions() {
		return new DevExpress.Ui.DxCalendarOptions {
			activeStateEnabled = activeStateEnabled,
			cellTemplate = cellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			disabledDates = disabledDates,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			max = max,
			maxZoomLevel = maxZoomLevel,
			min = min,
			minZoomLevel = minZoomLevel,
			name = name,
			showTodayButton = showTodayButton,
			value = value,
			zoomLevel = zoomLevel,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onValueChangedEnabled = onValueChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxCalendarOptions options) {
		return DevExpress.Ui.DxCalendarInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object cellTemplate;
	[Parameter]
	object CellTemplate {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetCellTemplateOption(dxTarget).Result : cellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetCellTemplateOption(dxTarget, value);
			} else {
				this.cellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetDateSerializationFormatOption(dxTarget).Result : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDateSerializationFormatOption(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	object disabledDates;
	[Parameter]
	object DisabledDates {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetDisabledDatesOption(dxTarget).Result : disabledDates;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDisabledDatesOption(dxTarget, value);
			} else {
				this.disabledDates = value;
			}
		}
	}
	object firstDayOfWeek;
	[Parameter]
	object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetFirstDayOfWeekOption(dxTarget).Result : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFirstDayOfWeekOption(dxTarget, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMaxOption(dxTarget).Result : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMaxOption(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	string maxZoomLevel;
	[Parameter]
	string MaxZoomLevel {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetMaxZoomLevelOption(dxTarget).Result : maxZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMaxZoomLevelOption(dxTarget, value);
			} else {
				this.maxZoomLevel = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMinOption(dxTarget).Result : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMinOption(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string minZoomLevel;
	[Parameter]
	string MinZoomLevel {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetMinZoomLevelOption(dxTarget).Result : minZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMinZoomLevelOption(dxTarget, value);
			} else {
				this.minZoomLevel = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showTodayButton;
	[Parameter]
	bool? ShowTodayButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetShowTodayButtonOption(dxTarget).Result : showTodayButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetShowTodayButtonOption(dxTarget, value);
			} else {
				this.showTodayButton = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string zoomLevel;
	[Parameter]
	string ZoomLevel {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetZoomLevelOption(dxTarget).Result : zoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetZoomLevelOption(dxTarget, value);
			} else {
				this.zoomLevel = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxCalendarInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxCalendarInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxCalendarInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxCalendarInterop.ValueChanged += DxCalendar_ValueChanged;
		DevExpress.Ui.DxCalendarInterop.ContentReady += DxCalendar_ContentReady;
		DevExpress.Ui.DxCalendarInterop.Disposing += DxCalendar_Disposing;
		DevExpress.Ui.DxCalendarInterop.OptionChanged += DxCalendar_OptionChanged;
		DevExpress.Ui.DxCalendarInterop.Initialized += DxCalendar_Initialized;
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxCalendar_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxCalendar_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxCalendar_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxCalendar_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxCalendar_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxCalendarInterop.ValueChanged -= DxCalendar_ValueChanged;
		DevExpress.Ui.DxCalendarInterop.ContentReady -= DxCalendar_ContentReady;
		DevExpress.Ui.DxCalendarInterop.Disposing -= DxCalendar_Disposing;
		DevExpress.Ui.DxCalendarInterop.OptionChanged -= DxCalendar_OptionChanged;
		DevExpress.Ui.DxCalendarInterop.Initialized -= DxCalendar_Initialized;
	}
}
