@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTagBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTagBox() : base("DxTagBox") { }
	protected override DevExpress.Ui.DxTagBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxTagBoxOptions {
			applyValueMode = applyValueMode,
			hideSelectedItems = hideSelectedItems,
			maxDisplayedTags = maxDisplayedTags,
			multiline = multiline,
			selectAllMode = selectAllMode,
			selectedItems = selectedItems,
			showDropDownButton = showDropDownButton,
			showMultiTagOnly = showMultiTagOnly,
			tagTemplate = tagTemplate,
			value = value,
			acceptCustomValue = acceptCustomValue,
			fieldTemplate = fieldTemplate,
			openOnFieldClick = openOnFieldClick,
			placeholder = placeholder,
			showSelectionControls = showSelectionControls,
			valueChangeEvent = valueChangeEvent,
			displayValue = displayValue,
			grouped = grouped,
			groupTemplate = groupTemplate,
			minSearchLength = minSearchLength,
			noDataText = noDataText,
			searchEnabled = searchEnabled,
			searchExpr = searchExpr,
			searchMode = searchMode,
			searchTimeout = searchTimeout,
			selectedItem = selectedItem,
			showDataBeforeSearch = showDataBeforeSearch,
			activeStateEnabled = activeStateEnabled,
			deferRendering = deferRendering,
			dropDownButtonTemplate = dropDownButtonTemplate,
			opened = isOpened,
			maxLength = maxLength,
			mode = mode,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			inputAttr = inputAttr,
			mask = mask,
			maskChar = maskChar,
			maskInvalidMessage = maskInvalidMessage,
			maskRules = maskRules,
			name = name,
			showClearButton = showClearButton,
			showMaskMode = showMaskMode,
			spellcheck = spellcheck,
			stylingMode = stylingMode,
			text = text,
			useMaskedValue = useMaskedValue,
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			accessKey = accessKey,
			disabled = disabled,
			hint = hint,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			dataSource = dataSource,
			displayExpr = displayExpr,
			items = items,
			itemTemplate = itemTemplate,
			valueExpr = valueExpr,
			onMultiTagPreparingEnabled = onMultiTagPreparingEnabled,
			onSelectAllValueChangedEnabled = onSelectAllValueChangedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onCustomItemCreatingEnabled = onCustomItemCreatingEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
			onClosedEnabled = onClosedEnabled,
			onOpenedEnabled = onOpenedEnabled,
			onChangeEnabled = onChangeEnabled,
			onCopyEnabled = onCopyEnabled,
			onCutEnabled = onCutEnabled,
			onEnterKeyEnabled = onEnterKeyEnabled,
			onFocusInEnabled = onFocusInEnabled,
			onFocusOutEnabled = onFocusOutEnabled,
			onInputEnabled = onInputEnabled,
			onKeyDownEnabled = onKeyDownEnabled,
			onKeyPressEnabled = onKeyPressEnabled,
			onKeyUpEnabled = onKeyUpEnabled,
			onPasteEnabled = onPasteEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxTagBoxOptions options) {
		return DevExpress.Ui.DxTagBoxInterop.Init(dxTarget, options);
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetApplyValueModeOption(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetApplyValueModeOption(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	bool? hideSelectedItems;
	[Parameter]
	bool? HideSelectedItems {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetHideSelectedItemsOption(dxTarget).Result : hideSelectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetHideSelectedItemsOption(dxTarget, value);
			} else {
				this.hideSelectedItems = value;
			}
		}
	}
	float? maxDisplayedTags;
	[Parameter]
	float? MaxDisplayedTags {
		get => isInitialized ? (float?)DevExpress.Ui.DxTagBoxInterop.GetMaxDisplayedTagsOption(dxTarget).Result : maxDisplayedTags;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaxDisplayedTagsOption(dxTarget, value);
			} else {
				this.maxDisplayedTags = value;
			}
		}
	}
	bool? multiline;
	[Parameter]
	bool? Multiline {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetMultilineOption(dxTarget).Result : multiline;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMultilineOption(dxTarget, value);
			} else {
				this.multiline = value;
			}
		}
	}
	string selectAllMode;
	[Parameter]
	string SelectAllMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetSelectAllModeOption(dxTarget).Result : selectAllMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSelectAllModeOption(dxTarget, value);
			} else {
				this.selectAllMode = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetSelectedItemsOption(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSelectedItemsOption(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	bool? showDropDownButton;
	[Parameter]
	bool? ShowDropDownButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetShowDropDownButtonOption(dxTarget).Result : showDropDownButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowDropDownButtonOption(dxTarget, value);
			} else {
				this.showDropDownButton = value;
			}
		}
	}
	bool? showMultiTagOnly;
	[Parameter]
	bool? ShowMultiTagOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetShowMultiTagOnlyOption(dxTarget).Result : showMultiTagOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowMultiTagOnlyOption(dxTarget, value);
			} else {
				this.showMultiTagOnly = value;
			}
		}
	}
	object tagTemplate;
	[Parameter]
	object TagTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetTagTemplateOption(dxTarget).Result : tagTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetTagTemplateOption(dxTarget, value);
			} else {
				this.tagTemplate = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetValueOption(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValueOption(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? acceptCustomValue;
	[Parameter]
	bool? AcceptCustomValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetAcceptCustomValueOption(dxTarget).Result : acceptCustomValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetAcceptCustomValueOption(dxTarget, value);
			} else {
				this.acceptCustomValue = value;
			}
		}
	}
	object fieldTemplate;
	[Parameter]
	object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetFieldTemplateOption(dxTarget).Result : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetFieldTemplateOption(dxTarget, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	bool? openOnFieldClick;
	[Parameter]
	bool? OpenOnFieldClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetOpenOnFieldClickOption(dxTarget).Result : openOnFieldClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetOpenOnFieldClickOption(dxTarget, value);
			} else {
				this.openOnFieldClick = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetPlaceholderOption(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetPlaceholderOption(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	bool? showSelectionControls;
	[Parameter]
	bool? ShowSelectionControls {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetShowSelectionControlsOption(dxTarget).Result : showSelectionControls;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowSelectionControlsOption(dxTarget, value);
			} else {
				this.showSelectionControls = value;
			}
		}
	}
	string valueChangeEvent;
	[Parameter]
	string ValueChangeEvent {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetValueChangeEventOption(dxTarget).Result : valueChangeEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValueChangeEventOption(dxTarget, value);
			} else {
				this.valueChangeEvent = value;
			}
		}
	}
	string displayValue;
	[Parameter]
	string DisplayValue {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetDisplayValueOption(dxTarget).Result : displayValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDisplayValueOption(dxTarget, value);
			} else {
				this.displayValue = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetGroupedOption(dxTarget).Result : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetGroupedOption(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetGroupTemplateOption(dxTarget).Result : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetGroupTemplateOption(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	float? minSearchLength;
	[Parameter]
	float? MinSearchLength {
		get => isInitialized ? (float?)DevExpress.Ui.DxTagBoxInterop.GetMinSearchLengthOption(dxTarget).Result : minSearchLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMinSearchLengthOption(dxTarget, value);
			} else {
				this.minSearchLength = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	bool? searchEnabled;
	[Parameter]
	bool? SearchEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetSearchEnabledOption(dxTarget).Result : searchEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSearchEnabledOption(dxTarget, value);
			} else {
				this.searchEnabled = value;
			}
		}
	}
	object searchExpr;
	[Parameter]
	object SearchExpr {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetSearchExprOption(dxTarget).Result : searchExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSearchExprOption(dxTarget, value);
			} else {
				this.searchExpr = value;
			}
		}
	}
	string searchMode;
	[Parameter]
	string SearchMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetSearchModeOption(dxTarget).Result : searchMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSearchModeOption(dxTarget, value);
			} else {
				this.searchMode = value;
			}
		}
	}
	float? searchTimeout;
	[Parameter]
	float? SearchTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxTagBoxInterop.GetSearchTimeoutOption(dxTarget).Result : searchTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSearchTimeoutOption(dxTarget, value);
			} else {
				this.searchTimeout = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetSelectedItemOption(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSelectedItemOption(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	bool? showDataBeforeSearch;
	[Parameter]
	bool? ShowDataBeforeSearch {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetShowDataBeforeSearchOption(dxTarget).Result : showDataBeforeSearch;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowDataBeforeSearchOption(dxTarget, value);
			} else {
				this.showDataBeforeSearch = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetDeferRenderingOption(dxTarget).Result : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDeferRenderingOption(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	object dropDownButtonTemplate;
	[Parameter]
	object DropDownButtonTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetDropDownButtonTemplateOption(dxTarget).Result : dropDownButtonTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDropDownButtonTemplateOption(dxTarget, value);
			} else {
				this.dropDownButtonTemplate = value;
			}
		}
	}
	bool? isOpened;
	[Parameter]
	bool? IsOpened {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetOpenedOption(dxTarget).Result : isOpened;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetOpenedOption(dxTarget, value);
			} else {
				this.isOpened = value;
			}
		}
	}
	object maxLength;
	[Parameter]
	object MaxLength {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetMaxLengthOption(dxTarget).Result : maxLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaxLengthOption(dxTarget, value);
			} else {
				this.maxLength = value;
			}
		}
	}
	string mode;
	[Parameter]
	string Mode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetModeOption(dxTarget).Result : mode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetModeOption(dxTarget, value);
			} else {
				this.mode = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object inputAttr;
	[Parameter]
	object InputAttr {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetInputAttrOption(dxTarget).Result : inputAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetInputAttrOption(dxTarget, value);
			} else {
				this.inputAttr = value;
			}
		}
	}
	string mask;
	[Parameter]
	string Mask {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetMaskOption(dxTarget).Result : mask;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaskOption(dxTarget, value);
			} else {
				this.mask = value;
			}
		}
	}
	string maskChar;
	[Parameter]
	string MaskChar {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetMaskCharOption(dxTarget).Result : maskChar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaskCharOption(dxTarget, value);
			} else {
				this.maskChar = value;
			}
		}
	}
	string maskInvalidMessage;
	[Parameter]
	string MaskInvalidMessage {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetMaskInvalidMessageOption(dxTarget).Result : maskInvalidMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaskInvalidMessageOption(dxTarget, value);
			} else {
				this.maskInvalidMessage = value;
			}
		}
	}
	object maskRules;
	[Parameter]
	object MaskRules {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetMaskRulesOption(dxTarget).Result : maskRules;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaskRulesOption(dxTarget, value);
			} else {
				this.maskRules = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetNameOption(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetNameOption(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showClearButton;
	[Parameter]
	bool? ShowClearButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetShowClearButtonOption(dxTarget).Result : showClearButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowClearButtonOption(dxTarget, value);
			} else {
				this.showClearButton = value;
			}
		}
	}
	string showMaskMode;
	[Parameter]
	string ShowMaskMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetShowMaskModeOption(dxTarget).Result : showMaskMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowMaskModeOption(dxTarget, value);
			} else {
				this.showMaskMode = value;
			}
		}
	}
	bool? spellcheck;
	[Parameter]
	bool? Spellcheck {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetSpellcheckOption(dxTarget).Result : spellcheck;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSpellcheckOption(dxTarget, value);
			} else {
				this.spellcheck = value;
			}
		}
	}
	string stylingMode;
	[Parameter]
	string StylingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetStylingModeOption(dxTarget).Result : stylingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetStylingModeOption(dxTarget, value);
			} else {
				this.stylingMode = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetTextOption(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetTextOption(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	bool? useMaskedValue;
	[Parameter]
	bool? UseMaskedValue {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetUseMaskedValueOption(dxTarget).Result : useMaskedValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetUseMaskedValueOption(dxTarget, value);
			} else {
				this.useMaskedValue = value;
			}
		}
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetIsValidOption(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetIsValidOption(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetReadOnlyOption(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetReadOnlyOption(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetValidationErrorOption(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValidationErrorOption(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetValidationMessageModeOption(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValidationMessageModeOption(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxTagBoxInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxTagBoxInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxTagBoxInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object displayExpr;
	[Parameter]
	object DisplayExpr {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetDisplayExprOption(dxTarget).Result : displayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetDisplayExprOption(dxTarget, value);
			} else {
				this.displayExpr = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetItemTemplateOption(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetItemTemplateOption(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object valueExpr;
	[Parameter]
	object ValueExpr {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetValueExprOption(dxTarget).Result : valueExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValueExprOption(dxTarget, value);
			} else {
				this.valueExpr = value;
			}
		}
	}
	bool? onMultiTagPreparingEnabled;
	[Parameter]
	bool? OnMultiTagPreparingEnabled {
		get => onMultiTagPreparingEnabled;
		set => this.onMultiTagPreparingEnabled = value;
	}
	bool? onSelectAllValueChangedEnabled;
	[Parameter]
	bool? OnSelectAllValueChangedEnabled {
		get => onSelectAllValueChangedEnabled;
		set => this.onSelectAllValueChangedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onCustomItemCreatingEnabled;
	[Parameter]
	bool? OnCustomItemCreatingEnabled {
		get => onCustomItemCreatingEnabled;
		set => this.onCustomItemCreatingEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	bool? onClosedEnabled;
	[Parameter]
	bool? OnClosedEnabled {
		get => onClosedEnabled;
		set => this.onClosedEnabled = value;
	}
	bool? onOpenedEnabled;
	[Parameter]
	bool? OnOpenedEnabled {
		get => onOpenedEnabled;
		set => this.onOpenedEnabled = value;
	}
	bool? onChangeEnabled;
	[Parameter]
	bool? OnChangeEnabled {
		get => onChangeEnabled;
		set => this.onChangeEnabled = value;
	}
	bool? onCopyEnabled;
	[Parameter]
	bool? OnCopyEnabled {
		get => onCopyEnabled;
		set => this.onCopyEnabled = value;
	}
	bool? onCutEnabled;
	[Parameter]
	bool? OnCutEnabled {
		get => onCutEnabled;
		set => this.onCutEnabled = value;
	}
	bool? onEnterKeyEnabled;
	[Parameter]
	bool? OnEnterKeyEnabled {
		get => onEnterKeyEnabled;
		set => this.onEnterKeyEnabled = value;
	}
	bool? onFocusInEnabled;
	[Parameter]
	bool? OnFocusInEnabled {
		get => onFocusInEnabled;
		set => this.onFocusInEnabled = value;
	}
	bool? onFocusOutEnabled;
	[Parameter]
	bool? OnFocusOutEnabled {
		get => onFocusOutEnabled;
		set => this.onFocusOutEnabled = value;
	}
	bool? onInputEnabled;
	[Parameter]
	bool? OnInputEnabled {
		get => onInputEnabled;
		set => this.onInputEnabled = value;
	}
	bool? onKeyDownEnabled;
	[Parameter]
	bool? OnKeyDownEnabled {
		get => onKeyDownEnabled;
		set => this.onKeyDownEnabled = value;
	}
	bool? onKeyPressEnabled;
	[Parameter]
	bool? OnKeyPressEnabled {
		get => onKeyPressEnabled;
		set => this.onKeyPressEnabled = value;
	}
	bool? onKeyUpEnabled;
	[Parameter]
	bool? OnKeyUpEnabled {
		get => onKeyUpEnabled;
		set => this.onKeyUpEnabled = value;
	}
	bool? onPasteEnabled;
	[Parameter]
	bool? OnPasteEnabled {
		get => onPasteEnabled;
		set => this.onPasteEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxTagBoxInterop.MultiTagPreparing += DxTagBox_MultiTagPreparing;
		DevExpress.Ui.DxTagBoxInterop.SelectAllValueChanged += DxTagBox_SelectAllValueChanged;
		DevExpress.Ui.DxTagBoxInterop.SelectionChanged += DxTagBox_SelectionChanged;
		DevExpress.Ui.DxTagBoxInterop.CustomItemCreating += DxTagBox_CustomItemCreating;
		DevExpress.Ui.DxTagBoxInterop.ItemClick += DxTagBox_ItemClick;
		DevExpress.Ui.DxTagBoxInterop.ValueChanged += DxTagBox_ValueChanged;
		DevExpress.Ui.DxTagBoxInterop.Closed += DxTagBox_Closed;
		DevExpress.Ui.DxTagBoxInterop.Opened += DxTagBox_Opened;
		DevExpress.Ui.DxTagBoxInterop.Change += DxTagBox_Change;
		DevExpress.Ui.DxTagBoxInterop.Copy += DxTagBox_Copy;
		DevExpress.Ui.DxTagBoxInterop.Cut += DxTagBox_Cut;
		DevExpress.Ui.DxTagBoxInterop.EnterKey += DxTagBox_EnterKey;
		DevExpress.Ui.DxTagBoxInterop.FocusIn += DxTagBox_FocusIn;
		DevExpress.Ui.DxTagBoxInterop.FocusOut += DxTagBox_FocusOut;
		DevExpress.Ui.DxTagBoxInterop.Input += DxTagBox_Input;
		DevExpress.Ui.DxTagBoxInterop.KeyDown += DxTagBox_KeyDown;
		DevExpress.Ui.DxTagBoxInterop.KeyPress += DxTagBox_KeyPress;
		DevExpress.Ui.DxTagBoxInterop.KeyUp += DxTagBox_KeyUp;
		DevExpress.Ui.DxTagBoxInterop.Paste += DxTagBox_Paste;
		DevExpress.Ui.DxTagBoxInterop.ContentReady += DxTagBox_ContentReady;
		DevExpress.Ui.DxTagBoxInterop.Disposing += DxTagBox_Disposing;
		DevExpress.Ui.DxTagBoxInterop.OptionChanged += DxTagBox_OptionChanged;
		DevExpress.Ui.DxTagBoxInterop.Initialized += DxTagBox_Initialized;
	}
	[Parameter]
	Action MultiTagPreparing { get; set; }
	void DxTagBox_MultiTagPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			MultiTagPreparing?.Invoke();
		}
	}
	[Parameter]
	Action SelectAllValueChanged { get; set; }
	void DxTagBox_SelectAllValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectAllValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxTagBox_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action CustomItemCreating { get; set; }
	void DxTagBox_CustomItemCreating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CustomItemCreating?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxTagBox_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxTagBox_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action Closed { get; set; }
	void DxTagBox_Closed(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Closed?.Invoke();
		}
	}
	[Parameter]
	Action Opened { get; set; }
	void DxTagBox_Opened(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Opened?.Invoke();
		}
	}
	[Parameter]
	Action Change { get; set; }
	void DxTagBox_Change(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Change?.Invoke();
		}
	}
	[Parameter]
	Action Copy { get; set; }
	void DxTagBox_Copy(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Copy?.Invoke();
		}
	}
	[Parameter]
	Action Cut { get; set; }
	void DxTagBox_Cut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Cut?.Invoke();
		}
	}
	[Parameter]
	Action EnterKey { get; set; }
	void DxTagBox_EnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EnterKey?.Invoke();
		}
	}
	[Parameter]
	Action FocusIn { get; set; }
	void DxTagBox_FocusIn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusIn?.Invoke();
		}
	}
	[Parameter]
	Action FocusOut { get; set; }
	void DxTagBox_FocusOut(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusOut?.Invoke();
		}
	}
	[Parameter]
	Action Input { get; set; }
	void DxTagBox_Input(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Input?.Invoke();
		}
	}
	[Parameter]
	Action KeyDown { get; set; }
	void DxTagBox_KeyDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyDown?.Invoke();
		}
	}
	[Parameter]
	Action KeyPress { get; set; }
	void DxTagBox_KeyPress(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyPress?.Invoke();
		}
	}
	[Parameter]
	Action KeyUp { get; set; }
	void DxTagBox_KeyUp(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyUp?.Invoke();
		}
	}
	[Parameter]
	Action Paste { get; set; }
	void DxTagBox_Paste(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Paste?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxTagBox_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxTagBox_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxTagBox_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxTagBox_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxTagBoxInterop.MultiTagPreparing -= DxTagBox_MultiTagPreparing;
		DevExpress.Ui.DxTagBoxInterop.SelectAllValueChanged -= DxTagBox_SelectAllValueChanged;
		DevExpress.Ui.DxTagBoxInterop.SelectionChanged -= DxTagBox_SelectionChanged;
		DevExpress.Ui.DxTagBoxInterop.CustomItemCreating -= DxTagBox_CustomItemCreating;
		DevExpress.Ui.DxTagBoxInterop.ItemClick -= DxTagBox_ItemClick;
		DevExpress.Ui.DxTagBoxInterop.ValueChanged -= DxTagBox_ValueChanged;
		DevExpress.Ui.DxTagBoxInterop.Closed -= DxTagBox_Closed;
		DevExpress.Ui.DxTagBoxInterop.Opened -= DxTagBox_Opened;
		DevExpress.Ui.DxTagBoxInterop.Change -= DxTagBox_Change;
		DevExpress.Ui.DxTagBoxInterop.Copy -= DxTagBox_Copy;
		DevExpress.Ui.DxTagBoxInterop.Cut -= DxTagBox_Cut;
		DevExpress.Ui.DxTagBoxInterop.EnterKey -= DxTagBox_EnterKey;
		DevExpress.Ui.DxTagBoxInterop.FocusIn -= DxTagBox_FocusIn;
		DevExpress.Ui.DxTagBoxInterop.FocusOut -= DxTagBox_FocusOut;
		DevExpress.Ui.DxTagBoxInterop.Input -= DxTagBox_Input;
		DevExpress.Ui.DxTagBoxInterop.KeyDown -= DxTagBox_KeyDown;
		DevExpress.Ui.DxTagBoxInterop.KeyPress -= DxTagBox_KeyPress;
		DevExpress.Ui.DxTagBoxInterop.KeyUp -= DxTagBox_KeyUp;
		DevExpress.Ui.DxTagBoxInterop.Paste -= DxTagBox_Paste;
		DevExpress.Ui.DxTagBoxInterop.ContentReady -= DxTagBox_ContentReady;
		DevExpress.Ui.DxTagBoxInterop.Disposing -= DxTagBox_Disposing;
		DevExpress.Ui.DxTagBoxInterop.OptionChanged -= DxTagBox_OptionChanged;
		DevExpress.Ui.DxTagBoxInterop.Initialized -= DxTagBox_Initialized;
	}
}
