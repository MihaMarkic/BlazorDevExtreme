
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxLoadIndicatorOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
	ElementReference dxTarget;
	public DxLoadIndicator() : base("DxLoadIndicator") { }
	protected override DevExpress.Ui.DxLoadIndicatorOptions CreateOptions() {
		return new DevExpress.Ui.DxLoadIndicatorOptions {
			indicatorSrc = indicatorSrc,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override ValueTask<object> Init(DevExpress.Ui.DxLoadIndicatorOptions options) {
		return DevExpress.Ui.DxLoadIndicatorInterop.Init(dxTarget, options);
	}
	string indicatorSrc;
	[Parameter] public
	string IndicatorSrc {
		get => isInitialized ? (string)DevExpress.Ui.DxLoadIndicatorInterop.GetIndicatorSrc(dxTarget).Result : indicatorSrc;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetIndicatorSrc(dxTarget, value);
			} else {
				this.indicatorSrc = value;
			}
		}
	}
	string accessKey;
	[Parameter] public
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxLoadIndicatorInterop.GetAccessKey(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetAccessKey(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter] public
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter] public
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter] public
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter] public
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxLoadIndicatorInterop.GetHint(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetHint(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter] public
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter] public
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxLoadIndicatorInterop.GetTabIndex(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetTabIndex(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter] public
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetVisible(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter] public
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxLoadIndicatorInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetBindingOptions(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter] public
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxLoadIndicatorInterop.GetElementAttr(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetElementAttr(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter] public
	object Height {
		get => isInitialized ? DevExpress.Ui.DxLoadIndicatorInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter] public
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxLoadIndicatorInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetRtlEnabled(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter] public
	object Width {
		get => isInitialized ? DevExpress.Ui.DxLoadIndicatorInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadIndicatorInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onContentReadyEnabled;
	[Parameter] public
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter] public
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter] public
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter] public
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		DevExpress.Ui.DxLoadIndicatorInterop.ContentReady += DxLoadIndicator_ContentReady;
		DevExpress.Ui.DxLoadIndicatorInterop.Disposing += DxLoadIndicator_Disposing;
		DevExpress.Ui.DxLoadIndicatorInterop.OptionChanged += DxLoadIndicator_OptionChanged;
		DevExpress.Ui.DxLoadIndicatorInterop.Initialized += DxLoadIndicator_Initialized;
	}
	[Parameter] public
	Action ContentReady { get; set; }
	void DxLoadIndicator_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter] public
	Action Disposing { get; set; }
	void DxLoadIndicator_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter] public
	Action OptionChanged { get; set; }
	void DxLoadIndicator_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter] public
	Action Initialized { get; set; }
	void DxLoadIndicator_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxLoadIndicatorInterop.ContentReady -= DxLoadIndicator_ContentReady;
		DevExpress.Ui.DxLoadIndicatorInterop.Disposing -= DxLoadIndicator_Disposing;
		DevExpress.Ui.DxLoadIndicatorInterop.OptionChanged -= DxLoadIndicator_OptionChanged;
		DevExpress.Ui.DxLoadIndicatorInterop.Initialized -= DxLoadIndicator_Initialized;
	}
}
