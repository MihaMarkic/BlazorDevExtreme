@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.DxSankeyOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSankey() : base("DxSankey") { }
	protected override DevExpress.Viz.DxSankeyOptions CreateOptions() {
		return new DevExpress.Viz.DxSankeyOptions {
			adaptiveLayout = adaptiveLayout,
			alignment = alignment,
			dataSource = dataSource,
			hoverEnabled = hoverEnabled,
			label = label,
			link = link,
			node = node,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			sortData = sortData,
			sourceField = sourceField,
			targetField = targetField,
			tooltip = tooltip,
			weightField = weightField,
			disabled = disabled,
			export = export,
			loadingIndicator = loadingIndicator,
			margin = margin,
			pathModified = pathModified,
			redrawOnResize = redrawOnResize,
			rtlEnabled = rtlEnabled,
			size = size,
			theme = theme,
			title = title,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			width = width,
			onLinkClickEnabled = onLinkClickEnabled,
			onLinkHoverChangedEnabled = onLinkHoverChangedEnabled,
			onNodeClickEnabled = onNodeClickEnabled,
			onNodeHoverChangedEnabled = onNodeHoverChangedEnabled,
			onDrawnEnabled = onDrawnEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onIncidentOccurredEnabled = onIncidentOccurredEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.DxSankeyOptions options) {
		return DevExpress.Viz.DxSankeyInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetAdaptiveLayoutOption(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetAdaptiveLayoutOption(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object alignment;
	[Parameter]
	object Alignment {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetAlignmentOption(dxTarget).Result : alignment;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetAlignmentOption(dxTarget, value);
			} else {
				this.alignment = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	bool? hoverEnabled;
	[Parameter]
	bool? HoverEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSankeyInterop.GetHoverEnabledOption(dxTarget).Result : hoverEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetHoverEnabledOption(dxTarget, value);
			} else {
				this.hoverEnabled = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetLabelOption(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetLabelOption(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	object link;
	[Parameter]
	object Link {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetLinkOption(dxTarget).Result : link;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetLinkOption(dxTarget, value);
			} else {
				this.link = value;
			}
		}
	}
	object node;
	[Parameter]
	object Node {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetNodeOption(dxTarget).Result : node;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetNodeOption(dxTarget, value);
			} else {
				this.node = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetPaletteOption(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetPaletteOption(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? (string)DevExpress.Viz.DxSankeyInterop.GetPaletteExtensionModeOption(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetPaletteExtensionModeOption(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	object sortData;
	[Parameter]
	object SortData {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetSortDataOption(dxTarget).Result : sortData;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetSortDataOption(dxTarget, value);
			} else {
				this.sortData = value;
			}
		}
	}
	string sourceField;
	[Parameter]
	string SourceField {
		get => isInitialized ? (string)DevExpress.Viz.DxSankeyInterop.GetSourceFieldOption(dxTarget).Result : sourceField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetSourceFieldOption(dxTarget, value);
			} else {
				this.sourceField = value;
			}
		}
	}
	string targetField;
	[Parameter]
	string TargetField {
		get => isInitialized ? (string)DevExpress.Viz.DxSankeyInterop.GetTargetFieldOption(dxTarget).Result : targetField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetTargetFieldOption(dxTarget, value);
			} else {
				this.targetField = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetTooltipOption(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetTooltipOption(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	string weightField;
	[Parameter]
	string WeightField {
		get => isInitialized ? (string)DevExpress.Viz.DxSankeyInterop.GetWeightFieldOption(dxTarget).Result : weightField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetWeightFieldOption(dxTarget, value);
			} else {
				this.weightField = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSankeyInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object loadingIndicator;
	[Parameter]
	object LoadingIndicator {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetLoadingIndicatorOption(dxTarget).Result : loadingIndicator;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetLoadingIndicatorOption(dxTarget, value);
			} else {
				this.loadingIndicator = value;
			}
		}
	}
	object margin;
	[Parameter]
	object Margin {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetMarginOption(dxTarget).Result : margin;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetMarginOption(dxTarget, value);
			} else {
				this.margin = value;
			}
		}
	}
	bool? pathModified;
	[Parameter]
	bool? PathModified {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSankeyInterop.GetPathModifiedOption(dxTarget).Result : pathModified;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetPathModifiedOption(dxTarget, value);
			} else {
				this.pathModified = value;
			}
		}
	}
	bool? redrawOnResize;
	[Parameter]
	bool? RedrawOnResize {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSankeyInterop.GetRedrawOnResizeOption(dxTarget).Result : redrawOnResize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetRedrawOnResizeOption(dxTarget, value);
			} else {
				this.redrawOnResize = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Viz.DxSankeyInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object size;
	[Parameter]
	object Size {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetSizeOption(dxTarget).Result : size;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetSizeOption(dxTarget, value);
			} else {
				this.size = value;
			}
		}
	}
	string theme;
	[Parameter]
	string Theme {
		get => isInitialized ? (string)DevExpress.Viz.DxSankeyInterop.GetThemeOption(dxTarget).Result : theme;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetThemeOption(dxTarget, value);
			} else {
				this.theme = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetTitleOption(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetTitleOption(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Viz.DxSankeyInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSankeyInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onLinkClickEnabled;
	[Parameter]
	bool? OnLinkClickEnabled {
		get => onLinkClickEnabled;
		set => this.onLinkClickEnabled = value;
	}
	bool? onLinkHoverChangedEnabled;
	[Parameter]
	bool? OnLinkHoverChangedEnabled {
		get => onLinkHoverChangedEnabled;
		set => this.onLinkHoverChangedEnabled = value;
	}
	bool? onNodeClickEnabled;
	[Parameter]
	bool? OnNodeClickEnabled {
		get => onNodeClickEnabled;
		set => this.onNodeClickEnabled = value;
	}
	bool? onNodeHoverChangedEnabled;
	[Parameter]
	bool? OnNodeHoverChangedEnabled {
		get => onNodeHoverChangedEnabled;
		set => this.onNodeHoverChangedEnabled = value;
	}
	bool? onDrawnEnabled;
	[Parameter]
	bool? OnDrawnEnabled {
		get => onDrawnEnabled;
		set => this.onDrawnEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onIncidentOccurredEnabled;
	[Parameter]
	bool? OnIncidentOccurredEnabled {
		get => onIncidentOccurredEnabled;
		set => this.onIncidentOccurredEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxSankeyInterop.LinkClick += DxSankey_LinkClick;
		DevExpress.Viz.DxSankeyInterop.LinkHoverChanged += DxSankey_LinkHoverChanged;
		DevExpress.Viz.DxSankeyInterop.NodeClick += DxSankey_NodeClick;
		DevExpress.Viz.DxSankeyInterop.NodeHoverChanged += DxSankey_NodeHoverChanged;
		DevExpress.Viz.DxSankeyInterop.Drawn += DxSankey_Drawn;
		DevExpress.Viz.DxSankeyInterop.Exported += DxSankey_Exported;
		DevExpress.Viz.DxSankeyInterop.Exporting += DxSankey_Exporting;
		DevExpress.Viz.DxSankeyInterop.FileSaving += DxSankey_FileSaving;
		DevExpress.Viz.DxSankeyInterop.IncidentOccurred += DxSankey_IncidentOccurred;
		DevExpress.Viz.DxSankeyInterop.Disposing += DxSankey_Disposing;
		DevExpress.Viz.DxSankeyInterop.OptionChanged += DxSankey_OptionChanged;
		DevExpress.Viz.DxSankeyInterop.Initialized += DxSankey_Initialized;
	}
	[Parameter]
	Action LinkClick { get; set; }
	void DxSankey_LinkClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LinkClick?.Invoke();
		}
	}
	[Parameter]
	Action LinkHoverChanged { get; set; }
	void DxSankey_LinkHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LinkHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action NodeClick { get; set; }
	void DxSankey_NodeClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodeClick?.Invoke();
		}
	}
	[Parameter]
	Action NodeHoverChanged { get; set; }
	void DxSankey_NodeHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodeHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action Drawn { get; set; }
	void DxSankey_Drawn(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drawn?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxSankey_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxSankey_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxSankey_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action IncidentOccurred { get; set; }
	void DxSankey_IncidentOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			IncidentOccurred?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxSankey_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxSankey_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxSankey_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public object GetAllLinks() {
		return DevExpress.Viz.DxSankeyInterop.GetAllLinks(dxTarget).Result;
	}
	public object GetAllNodes() {
		return DevExpress.Viz.DxSankeyInterop.GetAllNodes(dxTarget).Result;
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxSankeyInterop.GetDataSourceEx(dxTarget).Result;
	}
	public void HideTooltip() {
		DevExpress.Viz.DxSankeyInterop.HideTooltip(dxTarget);
	}
	public void Dispose() {
		DevExpress.Viz.DxSankeyInterop.LinkClick -= DxSankey_LinkClick;
		DevExpress.Viz.DxSankeyInterop.LinkHoverChanged -= DxSankey_LinkHoverChanged;
		DevExpress.Viz.DxSankeyInterop.NodeClick -= DxSankey_NodeClick;
		DevExpress.Viz.DxSankeyInterop.NodeHoverChanged -= DxSankey_NodeHoverChanged;
		DevExpress.Viz.DxSankeyInterop.Drawn -= DxSankey_Drawn;
		DevExpress.Viz.DxSankeyInterop.Exported -= DxSankey_Exported;
		DevExpress.Viz.DxSankeyInterop.Exporting -= DxSankey_Exporting;
		DevExpress.Viz.DxSankeyInterop.FileSaving -= DxSankey_FileSaving;
		DevExpress.Viz.DxSankeyInterop.IncidentOccurred -= DxSankey_IncidentOccurred;
		DevExpress.Viz.DxSankeyInterop.Disposing -= DxSankey_Disposing;
		DevExpress.Viz.DxSankeyInterop.OptionChanged -= DxSankey_OptionChanged;
		DevExpress.Viz.DxSankeyInterop.Initialized -= DxSankey_Initialized;
	}
}
