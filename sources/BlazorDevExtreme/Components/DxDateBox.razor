
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDateBoxOptions>

<div id="@Id"  @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public DxDateBox() : base("DxDateBox") { }
    protected override DevExpress.Ui.DxDateBoxOptions CreateOptions() {
        return new DevExpress.Ui.DxDateBoxOptions {
            adaptivityEnabled = adaptivityEnabled,
            applyButtonText = applyButtonText,
            calendarOptions = calendarOptions,
            cancelButtonText = cancelButtonText,
            dateOutOfRangeMessage = dateOutOfRangeMessage,
            dateSerializationFormat = dateSerializationFormat,
            disabledDates = disabledDates,
            displayFormat = displayFormat,
            interval = interval,
            invalidDateMessage = invalidDateMessage,
            max = max,
            maxZoomLevel = maxZoomLevel,
            min = min,
            minZoomLevel = minZoomLevel,
            pickerType = pickerType,
            placeholder = placeholder,
            showAnalogClock = showAnalogClock,
            type = type,
            value = value,
            acceptCustomValue = acceptCustomValue,
            activeStateEnabled = activeStateEnabled,
            applyValueMode = applyValueMode,
            deferRendering = deferRendering,
            dropDownButtonTemplate = dropDownButtonTemplate,
            opened = isOpened,
            maxLength = maxLength,
            mode = mode,
            focusStateEnabled = focusStateEnabled,
            hoverStateEnabled = hoverStateEnabled,
            inputAttr = inputAttr,
            mask = mask,
            maskChar = maskChar,
            maskInvalidMessage = maskInvalidMessage,
            maskRules = maskRules,
            name = name,
            showClearButton = showClearButton,
            showMaskMode = showMaskMode,
            spellcheck = spellcheck,
            text = text,
            useMaskedValue = useMaskedValue,
            valueChangeEvent = valueChangeEvent,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            onClosedEnabled = onClosedEnabled,
            onOpenedEnabled = onOpenedEnabled,
            onChangeEnabled = onChangeEnabled,
            onCopyEnabled = onCopyEnabled,
            onCutEnabled = onCutEnabled,
            onEnterKeyEnabled = onEnterKeyEnabled,
            onFocusInEnabled = onFocusInEnabled,
            onFocusOutEnabled = onFocusOutEnabled,
            onInputEnabled = onInputEnabled,
            onKeyDownEnabled = onKeyDownEnabled,
            onKeyPressEnabled = onKeyPressEnabled,
            onKeyUpEnabled = onKeyUpEnabled,
            onPasteEnabled = onPasteEnabled,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override ValueTask<object> Init(DevExpress.Ui.DxDateBoxOptions options) {
        return DevExpress.Ui.DxDateBoxInterop.Init(dxTarget, options);
    }
    bool? adaptivityEnabled;
    [Parameter] public
    bool? AdaptivityEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetAdaptivityEnabled(dxTarget).Result : adaptivityEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetAdaptivityEnabled(dxTarget, value);
            } else {
                this.adaptivityEnabled = value;
            }
        }
    }
    string applyButtonText;
    [Parameter] public
    string ApplyButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetApplyButtonText(dxTarget).Result : applyButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetApplyButtonText(dxTarget, value);
            } else {
                this.applyButtonText = value;
            }
        }
    }
    object calendarOptions;
    [Parameter] public
    object CalendarOptions {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetCalendarOptions(dxTarget).Result : calendarOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetCalendarOptions(dxTarget, value);
            } else {
                this.calendarOptions = value;
            }
        }
    }
    string cancelButtonText;
    [Parameter] public
    string CancelButtonText {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetCancelButtonText(dxTarget).Result : cancelButtonText;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetCancelButtonText(dxTarget, value);
            } else {
                this.cancelButtonText = value;
            }
        }
    }
    string dateOutOfRangeMessage;
    [Parameter] public
    string DateOutOfRangeMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetDateOutOfRangeMessage(dxTarget).Result : dateOutOfRangeMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDateOutOfRangeMessage(dxTarget, value);
            } else {
                this.dateOutOfRangeMessage = value;
            }
        }
    }
    string dateSerializationFormat;
    [Parameter] public
    string DateSerializationFormat {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetDateSerializationFormat(dxTarget).Result : dateSerializationFormat;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDateSerializationFormat(dxTarget, value);
            } else {
                this.dateSerializationFormat = value;
            }
        }
    }
    object disabledDates;
    [Parameter] public
    object DisabledDates {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisabledDates(dxTarget).Result : disabledDates;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDisabledDates(dxTarget, value);
            } else {
                this.disabledDates = value;
            }
        }
    }
    object displayFormat;
    [Parameter] public
    object DisplayFormat {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisplayFormat(dxTarget).Result : displayFormat;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDisplayFormat(dxTarget, value);
            } else {
                this.displayFormat = value;
            }
        }
    }
    float? interval;
    [Parameter] public
    float? Interval {
        get => isInitialized ? (float?)DevExpress.Ui.DxDateBoxInterop.GetInterval(dxTarget).Result : interval;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetInterval(dxTarget, value);
            } else {
                this.interval = value;
            }
        }
    }
    string invalidDateMessage;
    [Parameter] public
    string InvalidDateMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetInvalidDateMessage(dxTarget).Result : invalidDateMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetInvalidDateMessage(dxTarget, value);
            } else {
                this.invalidDateMessage = value;
            }
        }
    }
    object max;
    [Parameter] public
    object Max {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMax(dxTarget).Result : max;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMax(dxTarget, value);
            } else {
                this.max = value;
            }
        }
    }
    string maxZoomLevel;
    [Parameter] public
    string MaxZoomLevel {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaxZoomLevel(dxTarget).Result : maxZoomLevel;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMaxZoomLevel(dxTarget, value);
            } else {
                this.maxZoomLevel = value;
            }
        }
    }
    object min;
    [Parameter] public
    object Min {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMin(dxTarget).Result : min;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMin(dxTarget, value);
            } else {
                this.min = value;
            }
        }
    }
    string minZoomLevel;
    [Parameter] public
    string MinZoomLevel {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMinZoomLevel(dxTarget).Result : minZoomLevel;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMinZoomLevel(dxTarget, value);
            } else {
                this.minZoomLevel = value;
            }
        }
    }
    string pickerType;
    [Parameter] public
    string PickerType {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetPickerType(dxTarget).Result : pickerType;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetPickerType(dxTarget, value);
            } else {
                this.pickerType = value;
            }
        }
    }
    string placeholder;
    [Parameter] public
    string Placeholder {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetPlaceholder(dxTarget).Result : placeholder;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetPlaceholder(dxTarget, value);
            } else {
                this.placeholder = value;
            }
        }
    }
    bool? showAnalogClock;
    [Parameter] public
    bool? ShowAnalogClock {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetShowAnalogClock(dxTarget).Result : showAnalogClock;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetShowAnalogClock(dxTarget, value);
            } else {
                this.showAnalogClock = value;
            }
        }
    }
    string type;
    [Parameter] public
    string Type {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetType(dxTarget).Result : type;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetType(dxTarget, value);
            } else {
                this.type = value;
            }
        }
    }
    object value;
    [Parameter] public
    object Value {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    bool? acceptCustomValue;
    [Parameter] public
    bool? AcceptCustomValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetAcceptCustomValue(dxTarget).Result : acceptCustomValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetAcceptCustomValue(dxTarget, value);
            } else {
                this.acceptCustomValue = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter] public
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    string applyValueMode;
    [Parameter] public
    string ApplyValueMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetApplyValueMode(dxTarget, value);
            } else {
                this.applyValueMode = value;
            }
        }
    }
    bool? deferRendering;
    [Parameter] public
    bool? DeferRendering {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetDeferRendering(dxTarget).Result : deferRendering;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDeferRendering(dxTarget, value);
            } else {
                this.deferRendering = value;
            }
        }
    }
    object dropDownButtonTemplate;
    [Parameter] public
    object DropDownButtonTemplate {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDropDownButtonTemplate(dxTarget).Result : dropDownButtonTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDropDownButtonTemplate(dxTarget, value);
            } else {
                this.dropDownButtonTemplate = value;
            }
        }
    }
    bool? isOpened;
    [Parameter] public
    bool? IsOpened {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetOpened(dxTarget).Result : isOpened;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetOpened(dxTarget, value);
            } else {
                this.isOpened = value;
            }
        }
    }
    object maxLength;
    [Parameter] public
    object MaxLength {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaxLength(dxTarget).Result : maxLength;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMaxLength(dxTarget, value);
            } else {
                this.maxLength = value;
            }
        }
    }
    string mode;
    [Parameter] public
    string Mode {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMode(dxTarget).Result : mode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMode(dxTarget, value);
            } else {
                this.mode = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter] public
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter] public
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    object inputAttr;
    [Parameter] public
    object InputAttr {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetInputAttr(dxTarget).Result : inputAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetInputAttr(dxTarget, value);
            } else {
                this.inputAttr = value;
            }
        }
    }
    string mask;
    [Parameter] public
    string Mask {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMask(dxTarget).Result : mask;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMask(dxTarget, value);
            } else {
                this.mask = value;
            }
        }
    }
    string maskChar;
    [Parameter] public
    string MaskChar {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaskChar(dxTarget).Result : maskChar;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMaskChar(dxTarget, value);
            } else {
                this.maskChar = value;
            }
        }
    }
    string maskInvalidMessage;
    [Parameter] public
    string MaskInvalidMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetMaskInvalidMessage(dxTarget).Result : maskInvalidMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMaskInvalidMessage(dxTarget, value);
            } else {
                this.maskInvalidMessage = value;
            }
        }
    }
    object maskRules;
    [Parameter] public
    object MaskRules {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaskRules(dxTarget).Result : maskRules;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetMaskRules(dxTarget, value);
            } else {
                this.maskRules = value;
            }
        }
    }
    string name;
    [Parameter] public
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    bool? showClearButton;
    [Parameter] public
    bool? ShowClearButton {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetShowClearButton(dxTarget).Result : showClearButton;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetShowClearButton(dxTarget, value);
            } else {
                this.showClearButton = value;
            }
        }
    }
    string showMaskMode;
    [Parameter] public
    string ShowMaskMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetShowMaskMode(dxTarget).Result : showMaskMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetShowMaskMode(dxTarget, value);
            } else {
                this.showMaskMode = value;
            }
        }
    }
    bool? spellcheck;
    [Parameter] public
    bool? Spellcheck {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetSpellcheck(dxTarget).Result : spellcheck;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetSpellcheck(dxTarget, value);
            } else {
                this.spellcheck = value;
            }
        }
    }
    string text;
    [Parameter] public
    string Text {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetText(dxTarget).Result : text;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetText(dxTarget, value);
            } else {
                this.text = value;
            }
        }
    }
    bool? useMaskedValue;
    [Parameter] public
    bool? UseMaskedValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetUseMaskedValue(dxTarget).Result : useMaskedValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetUseMaskedValue(dxTarget, value);
            } else {
                this.useMaskedValue = value;
            }
        }
    }
    string valueChangeEvent;
    [Parameter] public
    string ValueChangeEvent {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetValueChangeEvent(dxTarget).Result : valueChangeEvent;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetValueChangeEvent(dxTarget, value);
            } else {
                this.valueChangeEvent = value;
            }
        }
    }
    bool? isValid;
    [Parameter] public
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter] public
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter] public
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter] public
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter] public
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? disabled;
    [Parameter] public
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter] public
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxDateBoxInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter] public
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxDateBoxInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter] public
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter] public
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter] public
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter] public
    object Height {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter] public
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDateBoxInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter] public
    object Width {
        get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDateBoxInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    bool? onClosedEnabled;
    [Parameter] public
    bool? OnClosedEnabled {
        get => onClosedEnabled;
        set => this.onClosedEnabled = value;
    }
    bool? onOpenedEnabled;
    [Parameter] public
    bool? OnOpenedEnabled {
        get => onOpenedEnabled;
        set => this.onOpenedEnabled = value;
    }
    bool? onChangeEnabled;
    [Parameter] public
    bool? OnChangeEnabled {
        get => onChangeEnabled;
        set => this.onChangeEnabled = value;
    }
    bool? onCopyEnabled;
    [Parameter] public
    bool? OnCopyEnabled {
        get => onCopyEnabled;
        set => this.onCopyEnabled = value;
    }
    bool? onCutEnabled;
    [Parameter] public
    bool? OnCutEnabled {
        get => onCutEnabled;
        set => this.onCutEnabled = value;
    }
    bool? onEnterKeyEnabled;
    [Parameter] public
    bool? OnEnterKeyEnabled {
        get => onEnterKeyEnabled;
        set => this.onEnterKeyEnabled = value;
    }
    bool? onFocusInEnabled;
    [Parameter] public
    bool? OnFocusInEnabled {
        get => onFocusInEnabled;
        set => this.onFocusInEnabled = value;
    }
    bool? onFocusOutEnabled;
    [Parameter] public
    bool? OnFocusOutEnabled {
        get => onFocusOutEnabled;
        set => this.onFocusOutEnabled = value;
    }
    bool? onInputEnabled;
    [Parameter] public
    bool? OnInputEnabled {
        get => onInputEnabled;
        set => this.onInputEnabled = value;
    }
    bool? onKeyDownEnabled;
    [Parameter] public
    bool? OnKeyDownEnabled {
        get => onKeyDownEnabled;
        set => this.onKeyDownEnabled = value;
    }
    bool? onKeyPressEnabled;
    [Parameter] public
    bool? OnKeyPressEnabled {
        get => onKeyPressEnabled;
        set => this.onKeyPressEnabled = value;
    }
    bool? onKeyUpEnabled;
    [Parameter] public
    bool? OnKeyUpEnabled {
        get => onKeyUpEnabled;
        set => this.onKeyUpEnabled = value;
    }
    bool? onPasteEnabled;
    [Parameter] public
    bool? OnPasteEnabled {
        get => onPasteEnabled;
        set => this.onPasteEnabled = value;
    }
    bool? onValueChangedEnabled;
    [Parameter] public
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter] public
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter] public
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter] public
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter] public
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DevExpress.Ui.DxDateBoxInterop.Closed += DxDateBox_Closed;
        DevExpress.Ui.DxDateBoxInterop.Opened += DxDateBox_Opened;
        DevExpress.Ui.DxDateBoxInterop.Change += DxDateBox_Change;
        DevExpress.Ui.DxDateBoxInterop.Copy += DxDateBox_Copy;
        DevExpress.Ui.DxDateBoxInterop.Cut += DxDateBox_Cut;
        DevExpress.Ui.DxDateBoxInterop.EnterKey += DxDateBox_EnterKey;
        DevExpress.Ui.DxDateBoxInterop.FocusIn += DxDateBox_FocusIn;
        DevExpress.Ui.DxDateBoxInterop.FocusOut += DxDateBox_FocusOut;
        DevExpress.Ui.DxDateBoxInterop.Input += DxDateBox_Input;
        DevExpress.Ui.DxDateBoxInterop.KeyDown += DxDateBox_KeyDown;
        DevExpress.Ui.DxDateBoxInterop.KeyPress += DxDateBox_KeyPress;
        DevExpress.Ui.DxDateBoxInterop.KeyUp += DxDateBox_KeyUp;
        DevExpress.Ui.DxDateBoxInterop.Paste += DxDateBox_Paste;
        DevExpress.Ui.DxDateBoxInterop.ValueChanged += DxDateBox_ValueChanged;
        DevExpress.Ui.DxDateBoxInterop.ContentReady += DxDateBox_ContentReady;
        DevExpress.Ui.DxDateBoxInterop.Disposing += DxDateBox_Disposing;
        DevExpress.Ui.DxDateBoxInterop.OptionChanged += DxDateBox_OptionChanged;
        DevExpress.Ui.DxDateBoxInterop.Initialized += DxDateBox_Initialized;
    }
    [Parameter] public
    Action Closed { get; set; }
    void DxDateBox_Closed(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Closed?.Invoke();
        }
    }
    [Parameter] public
    Action Opened { get; set; }
    void DxDateBox_Opened(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Opened?.Invoke();
        }
    }
    [Parameter] public
    Action Change { get; set; }
    void DxDateBox_Change(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Change?.Invoke();
        }
    }
    [Parameter] public
    Action Copy { get; set; }
    void DxDateBox_Copy(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Copy?.Invoke();
        }
    }
    [Parameter] public
    Action Cut { get; set; }
    void DxDateBox_Cut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Cut?.Invoke();
        }
    }
    [Parameter] public
    Action EnterKey { get; set; }
    void DxDateBox_EnterKey(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            EnterKey?.Invoke();
        }
    }
    [Parameter] public
    Action FocusIn { get; set; }
    void DxDateBox_FocusIn(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusIn?.Invoke();
        }
    }
    [Parameter] public
    Action FocusOut { get; set; }
    void DxDateBox_FocusOut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusOut?.Invoke();
        }
    }
    [Parameter] public
    Action Input { get; set; }
    void DxDateBox_Input(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Input?.Invoke();
        }
    }
    [Parameter] public
    Action KeyDown { get; set; }
    void DxDateBox_KeyDown(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyDown?.Invoke();
        }
    }
    [Parameter] public
    Action KeyPress { get; set; }
    void DxDateBox_KeyPress(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyPress?.Invoke();
        }
    }
    [Parameter] public
    Action KeyUp { get; set; }
    void DxDateBox_KeyUp(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyUp?.Invoke();
        }
    }
    [Parameter] public
    Action Paste { get; set; }
    void DxDateBox_Paste(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Paste?.Invoke();
        }
    }
    [Parameter] public
    Action<string> ValueChanged { get; set; }
    void DxDateBox_ValueChanged(object sender, (JQueryEventArgs jQueryEventArgs, string value) args)
    {
        if (args.jQueryEventArgs.Identifier == Id)
        {
            ValueChanged?.Invoke(args.value);
        }
    }
    [Parameter] public
    Action ContentReady { get; set; }
    void DxDateBox_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter] public
    Action Disposing { get; set; }
    void DxDateBox_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter] public
    Action OptionChanged { get; set; }
    void DxDateBox_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter] public
    Action Initialized { get; set; }
    void DxDateBox_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void Close() {
        DevExpress.Ui.DxDateBoxInterop.Close(dxTarget);
    }
    public void Open() {
        DevExpress.Ui.DxDateBoxInterop.Open(dxTarget);
    }
    public void Dispose() {
        DevExpress.Ui.DxDateBoxInterop.Closed -= DxDateBox_Closed;
        DevExpress.Ui.DxDateBoxInterop.Opened -= DxDateBox_Opened;
        DevExpress.Ui.DxDateBoxInterop.Change -= DxDateBox_Change;
        DevExpress.Ui.DxDateBoxInterop.Copy -= DxDateBox_Copy;
        DevExpress.Ui.DxDateBoxInterop.Cut -= DxDateBox_Cut;
        DevExpress.Ui.DxDateBoxInterop.EnterKey -= DxDateBox_EnterKey;
        DevExpress.Ui.DxDateBoxInterop.FocusIn -= DxDateBox_FocusIn;
        DevExpress.Ui.DxDateBoxInterop.FocusOut -= DxDateBox_FocusOut;
        DevExpress.Ui.DxDateBoxInterop.Input -= DxDateBox_Input;
        DevExpress.Ui.DxDateBoxInterop.KeyDown -= DxDateBox_KeyDown;
        DevExpress.Ui.DxDateBoxInterop.KeyPress -= DxDateBox_KeyPress;
        DevExpress.Ui.DxDateBoxInterop.KeyUp -= DxDateBox_KeyUp;
        DevExpress.Ui.DxDateBoxInterop.Paste -= DxDateBox_Paste;
        DevExpress.Ui.DxDateBoxInterop.ValueChanged -= DxDateBox_ValueChanged;
        DevExpress.Ui.DxDateBoxInterop.ContentReady -= DxDateBox_ContentReady;
        DevExpress.Ui.DxDateBoxInterop.Disposing -= DxDateBox_Disposing;
        DevExpress.Ui.DxDateBoxInterop.OptionChanged -= DxDateBox_OptionChanged;
        DevExpress.Ui.DxDateBoxInterop.Initialized -= DxDateBox_Initialized;
    }
}
