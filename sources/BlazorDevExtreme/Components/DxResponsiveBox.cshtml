@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxResponsiveBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxResponsiveBox() : base("DxResponsiveBox") { }
	protected override DevExpress.Ui.DxResponsiveBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxResponsiveBoxOptions {
			cols = cols,
			height = height,
			rows = rows,
			screenByWidth = screenByWidth,
			singleColumnScreen = singleColumnScreen,
			width = width,
			dataSource = dataSource,
			itemHoldTimeout = itemHoldTimeout,
			items = items,
			itemTemplate = itemTemplate,
			keyExpr = keyExpr,
			noDataText = noDataText,
			selectedIndex = selectedIndex,
			selectedItem = selectedItem,
			selectedItemKeys = selectedItemKeys,
			selectedItems = selectedItems,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			rtlEnabled = rtlEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemRenderedEnabled = onItemRenderedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxResponsiveBoxOptions options) {
		return DevExpress.Ui.DxResponsiveBoxInterop.Init(dxTarget, options);
	}
	object cols;
	[Parameter]
	object Cols {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetColsOption(dxTarget).Result : cols;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetColsOption(dxTarget, value);
			} else {
				this.cols = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object rows;
	[Parameter]
	object Rows {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetRowsOption(dxTarget).Result : rows;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetRowsOption(dxTarget, value);
			} else {
				this.rows = value;
			}
		}
	}
	object screenByWidth;
	[Parameter]
	object ScreenByWidth {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetScreenByWidthOption(dxTarget).Result : screenByWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetScreenByWidthOption(dxTarget, value);
			} else {
				this.screenByWidth = value;
			}
		}
	}
	string singleColumnScreen;
	[Parameter]
	string SingleColumnScreen {
		get => isInitialized ? (string)DevExpress.Ui.DxResponsiveBoxInterop.GetSingleColumnScreenOption(dxTarget).Result : singleColumnScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSingleColumnScreenOption(dxTarget, value);
			} else {
				this.singleColumnScreen = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	float? itemHoldTimeout;
	[Parameter]
	float? ItemHoldTimeout {
		get => isInitialized ? (float?)DevExpress.Ui.DxResponsiveBoxInterop.GetItemHoldTimeoutOption(dxTarget).Result : itemHoldTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetItemHoldTimeoutOption(dxTarget, value);
			} else {
				this.itemHoldTimeout = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetItemsOption(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetItemsOption(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	object itemTemplate;
	[Parameter]
	object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetItemTemplateOption(dxTarget).Result : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetItemTemplateOption(dxTarget, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetKeyExprOption(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetKeyExprOption(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxResponsiveBoxInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxResponsiveBoxInterop.GetSelectedIndexOption(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSelectedIndexOption(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetSelectedItemOption(dxTarget).Result : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSelectedItemOption(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	object selectedItemKeys;
	[Parameter]
	object SelectedItemKeys {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetSelectedItemKeysOption(dxTarget).Result : selectedItemKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSelectedItemKeysOption(dxTarget, value);
			} else {
				this.selectedItemKeys = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetSelectedItemsOption(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSelectedItemsOption(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxResponsiveBoxInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxResponsiveBoxInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxResponsiveBoxInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxResponsiveBoxInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemRenderedEnabled;
	[Parameter]
	bool? OnItemRenderedEnabled {
		get => onItemRenderedEnabled;
		set => this.onItemRenderedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxResponsiveBoxInterop.ItemClick += DxResponsiveBox_ItemClick;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemContextMenu += DxResponsiveBox_ItemContextMenu;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemHold += DxResponsiveBox_ItemHold;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemRendered += DxResponsiveBox_ItemRendered;
		DevExpress.Ui.DxResponsiveBoxInterop.SelectionChanged += DxResponsiveBox_SelectionChanged;
		DevExpress.Ui.DxResponsiveBoxInterop.ContentReady += DxResponsiveBox_ContentReady;
		DevExpress.Ui.DxResponsiveBoxInterop.Disposing += DxResponsiveBox_Disposing;
		DevExpress.Ui.DxResponsiveBoxInterop.OptionChanged += DxResponsiveBox_OptionChanged;
		DevExpress.Ui.DxResponsiveBoxInterop.Initialized += DxResponsiveBox_Initialized;
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxResponsiveBox_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxResponsiveBox_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxResponsiveBox_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemRendered { get; set; }
	void DxResponsiveBox_ItemRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemRendered?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxResponsiveBox_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxResponsiveBox_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxResponsiveBox_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxResponsiveBox_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxResponsiveBox_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxResponsiveBoxInterop.ItemClick -= DxResponsiveBox_ItemClick;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemContextMenu -= DxResponsiveBox_ItemContextMenu;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemHold -= DxResponsiveBox_ItemHold;
		DevExpress.Ui.DxResponsiveBoxInterop.ItemRendered -= DxResponsiveBox_ItemRendered;
		DevExpress.Ui.DxResponsiveBoxInterop.SelectionChanged -= DxResponsiveBox_SelectionChanged;
		DevExpress.Ui.DxResponsiveBoxInterop.ContentReady -= DxResponsiveBox_ContentReady;
		DevExpress.Ui.DxResponsiveBoxInterop.Disposing -= DxResponsiveBox_Disposing;
		DevExpress.Ui.DxResponsiveBoxInterop.OptionChanged -= DxResponsiveBox_OptionChanged;
		DevExpress.Ui.DxResponsiveBoxInterop.Initialized -= DxResponsiveBox_Initialized;
	}
}
