
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDropDownBoxOptions>

<div id="@Id" @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public DxDropDownBox() : base("DxDropDownBox") { }
    protected override DevExpress.Ui.DxDropDownBoxOptions CreateOptions() {
        return new DevExpress.Ui.DxDropDownBoxOptions {
            acceptCustomValue = acceptCustomValue,
            contentTemplate = contentTemplate,
            dropDownOptions = dropDownOptions,
            fieldTemplate = fieldTemplate,
            valueChangeEvent = valueChangeEvent,
            activeStateEnabled = activeStateEnabled,
            applyValueMode = applyValueMode,
            deferRendering = deferRendering,
            dropDownButtonTemplate = dropDownButtonTemplate,
            opened = isOpened,
            value = value,
            maxLength = maxLength,
            mode = mode,
            focusStateEnabled = focusStateEnabled,
            hoverStateEnabled = hoverStateEnabled,
            inputAttr = inputAttr,
            mask = mask,
            maskChar = maskChar,
            maskInvalidMessage = maskInvalidMessage,
            maskRules = maskRules,
            name = name,
            placeholder = placeholder,
            showClearButton = showClearButton,
            showMaskMode = showMaskMode,
            spellcheck = spellcheck,
            text = text,
            useMaskedValue = useMaskedValue,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            accessKey = accessKey,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            dataSource = dataSource,
            displayExpr = displayExpr,
            items = items,
            itemTemplate = itemTemplate,
            valueExpr = valueExpr,
            onClosedEnabled = onClosedEnabled,
            onOpenedEnabled = onOpenedEnabled,
            onChangeEnabled = onChangeEnabled,
            onCopyEnabled = onCopyEnabled,
            onCutEnabled = onCutEnabled,
            onEnterKeyEnabled = onEnterKeyEnabled,
            onFocusInEnabled = onFocusInEnabled,
            onFocusOutEnabled = onFocusOutEnabled,
            onInputEnabled = onInputEnabled,
            onKeyDownEnabled = onKeyDownEnabled,
            onKeyPressEnabled = onKeyPressEnabled,
            onKeyUpEnabled = onKeyUpEnabled,
            onPasteEnabled = onPasteEnabled,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override Task Init(DevExpress.Ui.DxDropDownBoxOptions options) {
        return DevExpress.Ui.DxDropDownBoxInterop.Init(dxTarget, options);
    }
    bool? acceptCustomValue;
    [Parameter]
    bool? AcceptCustomValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetAcceptCustomValue(dxTarget).Result : acceptCustomValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetAcceptCustomValue(dxTarget, value);
            } else {
                this.acceptCustomValue = value;
            }
        }
    }
    object contentTemplate;
    [Parameter]
    object ContentTemplate {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetContentTemplate(dxTarget).Result : contentTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetContentTemplate(dxTarget, value);
            } else {
                this.contentTemplate = value;
            }
        }
    }
    object dropDownOptions;
    [Parameter]
    object DropDownOptions {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetDropDownOptions(dxTarget).Result : dropDownOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDropDownOptions(dxTarget, value);
            } else {
                this.dropDownOptions = value;
            }
        }
    }
    object fieldTemplate;
    [Parameter]
    object FieldTemplate {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetFieldTemplate(dxTarget).Result : fieldTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetFieldTemplate(dxTarget, value);
            } else {
                this.fieldTemplate = value;
            }
        }
    }
    string valueChangeEvent;
    [Parameter]
    string ValueChangeEvent {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetValueChangeEvent(dxTarget).Result : valueChangeEvent;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetValueChangeEvent(dxTarget, value);
            } else {
                this.valueChangeEvent = value;
            }
        }
    }
    bool? activeStateEnabled;
    [Parameter]
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    string applyValueMode;
    [Parameter]
    string ApplyValueMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetApplyValueMode(dxTarget, value);
            } else {
                this.applyValueMode = value;
            }
        }
    }
    bool? deferRendering;
    [Parameter]
    bool? DeferRendering {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetDeferRendering(dxTarget).Result : deferRendering;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDeferRendering(dxTarget, value);
            } else {
                this.deferRendering = value;
            }
        }
    }
    object dropDownButtonTemplate;
    [Parameter]
    object DropDownButtonTemplate {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetDropDownButtonTemplate(dxTarget).Result : dropDownButtonTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDropDownButtonTemplate(dxTarget, value);
            } else {
                this.dropDownButtonTemplate = value;
            }
        }
    }
    bool? isOpened;
    [Parameter]
    bool? IsOpened {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetOpened(dxTarget).Result : isOpened;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetOpened(dxTarget, value);
            } else {
                this.isOpened = value;
            }
        }
    }
    object value;
    [Parameter]
    object Value {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    object maxLength;
    [Parameter]
    object MaxLength {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetMaxLength(dxTarget).Result : maxLength;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMaxLength(dxTarget, value);
            } else {
                this.maxLength = value;
            }
        }
    }
    string mode;
    [Parameter]
    string Mode {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetMode(dxTarget).Result : mode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMode(dxTarget, value);
            } else {
                this.mode = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter]
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter]
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    object inputAttr;
    [Parameter]
    object InputAttr {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetInputAttr(dxTarget).Result : inputAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetInputAttr(dxTarget, value);
            } else {
                this.inputAttr = value;
            }
        }
    }
    string mask;
    [Parameter]
    string Mask {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetMask(dxTarget).Result : mask;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMask(dxTarget, value);
            } else {
                this.mask = value;
            }
        }
    }
    string maskChar;
    [Parameter]
    string MaskChar {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetMaskChar(dxTarget).Result : maskChar;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMaskChar(dxTarget, value);
            } else {
                this.maskChar = value;
            }
        }
    }
    string maskInvalidMessage;
    [Parameter]
    string MaskInvalidMessage {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetMaskInvalidMessage(dxTarget).Result : maskInvalidMessage;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMaskInvalidMessage(dxTarget, value);
            } else {
                this.maskInvalidMessage = value;
            }
        }
    }
    object maskRules;
    [Parameter]
    object MaskRules {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetMaskRules(dxTarget).Result : maskRules;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetMaskRules(dxTarget, value);
            } else {
                this.maskRules = value;
            }
        }
    }
    string name;
    [Parameter]
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    string placeholder;
    [Parameter]
    string Placeholder {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetPlaceholder(dxTarget).Result : placeholder;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetPlaceholder(dxTarget, value);
            } else {
                this.placeholder = value;
            }
        }
    }
    bool? showClearButton;
    [Parameter]
    bool? ShowClearButton {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetShowClearButton(dxTarget).Result : showClearButton;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetShowClearButton(dxTarget, value);
            } else {
                this.showClearButton = value;
            }
        }
    }
    string showMaskMode;
    [Parameter]
    string ShowMaskMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetShowMaskMode(dxTarget).Result : showMaskMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetShowMaskMode(dxTarget, value);
            } else {
                this.showMaskMode = value;
            }
        }
    }
    bool? spellcheck;
    [Parameter]
    bool? Spellcheck {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetSpellcheck(dxTarget).Result : spellcheck;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetSpellcheck(dxTarget, value);
            } else {
                this.spellcheck = value;
            }
        }
    }
    string text;
    [Parameter]
    string Text {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetText(dxTarget).Result : text;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetText(dxTarget, value);
            } else {
                this.text = value;
            }
        }
    }
    bool? useMaskedValue;
    [Parameter]
    bool? UseMaskedValue {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetUseMaskedValue(dxTarget).Result : useMaskedValue;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetUseMaskedValue(dxTarget, value);
            } else {
                this.useMaskedValue = value;
            }
        }
    }
    bool? isValid;
    [Parameter]
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter]
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter]
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter]
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    string accessKey;
    [Parameter]
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? disabled;
    [Parameter]
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter]
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxDropDownBoxInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter]
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxDropDownBoxInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter]
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter]
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter]
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter]
    object Height {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter]
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxDropDownBoxInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter]
    object Width {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    object dataSource;
    [Parameter]
    object DataSource {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetDataSource(dxTarget).Result : dataSource;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDataSource(dxTarget, value);
            } else {
                this.dataSource = value;
            }
        }
    }
    object displayExpr;
    [Parameter]
    object DisplayExpr {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetDisplayExpr(dxTarget).Result : displayExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetDisplayExpr(dxTarget, value);
            } else {
                this.displayExpr = value;
            }
        }
    }
    object items;
    [Parameter]
    object Items {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetItems(dxTarget).Result : items;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetItems(dxTarget, value);
            } else {
                this.items = value;
            }
        }
    }
    object itemTemplate;
    [Parameter]
    object ItemTemplate {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetItemTemplate(dxTarget).Result : itemTemplate;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetItemTemplate(dxTarget, value);
            } else {
                this.itemTemplate = value;
            }
        }
    }
    object valueExpr;
    [Parameter]
    object ValueExpr {
        get => isInitialized ? DevExpress.Ui.DxDropDownBoxInterop.GetValueExpr(dxTarget).Result : valueExpr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxDropDownBoxInterop.SetValueExpr(dxTarget, value);
            } else {
                this.valueExpr = value;
            }
        }
    }
    bool? onClosedEnabled;
    [Parameter]
    bool? OnClosedEnabled {
        get => onClosedEnabled;
        set => this.onClosedEnabled = value;
    }
    bool? onOpenedEnabled;
    [Parameter]
    bool? OnOpenedEnabled {
        get => onOpenedEnabled;
        set => this.onOpenedEnabled = value;
    }
    bool? onChangeEnabled;
    [Parameter]
    bool? OnChangeEnabled {
        get => onChangeEnabled;
        set => this.onChangeEnabled = value;
    }
    bool? onCopyEnabled;
    [Parameter]
    bool? OnCopyEnabled {
        get => onCopyEnabled;
        set => this.onCopyEnabled = value;
    }
    bool? onCutEnabled;
    [Parameter]
    bool? OnCutEnabled {
        get => onCutEnabled;
        set => this.onCutEnabled = value;
    }
    bool? onEnterKeyEnabled;
    [Parameter]
    bool? OnEnterKeyEnabled {
        get => onEnterKeyEnabled;
        set => this.onEnterKeyEnabled = value;
    }
    bool? onFocusInEnabled;
    [Parameter]
    bool? OnFocusInEnabled {
        get => onFocusInEnabled;
        set => this.onFocusInEnabled = value;
    }
    bool? onFocusOutEnabled;
    [Parameter]
    bool? OnFocusOutEnabled {
        get => onFocusOutEnabled;
        set => this.onFocusOutEnabled = value;
    }
    bool? onInputEnabled;
    [Parameter]
    bool? OnInputEnabled {
        get => onInputEnabled;
        set => this.onInputEnabled = value;
    }
    bool? onKeyDownEnabled;
    [Parameter]
    bool? OnKeyDownEnabled {
        get => onKeyDownEnabled;
        set => this.onKeyDownEnabled = value;
    }
    bool? onKeyPressEnabled;
    [Parameter]
    bool? OnKeyPressEnabled {
        get => onKeyPressEnabled;
        set => this.onKeyPressEnabled = value;
    }
    bool? onKeyUpEnabled;
    [Parameter]
    bool? OnKeyUpEnabled {
        get => onKeyUpEnabled;
        set => this.onKeyUpEnabled = value;
    }
    bool? onPasteEnabled;
    [Parameter]
    bool? OnPasteEnabled {
        get => onPasteEnabled;
        set => this.onPasteEnabled = value;
    }
    bool? onValueChangedEnabled;
    [Parameter]
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter]
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter]
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter]
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter]
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitAsync() {
        await base.OnInitAsync();
        DevExpress.Ui.DxDropDownBoxInterop.Closed += DxDropDownBox_Closed;
        DevExpress.Ui.DxDropDownBoxInterop.Opened += DxDropDownBox_Opened;
        DevExpress.Ui.DxDropDownBoxInterop.Change += DxDropDownBox_Change;
        DevExpress.Ui.DxDropDownBoxInterop.Copy += DxDropDownBox_Copy;
        DevExpress.Ui.DxDropDownBoxInterop.Cut += DxDropDownBox_Cut;
        DevExpress.Ui.DxDropDownBoxInterop.EnterKey += DxDropDownBox_EnterKey;
        DevExpress.Ui.DxDropDownBoxInterop.FocusIn += DxDropDownBox_FocusIn;
        DevExpress.Ui.DxDropDownBoxInterop.FocusOut += DxDropDownBox_FocusOut;
        DevExpress.Ui.DxDropDownBoxInterop.Input += DxDropDownBox_Input;
        DevExpress.Ui.DxDropDownBoxInterop.KeyDown += DxDropDownBox_KeyDown;
        DevExpress.Ui.DxDropDownBoxInterop.KeyPress += DxDropDownBox_KeyPress;
        DevExpress.Ui.DxDropDownBoxInterop.KeyUp += DxDropDownBox_KeyUp;
        DevExpress.Ui.DxDropDownBoxInterop.Paste += DxDropDownBox_Paste;
        //DevExpress.Ui.DxDropDownBoxInterop.ValueChanged += DxDropDownBox_ValueChanged;
        DevExpress.Ui.DxDropDownBoxInterop.ContentReady += DxDropDownBox_ContentReady;
        DevExpress.Ui.DxDropDownBoxInterop.Disposing += DxDropDownBox_Disposing;
        DevExpress.Ui.DxDropDownBoxInterop.OptionChanged += DxDropDownBox_OptionChanged;
        DevExpress.Ui.DxDropDownBoxInterop.Initialized += DxDropDownBox_Initialized;
    }
    [Parameter]
    Action Closed { get; set; }
    void DxDropDownBox_Closed(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Closed?.Invoke();
        }
    }
    [Parameter]
    Action Opened { get; set; }
    void DxDropDownBox_Opened(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Opened?.Invoke();
        }
    }
    [Parameter]
    Action Change { get; set; }
    void DxDropDownBox_Change(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Change?.Invoke();
        }
    }
    [Parameter]
    Action Copy { get; set; }
    void DxDropDownBox_Copy(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Copy?.Invoke();
        }
    }
    [Parameter]
    Action Cut { get; set; }
    void DxDropDownBox_Cut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Cut?.Invoke();
        }
    }
    [Parameter]
    Action EnterKey { get; set; }
    void DxDropDownBox_EnterKey(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            EnterKey?.Invoke();
        }
    }
    [Parameter]
    Action FocusIn { get; set; }
    void DxDropDownBox_FocusIn(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusIn?.Invoke();
        }
    }
    [Parameter]
    Action FocusOut { get; set; }
    void DxDropDownBox_FocusOut(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            FocusOut?.Invoke();
        }
    }
    [Parameter]
    Action Input { get; set; }
    void DxDropDownBox_Input(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Input?.Invoke();
        }
    }
    [Parameter]
    Action KeyDown { get; set; }
    void DxDropDownBox_KeyDown(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyDown?.Invoke();
        }
    }
    [Parameter]
    Action KeyPress { get; set; }
    void DxDropDownBox_KeyPress(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyPress?.Invoke();
        }
    }
    [Parameter]
    Action KeyUp { get; set; }
    void DxDropDownBox_KeyUp(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            KeyUp?.Invoke();
        }
    }
    [Parameter]
    Action Paste { get; set; }
    void DxDropDownBox_Paste(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Paste?.Invoke();
        }
    }
    [Parameter]
    Action ValueChanged { get; set; }
    void DxDropDownBox_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter]
    Action ContentReady { get; set; }
    void DxDropDownBox_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter]
    Action Disposing { get; set; }
    void DxDropDownBox_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter]
    Action OptionChanged { get; set; }
    void DxDropDownBox_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter]
    Action Initialized { get; set; }
    void DxDropDownBox_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public object GetDataSourceEx() {
        return DevExpress.Ui.DxDropDownBoxInterop.GetDataSourceEx(dxTarget).Result;
    }
    public void Dispose() {
        DevExpress.Ui.DxDropDownBoxInterop.Closed -= DxDropDownBox_Closed;
        DevExpress.Ui.DxDropDownBoxInterop.Opened -= DxDropDownBox_Opened;
        DevExpress.Ui.DxDropDownBoxInterop.Change -= DxDropDownBox_Change;
        DevExpress.Ui.DxDropDownBoxInterop.Copy -= DxDropDownBox_Copy;
        DevExpress.Ui.DxDropDownBoxInterop.Cut -= DxDropDownBox_Cut;
        DevExpress.Ui.DxDropDownBoxInterop.EnterKey -= DxDropDownBox_EnterKey;
        DevExpress.Ui.DxDropDownBoxInterop.FocusIn -= DxDropDownBox_FocusIn;
        DevExpress.Ui.DxDropDownBoxInterop.FocusOut -= DxDropDownBox_FocusOut;
        DevExpress.Ui.DxDropDownBoxInterop.Input -= DxDropDownBox_Input;
        DevExpress.Ui.DxDropDownBoxInterop.KeyDown -= DxDropDownBox_KeyDown;
        DevExpress.Ui.DxDropDownBoxInterop.KeyPress -= DxDropDownBox_KeyPress;
        DevExpress.Ui.DxDropDownBoxInterop.KeyUp -= DxDropDownBox_KeyUp;
        DevExpress.Ui.DxDropDownBoxInterop.Paste -= DxDropDownBox_Paste;
        //DevExpress.Ui.DxDropDownBoxInterop.ValueChanged -= DxDropDownBox_ValueChanged;
        DevExpress.Ui.DxDropDownBoxInterop.ContentReady -= DxDropDownBox_ContentReady;
        DevExpress.Ui.DxDropDownBoxInterop.Disposing -= DxDropDownBox_Disposing;
        DevExpress.Ui.DxDropDownBoxInterop.OptionChanged -= DxDropDownBox_OptionChanged;
        DevExpress.Ui.DxDropDownBoxInterop.Initialized -= DxDropDownBox_Initialized;
    }
}
