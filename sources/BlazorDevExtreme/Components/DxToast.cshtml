@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxToastOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxToast() : base("DxToast") { }
	protected override DevExpress.Ui.DxToastOptions CreateOptions() {
		return new DevExpress.Ui.DxToastOptions {
			animation = animation,
			closeOnBackButton = closeOnBackButton,
			closeOnClick = closeOnClick,
			closeOnOutsideClick = closeOnOutsideClick,
			closeOnSwipe = closeOnSwipe,
			displayTime = displayTime,
			height = height,
			maxWidth = maxWidth,
			message = message,
			minWidth = minWidth,
			position = position,
			shading = shading,
			type = type,
			width = width,
			contentTemplate = contentTemplate,
			deferRendering = deferRendering,
			dragEnabled = dragEnabled,
			maxHeight = maxHeight,
			minHeight = minHeight,
			shadingColor = shadingColor,
			visible = visible,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			rtlEnabled = rtlEnabled,
			onHiddenEnabled = onHiddenEnabled,
			onHidingEnabled = onHidingEnabled,
			onShowingEnabled = onShowingEnabled,
			onShownEnabled = onShownEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxToastOptions options) {
		return DevExpress.Ui.DxToastInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetAnimationOption(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetAnimationOption(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	bool? closeOnBackButton;
	[Parameter]
	bool? CloseOnBackButton {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetCloseOnBackButtonOption(dxTarget).Result : closeOnBackButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnBackButtonOption(dxTarget, value);
			} else {
				this.closeOnBackButton = value;
			}
		}
	}
	bool? closeOnClick;
	[Parameter]
	bool? CloseOnClick {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetCloseOnClickOption(dxTarget).Result : closeOnClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnClickOption(dxTarget, value);
			} else {
				this.closeOnClick = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnOutsideClickOption(dxTarget).Result : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnOutsideClickOption(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	bool? closeOnSwipe;
	[Parameter]
	bool? CloseOnSwipe {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetCloseOnSwipeOption(dxTarget).Result : closeOnSwipe;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnSwipeOption(dxTarget, value);
			} else {
				this.closeOnSwipe = value;
			}
		}
	}
	float? displayTime;
	[Parameter]
	float? DisplayTime {
		get => isInitialized ? (float?)DevExpress.Ui.DxToastInterop.GetDisplayTimeOption(dxTarget).Result : displayTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDisplayTimeOption(dxTarget, value);
			} else {
				this.displayTime = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object maxWidth;
	[Parameter]
	object MaxWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMaxWidthOption(dxTarget).Result : maxWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMaxWidthOption(dxTarget, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	string message;
	[Parameter]
	string Message {
		get => isInitialized ? (string)DevExpress.Ui.DxToastInterop.GetMessageOption(dxTarget).Result : message;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMessageOption(dxTarget, value);
			} else {
				this.message = value;
			}
		}
	}
	object minWidth;
	[Parameter]
	object MinWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMinWidthOption(dxTarget).Result : minWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMinWidthOption(dxTarget, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetPositionOption(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetPositionOption(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetShadingOption(dxTarget).Result : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetShadingOption(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? (string)DevExpress.Ui.DxToastInterop.GetTypeOption(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetTypeOption(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	object contentTemplate;
	[Parameter]
	object ContentTemplate {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetContentTemplateOption(dxTarget).Result : contentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetContentTemplateOption(dxTarget, value);
			} else {
				this.contentTemplate = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetDeferRenderingOption(dxTarget).Result : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDeferRenderingOption(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	bool? dragEnabled;
	[Parameter]
	bool? DragEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetDragEnabledOption(dxTarget).Result : dragEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDragEnabledOption(dxTarget, value);
			} else {
				this.dragEnabled = value;
			}
		}
	}
	object maxHeight;
	[Parameter]
	object MaxHeight {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMaxHeightOption(dxTarget).Result : maxHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMaxHeightOption(dxTarget, value);
			} else {
				this.maxHeight = value;
			}
		}
	}
	object minHeight;
	[Parameter]
	object MinHeight {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMinHeightOption(dxTarget).Result : minHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMinHeightOption(dxTarget, value);
			} else {
				this.minHeight = value;
			}
		}
	}
	string shadingColor;
	[Parameter]
	string ShadingColor {
		get => isInitialized ? (string)DevExpress.Ui.DxToastInterop.GetShadingColorOption(dxTarget).Result : shadingColor;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetShadingColorOption(dxTarget, value);
			} else {
				this.shadingColor = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxToastInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxToastInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxToastInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxToastInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	bool? onHiddenEnabled;
	[Parameter]
	bool? OnHiddenEnabled {
		get => onHiddenEnabled;
		set => this.onHiddenEnabled = value;
	}
	bool? onHidingEnabled;
	[Parameter]
	bool? OnHidingEnabled {
		get => onHidingEnabled;
		set => this.onHidingEnabled = value;
	}
	bool? onShowingEnabled;
	[Parameter]
	bool? OnShowingEnabled {
		get => onShowingEnabled;
		set => this.onShowingEnabled = value;
	}
	bool? onShownEnabled;
	[Parameter]
	bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxToastInterop.Hidden += DxToast_Hidden;
		DevExpress.Ui.DxToastInterop.Hiding += DxToast_Hiding;
		DevExpress.Ui.DxToastInterop.Showing += DxToast_Showing;
		DevExpress.Ui.DxToastInterop.Shown += DxToast_Shown;
		DevExpress.Ui.DxToastInterop.ContentReady += DxToast_ContentReady;
		DevExpress.Ui.DxToastInterop.Disposing += DxToast_Disposing;
		DevExpress.Ui.DxToastInterop.OptionChanged += DxToast_OptionChanged;
		DevExpress.Ui.DxToastInterop.Initialized += DxToast_Initialized;
	}
	[Parameter]
	Action Hidden { get; set; }
	void DxToast_Hidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hidden?.Invoke();
		}
	}
	[Parameter]
	Action Hiding { get; set; }
	void DxToast_Hiding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hiding?.Invoke();
		}
	}
	[Parameter]
	Action Showing { get; set; }
	void DxToast_Showing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Showing?.Invoke();
		}
	}
	[Parameter]
	Action Shown { get; set; }
	void DxToast_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxToast_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxToast_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxToast_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxToast_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxToastInterop.Hidden -= DxToast_Hidden;
		DevExpress.Ui.DxToastInterop.Hiding -= DxToast_Hiding;
		DevExpress.Ui.DxToastInterop.Showing -= DxToast_Showing;
		DevExpress.Ui.DxToastInterop.Shown -= DxToast_Shown;
		DevExpress.Ui.DxToastInterop.ContentReady -= DxToast_ContentReady;
		DevExpress.Ui.DxToastInterop.Disposing -= DxToast_Disposing;
		DevExpress.Ui.DxToastInterop.OptionChanged -= DxToast_OptionChanged;
		DevExpress.Ui.DxToastInterop.Initialized -= DxToast_Initialized;
	}
}
