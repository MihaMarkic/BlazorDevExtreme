
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxSliderBaseOptions>

<div id="@Id" @ref="dxTarget"></div>

@functions {
    ElementReference dxTarget;
    public DxSliderBase() : base("DxSliderBase") { }
    protected override DevExpress.Ui.DxSliderBaseOptions CreateOptions() {
        return new DevExpress.Ui.DxSliderBaseOptions {
            activeStateEnabled = activeStateEnabled,
            focusStateEnabled = focusStateEnabled,
            hoverStateEnabled = hoverStateEnabled,
            keyStep = keyStep,
            label = label,
            name = name,
            showRange = showRange,
            step = step,
            tooltip = tooltip,
            max = max,
            min = min,
            isValid = isValid,
            readOnly = readOnly,
            validationError = validationError,
            validationMessageMode = validationMessageMode,
            value = value,
            accessKey = accessKey,
            disabled = disabled,
            hint = hint,
            tabIndex = tabIndex,
            visible = visible,
            bindingOptions = bindingOptions,
            elementAttr = elementAttr,
            height = height,
            rtlEnabled = rtlEnabled,
            width = width,
            onValueChangedEnabled = onValueChangedEnabled,
            onContentReadyEnabled = onContentReadyEnabled,
            onDisposingEnabled = onDisposingEnabled,
            onOptionChangedEnabled = onOptionChangedEnabled,
            onInitializedEnabled = onInitializedEnabled,
        };
    }
    protected override Task Init(DevExpress.Ui.DxSliderBaseOptions options) {
        return DevExpress.Ui.DxSliderBaseInterop.Init(dxTarget, options);
    }
    bool? activeStateEnabled;
    [Parameter]
    bool? ActiveStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetActiveStateEnabled(dxTarget, value);
            } else {
                this.activeStateEnabled = value;
            }
        }
    }
    bool? focusStateEnabled;
    [Parameter]
    bool? FocusStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetFocusStateEnabled(dxTarget, value);
            } else {
                this.focusStateEnabled = value;
            }
        }
    }
    bool? hoverStateEnabled;
    [Parameter]
    bool? HoverStateEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetHoverStateEnabled(dxTarget, value);
            } else {
                this.hoverStateEnabled = value;
            }
        }
    }
    float? keyStep;
    [Parameter]
    float? KeyStep {
        get => isInitialized ? (float?)DevExpress.Ui.DxSliderBaseInterop.GetKeyStep(dxTarget).Result : keyStep;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetKeyStep(dxTarget, value);
            } else {
                this.keyStep = value;
            }
        }
    }
    object label;
    [Parameter]
    object Label {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetLabel(dxTarget).Result : label;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetLabel(dxTarget, value);
            } else {
                this.label = value;
            }
        }
    }
    string name;
    [Parameter]
    string Name {
        get => isInitialized ? (string)DevExpress.Ui.DxSliderBaseInterop.GetName(dxTarget).Result : name;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetName(dxTarget, value);
            } else {
                this.name = value;
            }
        }
    }
    bool? showRange;
    [Parameter]
    bool? ShowRange {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetShowRange(dxTarget).Result : showRange;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetShowRange(dxTarget, value);
            } else {
                this.showRange = value;
            }
        }
    }
    float? step;
    [Parameter]
    float? Step {
        get => isInitialized ? (float?)DevExpress.Ui.DxSliderBaseInterop.GetStep(dxTarget).Result : step;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetStep(dxTarget, value);
            } else {
                this.step = value;
            }
        }
    }
    object tooltip;
    [Parameter]
    object Tooltip {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetTooltip(dxTarget).Result : tooltip;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetTooltip(dxTarget, value);
            } else {
                this.tooltip = value;
            }
        }
    }
    float? max;
    [Parameter]
    float? Max {
        get => isInitialized ? (float?)DevExpress.Ui.DxSliderBaseInterop.GetMax(dxTarget).Result : max;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetMax(dxTarget, value);
            } else {
                this.max = value;
            }
        }
    }
    float? min;
    [Parameter]
    float? Min {
        get => isInitialized ? (float?)DevExpress.Ui.DxSliderBaseInterop.GetMin(dxTarget).Result : min;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetMin(dxTarget, value);
            } else {
                this.min = value;
            }
        }
    }
    bool? isValid;
    [Parameter]
    bool? IsValid {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetIsValid(dxTarget).Result : isValid;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetIsValid(dxTarget, value);
            } else {
                this.isValid = value;
            }
        }
    }
    bool? readOnly;
    [Parameter]
    bool? ReadOnly {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetReadOnly(dxTarget).Result : readOnly;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetReadOnly(dxTarget, value);
            } else {
                this.readOnly = value;
            }
        }
    }
    object validationError;
    [Parameter]
    object ValidationError {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetValidationError(dxTarget).Result : validationError;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetValidationError(dxTarget, value);
            } else {
                this.validationError = value;
            }
        }
    }
    string validationMessageMode;
    [Parameter]
    string ValidationMessageMode {
        get => isInitialized ? (string)DevExpress.Ui.DxSliderBaseInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetValidationMessageMode(dxTarget, value);
            } else {
                this.validationMessageMode = value;
            }
        }
    }
    object value;
    [Parameter]
    object Value {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetValue(dxTarget).Result : value;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetValue(dxTarget, value);
            } else {
                this.value = value;
            }
        }
    }
    string accessKey;
    [Parameter]
    string AccessKey {
        get => isInitialized ? (string)DevExpress.Ui.DxSliderBaseInterop.GetAccessKey(dxTarget).Result : accessKey;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetAccessKey(dxTarget, value);
            } else {
                this.accessKey = value;
            }
        }
    }
    bool? disabled;
    [Parameter]
    bool? Disabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetDisabled(dxTarget).Result : disabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetDisabled(dxTarget, value);
            } else {
                this.disabled = value;
            }
        }
    }
    string hint;
    [Parameter]
    string Hint {
        get => isInitialized ? (string)DevExpress.Ui.DxSliderBaseInterop.GetHint(dxTarget).Result : hint;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetHint(dxTarget, value);
            } else {
                this.hint = value;
            }
        }
    }
    float? tabIndex;
    [Parameter]
    float? TabIndex {
        get => isInitialized ? (float?)DevExpress.Ui.DxSliderBaseInterop.GetTabIndex(dxTarget).Result : tabIndex;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetTabIndex(dxTarget, value);
            } else {
                this.tabIndex = value;
            }
        }
    }
    bool? visible;
    [Parameter]
    bool? Visible {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetVisible(dxTarget).Result : visible;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetVisible(dxTarget, value);
            } else {
                this.visible = value;
            }
        }
    }
    object bindingOptions;
    [Parameter]
    object BindingOptions {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetBindingOptions(dxTarget).Result : bindingOptions;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetBindingOptions(dxTarget, value);
            } else {
                this.bindingOptions = value;
            }
        }
    }
    object elementAttr;
    [Parameter]
    object ElementAttr {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetElementAttr(dxTarget).Result : elementAttr;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetElementAttr(dxTarget, value);
            } else {
                this.elementAttr = value;
            }
        }
    }
    object height;
    [Parameter]
    object Height {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetHeight(dxTarget).Result : height;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetHeight(dxTarget, value);
            } else {
                this.height = value;
            }
        }
    }
    bool? rtlEnabled;
    [Parameter]
    bool? RtlEnabled {
        get => isInitialized ? (bool?)DevExpress.Ui.DxSliderBaseInterop.GetRtlEnabled(dxTarget).Result : rtlEnabled;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetRtlEnabled(dxTarget, value);
            } else {
                this.rtlEnabled = value;
            }
        }
    }
    object width;
    [Parameter]
    object Width {
        get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetWidth(dxTarget).Result : width;
        set {
            if (isInitialized) {
                DevExpress.Ui.DxSliderBaseInterop.SetWidth(dxTarget, value);
            } else {
                this.width = value;
            }
        }
    }
    bool? onValueChangedEnabled;
    [Parameter]
    bool? OnValueChangedEnabled {
        get => onValueChangedEnabled;
        set => this.onValueChangedEnabled = value;
    }
    bool? onContentReadyEnabled;
    [Parameter]
    bool? OnContentReadyEnabled {
        get => onContentReadyEnabled;
        set => this.onContentReadyEnabled = value;
    }
    bool? onDisposingEnabled;
    [Parameter]
    bool? OnDisposingEnabled {
        get => onDisposingEnabled;
        set => this.onDisposingEnabled = value;
    }
    bool? onOptionChangedEnabled;
    [Parameter]
    bool? OnOptionChangedEnabled {
        get => onOptionChangedEnabled;
        set => this.onOptionChangedEnabled = value;
    }
    bool? onInitializedEnabled;
    [Parameter]
    bool? OnInitializedEnabled {
        get => onInitializedEnabled;
        set => this.onInitializedEnabled = value;
    }
    protected override async Task OnInitAsync() {
        await base.OnInitAsync();
        //DevExpress.Ui.DxSliderBaseInterop.ValueChanged += DxSliderBase_ValueChanged;
        DevExpress.Ui.DxSliderBaseInterop.ContentReady += DxSliderBase_ContentReady;
        DevExpress.Ui.DxSliderBaseInterop.Disposing += DxSliderBase_Disposing;
        DevExpress.Ui.DxSliderBaseInterop.OptionChanged += DxSliderBase_OptionChanged;
        DevExpress.Ui.DxSliderBaseInterop.Initialized += DxSliderBase_Initialized;
    }
    [Parameter]
    Action ValueChanged { get; set; }
    void DxSliderBase_ValueChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ValueChanged?.Invoke();
        }
    }
    [Parameter]
    Action ContentReady { get; set; }
    void DxSliderBase_ContentReady(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            ContentReady?.Invoke();
        }
    }
    [Parameter]
    Action Disposing { get; set; }
    void DxSliderBase_Disposing(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Disposing?.Invoke();
        }
    }
    [Parameter]
    Action OptionChanged { get; set; }
    void DxSliderBase_OptionChanged(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            OptionChanged?.Invoke();
        }
    }
    [Parameter]
    Action Initialized { get; set; }
    void DxSliderBase_Initialized(object sender, JQueryEventArgs e) {
        if (e.Identifier == Id) {
            Initialized?.Invoke();
        }
    }
    public void Dispose() {
        //DevExpress.Ui.DxSliderBaseInterop.ValueChanged -= DxSliderBase_ValueChanged;
        DevExpress.Ui.DxSliderBaseInterop.ContentReady -= DxSliderBase_ContentReady;
        DevExpress.Ui.DxSliderBaseInterop.Disposing -= DxSliderBase_Disposing;
        DevExpress.Ui.DxSliderBaseInterop.OptionChanged -= DxSliderBase_OptionChanged;
        DevExpress.Ui.DxSliderBaseInterop.Initialized -= DxSliderBase_Initialized;
    }
}
