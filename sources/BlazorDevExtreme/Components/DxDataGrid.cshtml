@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDataGridOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDataGrid() : base("DxDataGrid") { }
	protected override DevExpress.Ui.DxDataGridOptions CreateOptions() {
		return new DevExpress.Ui.DxDataGridOptions {
			columns = columns,
			customizeColumns = customizeColumns,
			customizeExportData = customizeExportData,
			editing = editing,
			export = export,
			grouping = grouping,
			groupPanel = groupPanel,
			keyExpr = keyExpr,
			masterDetail = masterDetail,
			remoteOperations = remoteOperations,
			rowTemplate = rowTemplate,
			scrolling = scrolling,
			selection = selection,
			selectionFilter = selectionFilter,
			sortByGroupSummaryInfo = sortByGroupSummaryInfo,
			summary = summary,
			allowColumnReordering = allowColumnReordering,
			allowColumnResizing = allowColumnResizing,
			cacheEnabled = cacheEnabled,
			cellHintEnabled = cellHintEnabled,
			columnAutoWidth = columnAutoWidth,
			columnChooser = columnChooser,
			columnFixing = columnFixing,
			columnHidingEnabled = columnHidingEnabled,
			columnMinWidth = columnMinWidth,
			columnResizingMode = columnResizingMode,
			columnWidth = columnWidth,
			dataSource = dataSource,
			dateSerializationFormat = dateSerializationFormat,
			errorRowEnabled = errorRowEnabled,
			filterBuilder = filterBuilder,
			filterBuilderPopup = filterBuilderPopup,
			filterPanel = filterPanel,
			filterRow = filterRow,
			filterSyncEnabled = filterSyncEnabled,
			filterValue = filterValue,
			focusedColumnIndex = focusedColumnIndex,
			focusedRowEnabled = focusedRowEnabled,
			focusedRowIndex = focusedRowIndex,
			focusedRowKey = focusedRowKey,
			headerFilter = headerFilter,
			highlightChanges = highlightChanges,
			loadPanel = loadPanel,
			noDataText = noDataText,
			pager = pager,
			paging = paging,
			renderAsync = renderAsync,
			repaintChangesOnly = repaintChangesOnly,
			rowAlternationEnabled = rowAlternationEnabled,
			searchPanel = searchPanel,
			selectedRowKeys = selectedRowKeys,
			showBorders = showBorders,
			showColumnHeaders = showColumnHeaders,
			showColumnLines = showColumnLines,
			showRowLines = showRowLines,
			sorting = sorting,
			stateStoring = stateStoring,
			twoWayBindingEnabled = twoWayBindingEnabled,
			wordWrapEnabled = wordWrapEnabled,
			accessKey = accessKey,
			activeStateEnabled = activeStateEnabled,
			disabled = disabled,
			focusStateEnabled = focusStateEnabled,
			hint = hint,
			hoverStateEnabled = hoverStateEnabled,
			tabIndex = tabIndex,
			visible = visible,
			bindingOptions = bindingOptions,
			elementAttr = elementAttr,
			height = height,
			rtlEnabled = rtlEnabled,
			width = width,
			onCellClickEnabled = onCellClickEnabled,
			onCellHoverChangedEnabled = onCellHoverChangedEnabled,
			onCellPreparedEnabled = onCellPreparedEnabled,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
			onEditingStartEnabled = onEditingStartEnabled,
			onEditorPreparedEnabled = onEditorPreparedEnabled,
			onEditorPreparingEnabled = onEditorPreparingEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onFocusedCellChangedEnabled = onFocusedCellChangedEnabled,
			onFocusedCellChangingEnabled = onFocusedCellChangingEnabled,
			onFocusedRowChangedEnabled = onFocusedRowChangedEnabled,
			onFocusedRowChangingEnabled = onFocusedRowChangingEnabled,
			onRowClickEnabled = onRowClickEnabled,
			onRowPreparedEnabled = onRowPreparedEnabled,
			onAdaptiveDetailRowPreparingEnabled = onAdaptiveDetailRowPreparingEnabled,
			onDataErrorOccurredEnabled = onDataErrorOccurredEnabled,
			onInitNewRowEnabled = onInitNewRowEnabled,
			onKeyDownEnabled = onKeyDownEnabled,
			onRowCollapsedEnabled = onRowCollapsedEnabled,
			onRowCollapsingEnabled = onRowCollapsingEnabled,
			onRowExpandedEnabled = onRowExpandedEnabled,
			onRowExpandingEnabled = onRowExpandingEnabled,
			onRowInsertedEnabled = onRowInsertedEnabled,
			onRowInsertingEnabled = onRowInsertingEnabled,
			onRowRemovedEnabled = onRowRemovedEnabled,
			onRowRemovingEnabled = onRowRemovingEnabled,
			onRowUpdatedEnabled = onRowUpdatedEnabled,
			onRowUpdatingEnabled = onRowUpdatingEnabled,
			onRowValidatingEnabled = onRowValidatingEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onToolbarPreparingEnabled = onToolbarPreparingEnabled,
			onContentReadyEnabled = onContentReadyEnabled,
			onDisposingEnabled = onDisposingEnabled,
			onOptionChangedEnabled = onOptionChangedEnabled,
			onInitializedEnabled = onInitializedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxDataGridOptions options) {
		return DevExpress.Ui.DxDataGridInterop.Init(dxTarget, options);
	}
	object columns;
	[Parameter]
	object Columns {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetColumnsOption(dxTarget).Result : columns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnsOption(dxTarget, value);
			} else {
				this.columns = value;
			}
		}
	}
	object customizeColumns;
	[Parameter]
	object CustomizeColumns {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetCustomizeColumnsOption(dxTarget).Result : customizeColumns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCustomizeColumnsOption(dxTarget, value);
			} else {
				this.customizeColumns = value;
			}
		}
	}
	object customizeExportData;
	[Parameter]
	object CustomizeExportData {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetCustomizeExportDataOption(dxTarget).Result : customizeExportData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCustomizeExportDataOption(dxTarget, value);
			} else {
				this.customizeExportData = value;
			}
		}
	}
	object editing;
	[Parameter]
	object Editing {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetEditingOption(dxTarget).Result : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetEditingOption(dxTarget, value);
			} else {
				this.editing = value;
			}
		}
	}
	object export;
	[Parameter]
	object Export {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetExportOption(dxTarget).Result : export;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetExportOption(dxTarget, value);
			} else {
				this.export = value;
			}
		}
	}
	object grouping;
	[Parameter]
	object Grouping {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetGroupingOption(dxTarget).Result : grouping;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetGroupingOption(dxTarget, value);
			} else {
				this.grouping = value;
			}
		}
	}
	object groupPanel;
	[Parameter]
	object GroupPanel {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetGroupPanelOption(dxTarget).Result : groupPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetGroupPanelOption(dxTarget, value);
			} else {
				this.groupPanel = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetKeyExprOption(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetKeyExprOption(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object masterDetail;
	[Parameter]
	object MasterDetail {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetMasterDetailOption(dxTarget).Result : masterDetail;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetMasterDetailOption(dxTarget, value);
			} else {
				this.masterDetail = value;
			}
		}
	}
	object remoteOperations;
	[Parameter]
	object RemoteOperations {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetRemoteOperationsOption(dxTarget).Result : remoteOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRemoteOperationsOption(dxTarget, value);
			} else {
				this.remoteOperations = value;
			}
		}
	}
	object rowTemplate;
	[Parameter]
	object RowTemplate {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetRowTemplateOption(dxTarget).Result : rowTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRowTemplateOption(dxTarget, value);
			} else {
				this.rowTemplate = value;
			}
		}
	}
	object scrolling;
	[Parameter]
	object Scrolling {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetScrollingOption(dxTarget).Result : scrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetScrollingOption(dxTarget, value);
			} else {
				this.scrolling = value;
			}
		}
	}
	object selection;
	[Parameter]
	object Selection {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSelectionOption(dxTarget).Result : selection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSelectionOption(dxTarget, value);
			} else {
				this.selection = value;
			}
		}
	}
	object selectionFilter;
	[Parameter]
	object SelectionFilter {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSelectionFilterOption(dxTarget).Result : selectionFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSelectionFilterOption(dxTarget, value);
			} else {
				this.selectionFilter = value;
			}
		}
	}
	object sortByGroupSummaryInfo;
	[Parameter]
	object SortByGroupSummaryInfo {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSortByGroupSummaryInfoOption(dxTarget).Result : sortByGroupSummaryInfo;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSortByGroupSummaryInfoOption(dxTarget, value);
			} else {
				this.sortByGroupSummaryInfo = value;
			}
		}
	}
	object summary;
	[Parameter]
	object Summary {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSummaryOption(dxTarget).Result : summary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSummaryOption(dxTarget, value);
			} else {
				this.summary = value;
			}
		}
	}
	bool? allowColumnReordering;
	[Parameter]
	bool? AllowColumnReordering {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetAllowColumnReorderingOption(dxTarget).Result : allowColumnReordering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetAllowColumnReorderingOption(dxTarget, value);
			} else {
				this.allowColumnReordering = value;
			}
		}
	}
	bool? allowColumnResizing;
	[Parameter]
	bool? AllowColumnResizing {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetAllowColumnResizingOption(dxTarget).Result : allowColumnResizing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetAllowColumnResizingOption(dxTarget, value);
			} else {
				this.allowColumnResizing = value;
			}
		}
	}
	bool? cacheEnabled;
	[Parameter]
	bool? CacheEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetCacheEnabledOption(dxTarget).Result : cacheEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCacheEnabledOption(dxTarget, value);
			} else {
				this.cacheEnabled = value;
			}
		}
	}
	bool? cellHintEnabled;
	[Parameter]
	bool? CellHintEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetCellHintEnabledOption(dxTarget).Result : cellHintEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCellHintEnabledOption(dxTarget, value);
			} else {
				this.cellHintEnabled = value;
			}
		}
	}
	bool? columnAutoWidth;
	[Parameter]
	bool? ColumnAutoWidth {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetColumnAutoWidthOption(dxTarget).Result : columnAutoWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnAutoWidthOption(dxTarget, value);
			} else {
				this.columnAutoWidth = value;
			}
		}
	}
	object columnChooser;
	[Parameter]
	object ColumnChooser {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetColumnChooserOption(dxTarget).Result : columnChooser;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnChooserOption(dxTarget, value);
			} else {
				this.columnChooser = value;
			}
		}
	}
	object columnFixing;
	[Parameter]
	object ColumnFixing {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetColumnFixingOption(dxTarget).Result : columnFixing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnFixingOption(dxTarget, value);
			} else {
				this.columnFixing = value;
			}
		}
	}
	bool? columnHidingEnabled;
	[Parameter]
	bool? ColumnHidingEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetColumnHidingEnabledOption(dxTarget).Result : columnHidingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnHidingEnabledOption(dxTarget, value);
			} else {
				this.columnHidingEnabled = value;
			}
		}
	}
	float? columnMinWidth;
	[Parameter]
	float? ColumnMinWidth {
		get => isInitialized ? (float?)DevExpress.Ui.DxDataGridInterop.GetColumnMinWidthOption(dxTarget).Result : columnMinWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnMinWidthOption(dxTarget, value);
			} else {
				this.columnMinWidth = value;
			}
		}
	}
	string columnResizingMode;
	[Parameter]
	string ColumnResizingMode {
		get => isInitialized ? (string)DevExpress.Ui.DxDataGridInterop.GetColumnResizingModeOption(dxTarget).Result : columnResizingMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnResizingModeOption(dxTarget, value);
			} else {
				this.columnResizingMode = value;
			}
		}
	}
	float? columnWidth;
	[Parameter]
	float? ColumnWidth {
		get => isInitialized ? (float?)DevExpress.Ui.DxDataGridInterop.GetColumnWidthOption(dxTarget).Result : columnWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumnWidthOption(dxTarget, value);
			} else {
				this.columnWidth = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetDataSourceOption(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetDataSourceOption(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? (string)DevExpress.Ui.DxDataGridInterop.GetDateSerializationFormatOption(dxTarget).Result : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetDateSerializationFormatOption(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	bool? errorRowEnabled;
	[Parameter]
	bool? ErrorRowEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetErrorRowEnabledOption(dxTarget).Result : errorRowEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetErrorRowEnabledOption(dxTarget, value);
			} else {
				this.errorRowEnabled = value;
			}
		}
	}
	object filterBuilder;
	[Parameter]
	object FilterBuilder {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterBuilderOption(dxTarget).Result : filterBuilder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterBuilderOption(dxTarget, value);
			} else {
				this.filterBuilder = value;
			}
		}
	}
	object filterBuilderPopup;
	[Parameter]
	object FilterBuilderPopup {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterBuilderPopupOption(dxTarget).Result : filterBuilderPopup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterBuilderPopupOption(dxTarget, value);
			} else {
				this.filterBuilderPopup = value;
			}
		}
	}
	object filterPanel;
	[Parameter]
	object FilterPanel {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterPanelOption(dxTarget).Result : filterPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterPanelOption(dxTarget, value);
			} else {
				this.filterPanel = value;
			}
		}
	}
	object filterRow;
	[Parameter]
	object FilterRow {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterRowOption(dxTarget).Result : filterRow;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterRowOption(dxTarget, value);
			} else {
				this.filterRow = value;
			}
		}
	}
	object filterSyncEnabled;
	[Parameter]
	object FilterSyncEnabled {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterSyncEnabledOption(dxTarget).Result : filterSyncEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterSyncEnabledOption(dxTarget, value);
			} else {
				this.filterSyncEnabled = value;
			}
		}
	}
	object filterValue;
	[Parameter]
	object FilterValue {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFilterValueOption(dxTarget).Result : filterValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFilterValueOption(dxTarget, value);
			} else {
				this.filterValue = value;
			}
		}
	}
	float? focusedColumnIndex;
	[Parameter]
	float? FocusedColumnIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDataGridInterop.GetFocusedColumnIndexOption(dxTarget).Result : focusedColumnIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFocusedColumnIndexOption(dxTarget, value);
			} else {
				this.focusedColumnIndex = value;
			}
		}
	}
	bool? focusedRowEnabled;
	[Parameter]
	bool? FocusedRowEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetFocusedRowEnabledOption(dxTarget).Result : focusedRowEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFocusedRowEnabledOption(dxTarget, value);
			} else {
				this.focusedRowEnabled = value;
			}
		}
	}
	float? focusedRowIndex;
	[Parameter]
	float? FocusedRowIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDataGridInterop.GetFocusedRowIndexOption(dxTarget).Result : focusedRowIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFocusedRowIndexOption(dxTarget, value);
			} else {
				this.focusedRowIndex = value;
			}
		}
	}
	object focusedRowKey;
	[Parameter]
	object FocusedRowKey {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetFocusedRowKeyOption(dxTarget).Result : focusedRowKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFocusedRowKeyOption(dxTarget, value);
			} else {
				this.focusedRowKey = value;
			}
		}
	}
	object headerFilter;
	[Parameter]
	object HeaderFilter {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetHeaderFilterOption(dxTarget).Result : headerFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetHeaderFilterOption(dxTarget, value);
			} else {
				this.headerFilter = value;
			}
		}
	}
	bool? highlightChanges;
	[Parameter]
	bool? HighlightChanges {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetHighlightChangesOption(dxTarget).Result : highlightChanges;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetHighlightChangesOption(dxTarget, value);
			} else {
				this.highlightChanges = value;
			}
		}
	}
	object loadPanel;
	[Parameter]
	object LoadPanel {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetLoadPanelOption(dxTarget).Result : loadPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetLoadPanelOption(dxTarget, value);
			} else {
				this.loadPanel = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? (string)DevExpress.Ui.DxDataGridInterop.GetNoDataTextOption(dxTarget).Result : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetNoDataTextOption(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	object pager;
	[Parameter]
	object Pager {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetPagerOption(dxTarget).Result : pager;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetPagerOption(dxTarget, value);
			} else {
				this.pager = value;
			}
		}
	}
	object paging;
	[Parameter]
	object Paging {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetPagingOption(dxTarget).Result : paging;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetPagingOption(dxTarget, value);
			} else {
				this.paging = value;
			}
		}
	}
	bool? renderAsync;
	[Parameter]
	bool? RenderAsync {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetRenderAsyncOption(dxTarget).Result : renderAsync;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRenderAsyncOption(dxTarget, value);
			} else {
				this.renderAsync = value;
			}
		}
	}
	bool? repaintChangesOnly;
	[Parameter]
	bool? RepaintChangesOnly {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetRepaintChangesOnlyOption(dxTarget).Result : repaintChangesOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRepaintChangesOnlyOption(dxTarget, value);
			} else {
				this.repaintChangesOnly = value;
			}
		}
	}
	bool? rowAlternationEnabled;
	[Parameter]
	bool? RowAlternationEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetRowAlternationEnabledOption(dxTarget).Result : rowAlternationEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRowAlternationEnabledOption(dxTarget, value);
			} else {
				this.rowAlternationEnabled = value;
			}
		}
	}
	object searchPanel;
	[Parameter]
	object SearchPanel {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSearchPanelOption(dxTarget).Result : searchPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSearchPanelOption(dxTarget, value);
			} else {
				this.searchPanel = value;
			}
		}
	}
	object selectedRowKeys;
	[Parameter]
	object SelectedRowKeys {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSelectedRowKeysOption(dxTarget).Result : selectedRowKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSelectedRowKeysOption(dxTarget, value);
			} else {
				this.selectedRowKeys = value;
			}
		}
	}
	bool? showBorders;
	[Parameter]
	bool? ShowBorders {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetShowBordersOption(dxTarget).Result : showBorders;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetShowBordersOption(dxTarget, value);
			} else {
				this.showBorders = value;
			}
		}
	}
	bool? showColumnHeaders;
	[Parameter]
	bool? ShowColumnHeaders {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetShowColumnHeadersOption(dxTarget).Result : showColumnHeaders;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetShowColumnHeadersOption(dxTarget, value);
			} else {
				this.showColumnHeaders = value;
			}
		}
	}
	bool? showColumnLines;
	[Parameter]
	bool? ShowColumnLines {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetShowColumnLinesOption(dxTarget).Result : showColumnLines;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetShowColumnLinesOption(dxTarget, value);
			} else {
				this.showColumnLines = value;
			}
		}
	}
	bool? showRowLines;
	[Parameter]
	bool? ShowRowLines {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetShowRowLinesOption(dxTarget).Result : showRowLines;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetShowRowLinesOption(dxTarget, value);
			} else {
				this.showRowLines = value;
			}
		}
	}
	object sorting;
	[Parameter]
	object Sorting {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSortingOption(dxTarget).Result : sorting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSortingOption(dxTarget, value);
			} else {
				this.sorting = value;
			}
		}
	}
	object stateStoring;
	[Parameter]
	object StateStoring {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetStateStoringOption(dxTarget).Result : stateStoring;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetStateStoringOption(dxTarget, value);
			} else {
				this.stateStoring = value;
			}
		}
	}
	bool? twoWayBindingEnabled;
	[Parameter]
	bool? TwoWayBindingEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetTwoWayBindingEnabledOption(dxTarget).Result : twoWayBindingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetTwoWayBindingEnabledOption(dxTarget, value);
			} else {
				this.twoWayBindingEnabled = value;
			}
		}
	}
	bool? wordWrapEnabled;
	[Parameter]
	bool? WordWrapEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetWordWrapEnabledOption(dxTarget).Result : wordWrapEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetWordWrapEnabledOption(dxTarget, value);
			} else {
				this.wordWrapEnabled = value;
			}
		}
	}
	string accessKey;
	[Parameter]
	string AccessKey {
		get => isInitialized ? (string)DevExpress.Ui.DxDataGridInterop.GetAccessKeyOption(dxTarget).Result : accessKey;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetAccessKeyOption(dxTarget, value);
			} else {
				this.accessKey = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetActiveStateEnabledOption(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetActiveStateEnabledOption(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetDisabledOption(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetDisabledOption(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetFocusStateEnabledOption(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetFocusStateEnabledOption(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	string hint;
	[Parameter]
	string Hint {
		get => isInitialized ? (string)DevExpress.Ui.DxDataGridInterop.GetHintOption(dxTarget).Result : hint;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetHintOption(dxTarget, value);
			} else {
				this.hint = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetHoverStateEnabledOption(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetHoverStateEnabledOption(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? tabIndex;
	[Parameter]
	float? TabIndex {
		get => isInitialized ? (float?)DevExpress.Ui.DxDataGridInterop.GetTabIndexOption(dxTarget).Result : tabIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetTabIndexOption(dxTarget, value);
			} else {
				this.tabIndex = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetVisibleOption(dxTarget).Result : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetVisibleOption(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object bindingOptions;
	[Parameter]
	object BindingOptions {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetBindingOptionsOption(dxTarget).Result : bindingOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetBindingOptionsOption(dxTarget, value);
			} else {
				this.bindingOptions = value;
			}
		}
	}
	object elementAttr;
	[Parameter]
	object ElementAttr {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetElementAttrOption(dxTarget).Result : elementAttr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetElementAttrOption(dxTarget, value);
			} else {
				this.elementAttr = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetHeightOption(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetHeightOption(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? rtlEnabled;
	[Parameter]
	bool? RtlEnabled {
		get => isInitialized ? (bool?)DevExpress.Ui.DxDataGridInterop.GetRtlEnabledOption(dxTarget).Result : rtlEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRtlEnabledOption(dxTarget, value);
			} else {
				this.rtlEnabled = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetWidthOption(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetWidthOption(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onCellClickEnabled;
	[Parameter]
	bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellHoverChangedEnabled;
	[Parameter]
	bool? OnCellHoverChangedEnabled {
		get => onCellHoverChangedEnabled;
		set => this.onCellHoverChangedEnabled = value;
	}
	bool? onCellPreparedEnabled;
	[Parameter]
	bool? OnCellPreparedEnabled {
		get => onCellPreparedEnabled;
		set => this.onCellPreparedEnabled = value;
	}
	bool? onContextMenuPreparingEnabled;
	[Parameter]
	bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	bool? onEditingStartEnabled;
	[Parameter]
	bool? OnEditingStartEnabled {
		get => onEditingStartEnabled;
		set => this.onEditingStartEnabled = value;
	}
	bool? onEditorPreparedEnabled;
	[Parameter]
	bool? OnEditorPreparedEnabled {
		get => onEditorPreparedEnabled;
		set => this.onEditorPreparedEnabled = value;
	}
	bool? onEditorPreparingEnabled;
	[Parameter]
	bool? OnEditorPreparingEnabled {
		get => onEditorPreparingEnabled;
		set => this.onEditorPreparingEnabled = value;
	}
	bool? onExportedEnabled;
	[Parameter]
	bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	[Parameter]
	bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	[Parameter]
	bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onFocusedCellChangedEnabled;
	[Parameter]
	bool? OnFocusedCellChangedEnabled {
		get => onFocusedCellChangedEnabled;
		set => this.onFocusedCellChangedEnabled = value;
	}
	bool? onFocusedCellChangingEnabled;
	[Parameter]
	bool? OnFocusedCellChangingEnabled {
		get => onFocusedCellChangingEnabled;
		set => this.onFocusedCellChangingEnabled = value;
	}
	bool? onFocusedRowChangedEnabled;
	[Parameter]
	bool? OnFocusedRowChangedEnabled {
		get => onFocusedRowChangedEnabled;
		set => this.onFocusedRowChangedEnabled = value;
	}
	bool? onFocusedRowChangingEnabled;
	[Parameter]
	bool? OnFocusedRowChangingEnabled {
		get => onFocusedRowChangingEnabled;
		set => this.onFocusedRowChangingEnabled = value;
	}
	bool? onRowClickEnabled;
	[Parameter]
	bool? OnRowClickEnabled {
		get => onRowClickEnabled;
		set => this.onRowClickEnabled = value;
	}
	bool? onRowPreparedEnabled;
	[Parameter]
	bool? OnRowPreparedEnabled {
		get => onRowPreparedEnabled;
		set => this.onRowPreparedEnabled = value;
	}
	bool? onAdaptiveDetailRowPreparingEnabled;
	[Parameter]
	bool? OnAdaptiveDetailRowPreparingEnabled {
		get => onAdaptiveDetailRowPreparingEnabled;
		set => this.onAdaptiveDetailRowPreparingEnabled = value;
	}
	bool? onDataErrorOccurredEnabled;
	[Parameter]
	bool? OnDataErrorOccurredEnabled {
		get => onDataErrorOccurredEnabled;
		set => this.onDataErrorOccurredEnabled = value;
	}
	bool? onInitNewRowEnabled;
	[Parameter]
	bool? OnInitNewRowEnabled {
		get => onInitNewRowEnabled;
		set => this.onInitNewRowEnabled = value;
	}
	bool? onKeyDownEnabled;
	[Parameter]
	bool? OnKeyDownEnabled {
		get => onKeyDownEnabled;
		set => this.onKeyDownEnabled = value;
	}
	bool? onRowCollapsedEnabled;
	[Parameter]
	bool? OnRowCollapsedEnabled {
		get => onRowCollapsedEnabled;
		set => this.onRowCollapsedEnabled = value;
	}
	bool? onRowCollapsingEnabled;
	[Parameter]
	bool? OnRowCollapsingEnabled {
		get => onRowCollapsingEnabled;
		set => this.onRowCollapsingEnabled = value;
	}
	bool? onRowExpandedEnabled;
	[Parameter]
	bool? OnRowExpandedEnabled {
		get => onRowExpandedEnabled;
		set => this.onRowExpandedEnabled = value;
	}
	bool? onRowExpandingEnabled;
	[Parameter]
	bool? OnRowExpandingEnabled {
		get => onRowExpandingEnabled;
		set => this.onRowExpandingEnabled = value;
	}
	bool? onRowInsertedEnabled;
	[Parameter]
	bool? OnRowInsertedEnabled {
		get => onRowInsertedEnabled;
		set => this.onRowInsertedEnabled = value;
	}
	bool? onRowInsertingEnabled;
	[Parameter]
	bool? OnRowInsertingEnabled {
		get => onRowInsertingEnabled;
		set => this.onRowInsertingEnabled = value;
	}
	bool? onRowRemovedEnabled;
	[Parameter]
	bool? OnRowRemovedEnabled {
		get => onRowRemovedEnabled;
		set => this.onRowRemovedEnabled = value;
	}
	bool? onRowRemovingEnabled;
	[Parameter]
	bool? OnRowRemovingEnabled {
		get => onRowRemovingEnabled;
		set => this.onRowRemovingEnabled = value;
	}
	bool? onRowUpdatedEnabled;
	[Parameter]
	bool? OnRowUpdatedEnabled {
		get => onRowUpdatedEnabled;
		set => this.onRowUpdatedEnabled = value;
	}
	bool? onRowUpdatingEnabled;
	[Parameter]
	bool? OnRowUpdatingEnabled {
		get => onRowUpdatingEnabled;
		set => this.onRowUpdatingEnabled = value;
	}
	bool? onRowValidatingEnabled;
	[Parameter]
	bool? OnRowValidatingEnabled {
		get => onRowValidatingEnabled;
		set => this.onRowValidatingEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onToolbarPreparingEnabled;
	[Parameter]
	bool? OnToolbarPreparingEnabled {
		get => onToolbarPreparingEnabled;
		set => this.onToolbarPreparingEnabled = value;
	}
	bool? onContentReadyEnabled;
	[Parameter]
	bool? OnContentReadyEnabled {
		get => onContentReadyEnabled;
		set => this.onContentReadyEnabled = value;
	}
	bool? onDisposingEnabled;
	[Parameter]
	bool? OnDisposingEnabled {
		get => onDisposingEnabled;
		set => this.onDisposingEnabled = value;
	}
	bool? onOptionChangedEnabled;
	[Parameter]
	bool? OnOptionChangedEnabled {
		get => onOptionChangedEnabled;
		set => this.onOptionChangedEnabled = value;
	}
	bool? onInitializedEnabled;
	[Parameter]
	bool? OnInitializedEnabled {
		get => onInitializedEnabled;
		set => this.onInitializedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDataGridInterop.CellClick += DxDataGrid_CellClick;
		DevExpress.Ui.DxDataGridInterop.CellHoverChanged += DxDataGrid_CellHoverChanged;
		DevExpress.Ui.DxDataGridInterop.CellPrepared += DxDataGrid_CellPrepared;
		DevExpress.Ui.DxDataGridInterop.ContextMenuPreparing += DxDataGrid_ContextMenuPreparing;
		DevExpress.Ui.DxDataGridInterop.EditingStart += DxDataGrid_EditingStart;
		DevExpress.Ui.DxDataGridInterop.EditorPrepared += DxDataGrid_EditorPrepared;
		DevExpress.Ui.DxDataGridInterop.EditorPreparing += DxDataGrid_EditorPreparing;
		DevExpress.Ui.DxDataGridInterop.Exported += DxDataGrid_Exported;
		DevExpress.Ui.DxDataGridInterop.Exporting += DxDataGrid_Exporting;
		DevExpress.Ui.DxDataGridInterop.FileSaving += DxDataGrid_FileSaving;
		DevExpress.Ui.DxDataGridInterop.FocusedCellChanged += DxDataGrid_FocusedCellChanged;
		DevExpress.Ui.DxDataGridInterop.FocusedCellChanging += DxDataGrid_FocusedCellChanging;
		DevExpress.Ui.DxDataGridInterop.FocusedRowChanged += DxDataGrid_FocusedRowChanged;
		DevExpress.Ui.DxDataGridInterop.FocusedRowChanging += DxDataGrid_FocusedRowChanging;
		DevExpress.Ui.DxDataGridInterop.RowClick += DxDataGrid_RowClick;
		DevExpress.Ui.DxDataGridInterop.RowPrepared += DxDataGrid_RowPrepared;
		DevExpress.Ui.DxDataGridInterop.AdaptiveDetailRowPreparing += DxDataGrid_AdaptiveDetailRowPreparing;
		DevExpress.Ui.DxDataGridInterop.DataErrorOccurred += DxDataGrid_DataErrorOccurred;
		DevExpress.Ui.DxDataGridInterop.InitNewRow += DxDataGrid_InitNewRow;
		DevExpress.Ui.DxDataGridInterop.KeyDown += DxDataGrid_KeyDown;
		DevExpress.Ui.DxDataGridInterop.RowCollapsed += DxDataGrid_RowCollapsed;
		DevExpress.Ui.DxDataGridInterop.RowCollapsing += DxDataGrid_RowCollapsing;
		DevExpress.Ui.DxDataGridInterop.RowExpanded += DxDataGrid_RowExpanded;
		DevExpress.Ui.DxDataGridInterop.RowExpanding += DxDataGrid_RowExpanding;
		DevExpress.Ui.DxDataGridInterop.RowInserted += DxDataGrid_RowInserted;
		DevExpress.Ui.DxDataGridInterop.RowInserting += DxDataGrid_RowInserting;
		DevExpress.Ui.DxDataGridInterop.RowRemoved += DxDataGrid_RowRemoved;
		DevExpress.Ui.DxDataGridInterop.RowRemoving += DxDataGrid_RowRemoving;
		DevExpress.Ui.DxDataGridInterop.RowUpdated += DxDataGrid_RowUpdated;
		DevExpress.Ui.DxDataGridInterop.RowUpdating += DxDataGrid_RowUpdating;
		DevExpress.Ui.DxDataGridInterop.RowValidating += DxDataGrid_RowValidating;
		DevExpress.Ui.DxDataGridInterop.SelectionChanged += DxDataGrid_SelectionChanged;
		DevExpress.Ui.DxDataGridInterop.ToolbarPreparing += DxDataGrid_ToolbarPreparing;
		DevExpress.Ui.DxDataGridInterop.ContentReady += DxDataGrid_ContentReady;
		DevExpress.Ui.DxDataGridInterop.Disposing += DxDataGrid_Disposing;
		DevExpress.Ui.DxDataGridInterop.OptionChanged += DxDataGrid_OptionChanged;
		DevExpress.Ui.DxDataGridInterop.Initialized += DxDataGrid_Initialized;
	}
	[Parameter]
	Action CellClick { get; set; }
	void DxDataGrid_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	[Parameter]
	Action CellHoverChanged { get; set; }
	void DxDataGrid_CellHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action CellPrepared { get; set; }
	void DxDataGrid_CellPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellPrepared?.Invoke();
		}
	}
	[Parameter]
	Action ContextMenuPreparing { get; set; }
	void DxDataGrid_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	[Parameter]
	Action EditingStart { get; set; }
	void DxDataGrid_EditingStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditingStart?.Invoke();
		}
	}
	[Parameter]
	Action EditorPrepared { get; set; }
	void DxDataGrid_EditorPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPrepared?.Invoke();
		}
	}
	[Parameter]
	Action EditorPreparing { get; set; }
	void DxDataGrid_EditorPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPreparing?.Invoke();
		}
	}
	[Parameter]
	Action Exported { get; set; }
	void DxDataGrid_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	[Parameter]
	Action Exporting { get; set; }
	void DxDataGrid_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	[Parameter]
	Action FileSaving { get; set; }
	void DxDataGrid_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	[Parameter]
	Action FocusedCellChanged { get; set; }
	void DxDataGrid_FocusedCellChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusedCellChanged?.Invoke();
		}
	}
	[Parameter]
	Action FocusedCellChanging { get; set; }
	void DxDataGrid_FocusedCellChanging(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusedCellChanging?.Invoke();
		}
	}
	[Parameter]
	Action FocusedRowChanged { get; set; }
	void DxDataGrid_FocusedRowChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusedRowChanged?.Invoke();
		}
	}
	[Parameter]
	Action FocusedRowChanging { get; set; }
	void DxDataGrid_FocusedRowChanging(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FocusedRowChanging?.Invoke();
		}
	}
	[Parameter]
	Action RowClick { get; set; }
	void DxDataGrid_RowClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowClick?.Invoke();
		}
	}
	[Parameter]
	Action RowPrepared { get; set; }
	void DxDataGrid_RowPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowPrepared?.Invoke();
		}
	}
	[Parameter]
	Action AdaptiveDetailRowPreparing { get; set; }
	void DxDataGrid_AdaptiveDetailRowPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AdaptiveDetailRowPreparing?.Invoke();
		}
	}
	[Parameter]
	Action DataErrorOccurred { get; set; }
	void DxDataGrid_DataErrorOccurred(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			DataErrorOccurred?.Invoke();
		}
	}
	[Parameter]
	Action InitNewRow { get; set; }
	void DxDataGrid_InitNewRow(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			InitNewRow?.Invoke();
		}
	}
	[Parameter]
	Action KeyDown { get; set; }
	void DxDataGrid_KeyDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			KeyDown?.Invoke();
		}
	}
	[Parameter]
	Action RowCollapsed { get; set; }
	void DxDataGrid_RowCollapsed(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowCollapsed?.Invoke();
		}
	}
	[Parameter]
	Action RowCollapsing { get; set; }
	void DxDataGrid_RowCollapsing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowCollapsing?.Invoke();
		}
	}
	[Parameter]
	Action RowExpanded { get; set; }
	void DxDataGrid_RowExpanded(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowExpanded?.Invoke();
		}
	}
	[Parameter]
	Action RowExpanding { get; set; }
	void DxDataGrid_RowExpanding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowExpanding?.Invoke();
		}
	}
	[Parameter]
	Action RowInserted { get; set; }
	void DxDataGrid_RowInserted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowInserted?.Invoke();
		}
	}
	[Parameter]
	Action RowInserting { get; set; }
	void DxDataGrid_RowInserting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowInserting?.Invoke();
		}
	}
	[Parameter]
	Action RowRemoved { get; set; }
	void DxDataGrid_RowRemoved(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowRemoved?.Invoke();
		}
	}
	[Parameter]
	Action RowRemoving { get; set; }
	void DxDataGrid_RowRemoving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowRemoving?.Invoke();
		}
	}
	[Parameter]
	Action RowUpdated { get; set; }
	void DxDataGrid_RowUpdated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowUpdated?.Invoke();
		}
	}
	[Parameter]
	Action RowUpdating { get; set; }
	void DxDataGrid_RowUpdating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowUpdating?.Invoke();
		}
	}
	[Parameter]
	Action RowValidating { get; set; }
	void DxDataGrid_RowValidating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowValidating?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxDataGrid_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ToolbarPreparing { get; set; }
	void DxDataGrid_ToolbarPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ToolbarPreparing?.Invoke();
		}
	}
	[Parameter]
	Action ContentReady { get; set; }
	void DxDataGrid_ContentReady(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContentReady?.Invoke();
		}
	}
	[Parameter]
	Action Disposing { get; set; }
	void DxDataGrid_Disposing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Disposing?.Invoke();
		}
	}
	[Parameter]
	Action OptionChanged { get; set; }
	void DxDataGrid_OptionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			OptionChanged?.Invoke();
		}
	}
	[Parameter]
	Action Initialized { get; set; }
	void DxDataGrid_Initialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Initialized?.Invoke();
		}
	}
	public void AddColumn(object columnOptions) {
		DevExpress.Ui.DxDataGridInterop.AddColumn(dxTarget, columnOptions);
	}
	public void AddRow() {
		DevExpress.Ui.DxDataGridInterop.AddRow(dxTarget);
	}
	public void ClearGrouping() {
		DevExpress.Ui.DxDataGridInterop.ClearGrouping(dxTarget);
	}
	public void CollapseAll(float groupIndex) {
		DevExpress.Ui.DxDataGridInterop.CollapseAll(dxTarget, groupIndex);
	}
	public object CollapseRow(object key) {
		return DevExpress.Ui.DxDataGridInterop.CollapseRow(dxTarget, key).Result;
	}
	public void ExpandAll(float groupIndex) {
		DevExpress.Ui.DxDataGridInterop.ExpandAll(dxTarget, groupIndex);
	}
	public object ExpandRow(object key) {
		return DevExpress.Ui.DxDataGridInterop.ExpandRow(dxTarget, key).Result;
	}
	public void ExportToExcel(bool selectionOnly) {
		DevExpress.Ui.DxDataGridInterop.ExportToExcel(dxTarget, selectionOnly);
	}
	public object GetSelectedRowKeys() {
		return DevExpress.Ui.DxDataGridInterop.GetSelectedRowKeys(dxTarget).Result;
	}
	public object GetSelectedRowsData() {
		return DevExpress.Ui.DxDataGridInterop.GetSelectedRowsData(dxTarget).Result;
	}
	public object GetTotalSummaryValue(string summaryItemName) {
		return DevExpress.Ui.DxDataGridInterop.GetTotalSummaryValue(dxTarget, summaryItemName).Result;
	}
	public object GetVisibleColumns() {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleColumns(dxTarget).Result;
	}
	public object GetVisibleColumns(float headerLevel) {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleColumns(dxTarget, headerLevel).Result;
	}
	public object GetVisibleRows() {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleRows(dxTarget).Result;
	}
	public void InsertRow() {
		DevExpress.Ui.DxDataGridInterop.InsertRow(dxTarget);
	}
	public bool IsRowExpanded(object key) {
		return DevExpress.Ui.DxDataGridInterop.IsRowExpanded(dxTarget, key).Result;
	}
	public bool IsRowSelected(object data) {
		return DevExpress.Ui.DxDataGridInterop.IsRowSelected(dxTarget, data).Result;
	}
	public void RemoveRow(float rowIndex) {
		DevExpress.Ui.DxDataGridInterop.RemoveRow(dxTarget, rowIndex);
	}
	public float TotalCount() {
		return DevExpress.Ui.DxDataGridInterop.TotalCount(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxDataGridInterop.CellClick -= DxDataGrid_CellClick;
		DevExpress.Ui.DxDataGridInterop.CellHoverChanged -= DxDataGrid_CellHoverChanged;
		DevExpress.Ui.DxDataGridInterop.CellPrepared -= DxDataGrid_CellPrepared;
		DevExpress.Ui.DxDataGridInterop.ContextMenuPreparing -= DxDataGrid_ContextMenuPreparing;
		DevExpress.Ui.DxDataGridInterop.EditingStart -= DxDataGrid_EditingStart;
		DevExpress.Ui.DxDataGridInterop.EditorPrepared -= DxDataGrid_EditorPrepared;
		DevExpress.Ui.DxDataGridInterop.EditorPreparing -= DxDataGrid_EditorPreparing;
		DevExpress.Ui.DxDataGridInterop.Exported -= DxDataGrid_Exported;
		DevExpress.Ui.DxDataGridInterop.Exporting -= DxDataGrid_Exporting;
		DevExpress.Ui.DxDataGridInterop.FileSaving -= DxDataGrid_FileSaving;
		DevExpress.Ui.DxDataGridInterop.FocusedCellChanged -= DxDataGrid_FocusedCellChanged;
		DevExpress.Ui.DxDataGridInterop.FocusedCellChanging -= DxDataGrid_FocusedCellChanging;
		DevExpress.Ui.DxDataGridInterop.FocusedRowChanged -= DxDataGrid_FocusedRowChanged;
		DevExpress.Ui.DxDataGridInterop.FocusedRowChanging -= DxDataGrid_FocusedRowChanging;
		DevExpress.Ui.DxDataGridInterop.RowClick -= DxDataGrid_RowClick;
		DevExpress.Ui.DxDataGridInterop.RowPrepared -= DxDataGrid_RowPrepared;
		DevExpress.Ui.DxDataGridInterop.AdaptiveDetailRowPreparing -= DxDataGrid_AdaptiveDetailRowPreparing;
		DevExpress.Ui.DxDataGridInterop.DataErrorOccurred -= DxDataGrid_DataErrorOccurred;
		DevExpress.Ui.DxDataGridInterop.InitNewRow -= DxDataGrid_InitNewRow;
		DevExpress.Ui.DxDataGridInterop.KeyDown -= DxDataGrid_KeyDown;
		DevExpress.Ui.DxDataGridInterop.RowCollapsed -= DxDataGrid_RowCollapsed;
		DevExpress.Ui.DxDataGridInterop.RowCollapsing -= DxDataGrid_RowCollapsing;
		DevExpress.Ui.DxDataGridInterop.RowExpanded -= DxDataGrid_RowExpanded;
		DevExpress.Ui.DxDataGridInterop.RowExpanding -= DxDataGrid_RowExpanding;
		DevExpress.Ui.DxDataGridInterop.RowInserted -= DxDataGrid_RowInserted;
		DevExpress.Ui.DxDataGridInterop.RowInserting -= DxDataGrid_RowInserting;
		DevExpress.Ui.DxDataGridInterop.RowRemoved -= DxDataGrid_RowRemoved;
		DevExpress.Ui.DxDataGridInterop.RowRemoving -= DxDataGrid_RowRemoving;
		DevExpress.Ui.DxDataGridInterop.RowUpdated -= DxDataGrid_RowUpdated;
		DevExpress.Ui.DxDataGridInterop.RowUpdating -= DxDataGrid_RowUpdating;
		DevExpress.Ui.DxDataGridInterop.RowValidating -= DxDataGrid_RowValidating;
		DevExpress.Ui.DxDataGridInterop.SelectionChanged -= DxDataGrid_SelectionChanged;
		DevExpress.Ui.DxDataGridInterop.ToolbarPreparing -= DxDataGrid_ToolbarPreparing;
		DevExpress.Ui.DxDataGridInterop.ContentReady -= DxDataGrid_ContentReady;
		DevExpress.Ui.DxDataGridInterop.Disposing -= DxDataGrid_Disposing;
		DevExpress.Ui.DxDataGridInterop.OptionChanged -= DxDataGrid_OptionChanged;
		DevExpress.Ui.DxDataGridInterop.Initialized -= DxDataGrid_Initialized;
	}
}
